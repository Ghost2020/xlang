










namespace Windows.Devices.SmartCards
{
    [contractversion(6)]
    apicontract SmartCardEmulatorContract{};

    [contractversion(3)]
    apicontract SmartCardBackgroundTriggerContract{};

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SmartCardReaderKind
    {
        Any,
        Generic,
        Tpm,
        Nfc,
        Uicc,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        EmbeddedSE,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SmartCardReaderStatus
    {
        Disconnected,
        Ready,
        Exclusive,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SmartCardStatus
    {
        Disconnected,
        Ready,
        Shared,
        Exclusive,
        Unresponsive,
    };

    [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
    enum SmartCardTriggerType
    {
        EmulatorTransaction,
        EmulatorNearFieldEntry,
        EmulatorNearFieldExit,
        [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
        EmulatorHostApplicationActivated,
        [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
        EmulatorAppletIdGroupRegistrationChanged,
        [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 2)]
        ReaderCardAdded,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardEmulatorEnablementPolicy
    {
        Never,
        Always,
        ScreenOn,
        ScreenUnlocked,
    };

    [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
    enum SmartCardLaunchBehavior
    {
        Default,
        AboveLock,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SmartCardPinCharacterPolicyOption
    {
        Allow,
        RequireAtLeastOne,
        Disallow,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardEmulationCategory
    {
        Other,
        Payment,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardEmulationType
    {
        Host,
        Uicc,
        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 3)]
        EmbeddedSE,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardAppletIdGroupActivationPolicy
    {
        Disabled,
        ForegroundOverride,
        Enabled,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardActivationPolicyChangeResult
    {
        Denied,
        Allowed,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardEmulatorConnectionDeactivatedReason
    {
        ConnectionLost,
        ConnectionRedirected,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardEmulatorConnectionSource
    {
        Unknown,
        NfcReader,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    enum SmartCardAutomaticResponseStatus
    {
        None,
        Success,
        UnknownError,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardUnlockPromptingBehavior
    {
        AllowUnlockPrompt,
        RequireUnlockPrompt,
        PreventUnlockPrompt,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramStorageKeyAlgorithm
    {
        None,
        Rsa2048,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramMaterialType
    {
        None,
        StaticDataAuthentication,
        TripleDes112,
        Aes,
        RsaPkcs1,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    enum SmartCardCryptogramMaterialProtectionMethod
    {
        None,
        WhiteBoxing,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramAlgorithm
    {
        None,
        CbcMac,
        Cvc3Umd,
        DecimalizedMsd,
        Cvc3MD,
        Sha1,
        SignedDynamicApplicationData,
        RsaPkcs1,
        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
        Sha256Hmac,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramMaterialPackageFormat
    {
        None,
        JweRsaPki,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    [flags]
    enum SmartCardCryptogramStorageKeyCapabilities
    {
        None,
        HardwareProtection,
        UnlockPrompt,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramMaterialPackageConfirmationResponseFormat
    {
        None,
        VisaHmac,
    };

    [flags]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramPlacementOptions
    {
        None,
        UnitsAreInNibbles,
        ChainOutput,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptogramGeneratorOperationStatus
    {
        Success,
        AuthorizationFailed,
        AuthorizationCanceled,
        AuthorizationRequired,
        CryptogramMaterialPackageStorageKeyExists,
        NoCryptogramMaterialPackageStorageKey,
        NoCryptogramMaterialPackage,
        UnsupportedCryptogramMaterialPackage,
        UnknownCryptogramMaterialName,
        InvalidCryptogramMaterialUsage,
        ApduResponseNotSent,
        OtherError,
        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
        ValidationFailed,
        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 5)]
        NotSupported,
    };

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    enum SmartCardCryptographicKeyAttestationStatus
    {
        NoAttestation,
        SoftwareKeyWithoutTpm,
        SoftwareKeyWithTpm,
        TpmKeyUnknownAttestationStatus,
        TpmKeyWithoutAttestationCapability,
        TpmKeyWithTemporaryAttestationFailure,
        TpmKeyWithLongTermAttestationFailure,
        TpmKeyWithAttestation,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Devices.SmartCards.ISmartCardReaderStatics", 103c04e1-a1ca-48f2-a281-5b6f669af107)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardReader", 1074b4e0-54c2-4df0-817a-14c14378f06c)]
    [threading(both)]
    runtimeclass SmartCardReader
    {
        [method_name("GetDeviceSelector")] static String GetDeviceSelector();
        [method_name("GetDeviceSelectorWithKind")] static String GetDeviceSelector(SmartCardReaderKind kind);
        static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardReader>  FromIdAsync(String deviceId);
        String DeviceId{ get; };
        String Name{ get; };
        Windows.Devices.SmartCards.SmartCardReaderKind Kind{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardReaderStatus>  GetStatusAsync();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCard> >  FindAllCardsAsync();
        event Windows.Foundation.TypedEventHandler <Windows.Devices.SmartCards.SmartCardReader, Windows.Devices.SmartCards.CardAddedEventArgs>  CardAdded;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.SmartCards.SmartCardReader, Windows.Devices.SmartCards.CardRemovedEventArgs>  CardRemoved;
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCard", 1b718871-6434-43f4-b55a-6a29623870aa)]
    runtimeclass SmartCard
    {
        Windows.Devices.SmartCards.SmartCardReader Reader{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardStatus>  GetStatusAsync();
        Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IBuffer>  GetAnswerToResetAsync();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardConnect", 2fdf87e5-028d-491e-a058-3382c3986f40)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardConnection>  ConnectAsync();
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ICardAddedEventArgs", 18bbef98-f18b-4dd3-b118-dfb2c8e23cc6)]
    runtimeclass CardAddedEventArgs
    {
        Windows.Devices.SmartCards.SmartCard SmartCard{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ICardRemovedEventArgs", 15331aaf-22d7-4945-afc9-03b46f42a6cd)]
    runtimeclass CardRemovedEventArgs
    {
        Windows.Devices.SmartCards.SmartCard SmartCard{ get; };
    }





    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Devices.SmartCards.ISmartCardProvisioningStatics", 13882848-0d13-4e70-9735-51daeca5254f)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardProvisioning", 19eeedbd-1fab-477c-b712-1a2c5af1fd6e)]
    [threading(both)]
    runtimeclass SmartCardProvisioning
    {
        static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardProvisioning>  FromSmartCardAsync(SmartCard card);
        [method_name("RequestVirtualSmartCardCreationAsync")] [remote_sync]static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardProvisioning>  RequestVirtualSmartCardCreationAsync(String friendlyName, Windows.Storage.Streams.IBuffer administrativeKey, SmartCardPinPolicy pinPolicy);
        [method_name("RequestVirtualSmartCardCreationAsyncWithCardId")] [remote_sync]static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardProvisioning>  RequestVirtualSmartCardCreationAsync(String friendlyName, Windows.Storage.Streams.IBuffer administrativeKey, SmartCardPinPolicy pinPolicy, Guid cardId);
        [remote_sync]static Windows.Foundation.IAsyncOperation <Boolean>  RequestVirtualSmartCardDeletionAsync(SmartCard card);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Devices.SmartCards.ISmartCardProvisioningStatics2", 3447c6a8-c9a0-4bd6-b50d-251f4e8d3a62)]
        {
            [method_name("RequestAttestedVirtualSmartCardCreationAsync")] [remote_sync]static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardProvisioning>  RequestAttestedVirtualSmartCardCreationAsync(String friendlyName, Windows.Storage.Streams.IBuffer administrativeKey, SmartCardPinPolicy pinPolicy);
            [method_name("RequestAttestedVirtualSmartCardCreationAsyncWithCardId")] [remote_sync]static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardProvisioning>  RequestAttestedVirtualSmartCardCreationAsync(String friendlyName, Windows.Storage.Streams.IBuffer administrativeKey, SmartCardPinPolicy pinPolicy, Guid cardId);
        }
        Windows.Devices.SmartCards.SmartCard SmartCard{ get; };
        Windows.Foundation.IAsyncOperation <Guid>  GetIdAsync();
        Windows.Foundation.IAsyncOperation <String>  GetNameAsync();
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardChallengeContext>  GetChallengeContextAsync();
        [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  RequestPinChangeAsync();
        [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  RequestPinResetAsync(SmartCardPinResetHandler handler);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardProvisioning2", 10fd28eb-3f79-4b66-9b7c-11c149b7d0bc)]
        {
            Windows.Foundation.IAsyncOperation <String>  GetAuthorityKeyContainerNameAsync();
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardPinPolicy", 183ce184-4db6-4841-ac9e-2ac1f39b7304)]
    [threading(both)]
    runtimeclass SmartCardPinPolicy
    {
        SmartCardPinPolicy();
        UInt32 MinLength{ get; };
        UInt32 MinLength{ set; };
        UInt32 MaxLength{ get; };
        UInt32 MaxLength{ set; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption UppercaseLetters{ get; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption UppercaseLetters{ set; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption LowercaseLetters{ get; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption LowercaseLetters{ set; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Digits{ get; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption Digits{ set; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption SpecialCharacters{ get; };
        Windows.Devices.SmartCards.SmartCardPinCharacterPolicyOption SpecialCharacters{ set; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardChallengeContext", 192a5319-c9c4-4947-81cc-44794a61ef91)]
    runtimeclass SmartCardChallengeContext
        : Windows.Foundation.IClosable
    {
        Windows.Storage.Streams.IBuffer Challenge{ get; };
        Windows.Foundation.IAsyncOperation <Boolean>  VerifyResponseAsync(Windows.Storage.Streams.IBuffer response);
        [method_name("ProvisionAsync")] Windows.Foundation.IAsyncAction ProvisionAsync(Windows.Storage.Streams.IBuffer response, Boolean formatCard);
        [method_name("ProvisionAsyncWithNewCardId")] Windows.Foundation.IAsyncAction ProvisionAsync(Windows.Storage.Streams.IBuffer response, Boolean formatCard, Guid newCardId);
        Windows.Foundation.IAsyncAction ChangeAdministrativeKeyAsync(Windows.Storage.Streams.IBuffer response, Windows.Storage.Streams.IBuffer newAdministrativeKey);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(138d5e40-f3bc-4a5c-b41d-4b4ef684e237)]
    delegate void SmartCardPinResetHandler(SmartCardProvisioning sender, SmartCardPinResetRequest request);

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardPinResetRequest", 12fe3c4d-5fb9-4e8e-9ff6-61f475124fef)]
    runtimeclass SmartCardPinResetRequest
    {
        Windows.Storage.Streams.IBuffer Challenge{ get; };
        Windows.Foundation.DateTime Deadline{ get; };
        Windows.Devices.SmartCards.SmartCardPinResetDeferral GetDeferral();
        void SetResponse(Windows.Storage.Streams.IBuffer response);
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardPinResetDeferral", 18c94aac-7805-4004-85e4-bbefac8f6884)]
    runtimeclass SmartCardPinResetDeferral
    {
        void Complete();
    }




    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardConnection", 7edb991a-a81a-47bc-a649-156be6b7f231)]
    runtimeclass SmartCardConnection
        : Windows.Foundation.IClosable
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IBuffer>  TransmitAsync(Windows.Storage.Streams.IBuffer command);
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [static_name("Windows.Devices.SmartCards.ISmartCardEmulatorStatics2", 69ae9f8a-b775-488b-8436-6c1e28ed731f)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardEmulator", dfb906b2-875e-47e5-8077-e8bff1b1c6fb)]
    [threading(both)]
    runtimeclass SmartCardEmulator
    {
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration> >  GetAppletIdGroupRegistrationsAsync();
        static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardAppletIdGroupRegistration>  RegisterAppletIdGroupAsync(SmartCardAppletIdGroup appletIdGroup);
        static Windows.Foundation.IAsyncAction UnregisterAppletIdGroupAsync(SmartCardAppletIdGroupRegistration registration);
        static UInt16 MaxAppletIdGroupRegistrations{ get; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 5)]
        [static_name("Windows.Devices.SmartCards.ISmartCardEmulatorStatics3", 59ea142a-9f09-43f5-8565-cfa8148e4cb2)]
        {
            static Boolean IsSupported();
        }

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
        [static_name("Windows.Devices.SmartCards.ISmartCardEmulatorStatics", 7a9bfc4b-c4d3-494f-b8a2-6215d81e85b2)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardEmulator>  GetDefaultAsync();
        }
        Windows.Devices.SmartCards.SmartCardEmulatorEnablementPolicy EnablementPolicy{ get; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardEmulator2", fe3fc0b8-8529-411a-807b-48edc2a0ab44)]
        {
            event Windows.Foundation.TypedEventHandler <Windows.Devices.SmartCards.SmartCardEmulator, Windows.Devices.SmartCards.SmartCardEmulatorApduReceivedEventArgs>  ApduReceived;
            event Windows.Foundation.TypedEventHandler <Windows.Devices.SmartCards.SmartCardEmulator, Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedEventArgs>  ConnectionDeactivated;
            void Start();
            Boolean IsHostCardEmulationSupported();
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration", df1208d1-31bb-5596-43b1-6d69a0257b3a)]
    runtimeclass SmartCardAppletIdGroupRegistration
    {
        Windows.Devices.SmartCards.SmartCardAppletIdGroupActivationPolicy ActivationPolicy{ get; };
        Windows.Devices.SmartCards.SmartCardAppletIdGroup AppletIdGroup{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardActivationPolicyChangeResult>  RequestActivationPolicyChangeAsync(SmartCardAppletIdGroupActivationPolicy policy);
        Guid Id{ get; };
        Windows.Foundation.IAsyncAction SetAutomaticResponseApdusAsync(Windows.Foundation.Collections.IIterable <Windows.Devices.SmartCards.SmartCardAutomaticResponseApdu>  apdus);

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 6)]
        [feature(Velocity_SometimesAlwaysEnabled)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroupRegistration2", 5f5508d8-98a7-4f2e-91d9-6cfcceda407f)]
        {
            String SmartCardReaderId{ get; };
            Windows.Foundation.IAsyncAction SetPropertiesAsync(Windows.Foundation.Collections.ValueSet props);
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [static_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroupStatics", ab2899a9-e76c-45cf-bf1d-90eaa6205927)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroup", 7db165e6-6264-56f4-5e03-c86385395eb1)]
    [threading(both)]
    runtimeclass SmartCardAppletIdGroup
    {
        static UInt16 MaxAppletIds{ get; };
        SmartCardAppletIdGroup();

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
        [constructor_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroupFactory", 9105eb4d-4a65-4e41-8061-cbe83f3695e5)]
        {
            [method_name( "Create" )] SmartCardAppletIdGroup(String displayName, Windows.Foundation.Collections.IVector <Windows.Storage.Streams.IBuffer>  appletIds, SmartCardEmulationCategory emulationCategory, SmartCardEmulationType emulationType);
        }
        String DisplayName{ get; };
        String DisplayName{ set; };
        Windows.Foundation.Collections.IVector <Windows.Storage.Streams.IBuffer>  AppletIds{ get; };
        Windows.Devices.SmartCards.SmartCardEmulationCategory SmartCardEmulationCategory{ get; };
        Windows.Devices.SmartCards.SmartCardEmulationCategory SmartCardEmulationCategory{ set; };
        Windows.Devices.SmartCards.SmartCardEmulationType SmartCardEmulationType{ get; };
        Windows.Devices.SmartCards.SmartCardEmulationType SmartCardEmulationType{ set; };
        Boolean AutomaticEnablement{ get; };
        Boolean AutomaticEnablement{ set; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 6)]
        [feature(Velocity_SometimesAlwaysEnabled)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardAppletIdGroup2", 6b0ef9dc-9956-4a62-8d4e-d37a68ebc3a6)]
        {
            Windows.Storage.Streams.IRandomAccessStreamReference Logo{ get; };
            Windows.Storage.Streams.IRandomAccessStreamReference Logo{ set; };
            String Description{ get; };
            String Description{ set; };
            Windows.Foundation.Collections.ValueSet Properties{ get; };
            Boolean SecureUserAuthenticationRequired{ get; };
            Boolean SecureUserAuthenticationRequired{ set; };
        }
    }




    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs", d55d1576-69d2-5333-5b5f-f8c0d6e9f09f)]
    runtimeclass SmartCardEmulatorApduReceivedEventArgs
    {
        Windows.Storage.Streams.IBuffer CommandApdu{ get; };
        Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties ConnectionProperties{ get; };
        Windows.Foundation.IAsyncOperation <Boolean>  TryRespondAsync(Windows.Storage.Streams.IBuffer responseApdu);
        Windows.Devices.SmartCards.SmartCardAutomaticResponseStatus AutomaticResponseStatus{ get; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgsWithCryptograms", d550bac7-b7bf-4e29-9294-0c4ac3c941bd)]
        {
            [method_name("TryRespondWithCryptogramsAsync")] Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  TryRespondWithCryptogramsAsync(Windows.Storage.Streams.IBuffer responseTemplate, Windows.Foundation.Collections.IIterable <Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>  cryptogramPlacementSteps);
            [method_name("TryRespondWithCryptogramsAndStateAsync")] Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  TryRespondWithCryptogramsAsync(Windows.Storage.Streams.IBuffer responseTemplate, Windows.Foundation.Collections.IIterable <Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>  cryptogramPlacementSteps, Windows.Foundation.IReference <UInt32>  nextState);
        }

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardEmulatorApduReceivedEventArgs2", 8bf93df0-22e1-4238-8610-94ce4a965425)]
        {
            UInt32 State{ get; };
            [method_name("TryRespondWithStateAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryRespondAsync(Windows.Storage.Streams.IBuffer responseApdu, Windows.Foundation.IReference <UInt32>  nextState);
        }
    }

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardEmulatorConnectionDeactivatedEventArgs", 2186d8d3-c5eb-5262-43df-62a0a1b55557)]
    runtimeclass SmartCardEmulatorConnectionDeactivatedEventArgs
    {
        Windows.Devices.SmartCards.SmartCardEmulatorConnectionProperties ConnectionProperties{ get; };
        Windows.Devices.SmartCards.SmartCardEmulatorConnectionDeactivatedReason Reason{ get; };
    }





    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardEmulatorConnectionProperties", 4e2ca5ee-f969-507d-6cf9-34e2d18df311)]
    runtimeclass SmartCardEmulatorConnectionProperties
    {
        Guid Id{ get; };
        Windows.Devices.SmartCards.SmartCardEmulatorConnectionSource Source{ get; };
    }










    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.SmartCards.ISmartCardAutomaticResponseApduFactory", e97ea2fa-d02c-4c55-b02a-8cff7fa9f05b)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu", 52152bab-c63e-4531-a857-d756d99b986a)]
    [threading(both)]
    runtimeclass SmartCardAutomaticResponseApdu
    {
        [method_name( "Create" )] SmartCardAutomaticResponseApdu(Windows.Storage.Streams.IBuffer commandApdu, Windows.Storage.Streams.IBuffer responseApdu);
        Windows.Storage.Streams.IBuffer CommandApdu{ get; };
        Windows.Storage.Streams.IBuffer CommandApdu{ set; };
        Windows.Storage.Streams.IBuffer CommandApduBitMask{ get; };
        Windows.Storage.Streams.IBuffer CommandApduBitMask{ set; };
        Boolean ShouldMatchLength{ get; };
        Boolean ShouldMatchLength{ set; };
        Windows.Storage.Streams.IBuffer AppletId{ get; };
        Windows.Storage.Streams.IBuffer AppletId{ set; };
        Windows.Storage.Streams.IBuffer ResponseApdu{ get; };
        Windows.Storage.Streams.IBuffer ResponseApdu{ set; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu2", 44aebb14-559d-4531-4e51-89db6fa8a57a)]
        {
            Windows.Foundation.IReference <UInt32>  InputState{ get; };
            Windows.Foundation.IReference <UInt32>  InputState{ set; };
            Windows.Foundation.IReference <UInt32>  OutputState{ get; };
            Windows.Foundation.IReference <UInt32>  OutputState{ set; };
        }

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 3)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardAutomaticResponseApdu3", bf43da74-6576-4392-9367-fe3bc9e2d496)]
        {
            Boolean AllowWhenCryptogramGeneratorNotPrepared{ get; };
            Boolean AllowWhenCryptogramGeneratorNotPrepared{ set; };
        }
    }







    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramPlacementStep", 947b03eb-8342-4792-a2e5-925636378a53)]
    [threading(both)]
    runtimeclass SmartCardCryptogramPlacementStep
    {
        SmartCardCryptogramPlacementStep();
        Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm Algorithm{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm Algorithm{ set; };
        Windows.Storage.Streams.IBuffer SourceData{ get; };
        Windows.Storage.Streams.IBuffer SourceData{ set; };
        String CryptogramMaterialPackageName{ get; };
        String CryptogramMaterialPackageName{ set; };
        String CryptogramMaterialName{ get; };
        String CryptogramMaterialName{ set; };
        Int32 TemplateOffset{ get; };
        Int32 TemplateOffset{ set; };
        Int32 CryptogramOffset{ get; };
        Int32 CryptogramOffset{ set; };
        Int32 CryptogramLength{ get; };
        Int32 CryptogramLength{ set; };
        Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions CryptogramPlacementOptions{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramPlacementOptions CryptogramPlacementOptions{ set; };
        Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep ChainedOutputStep{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep ChainedOutputStep{ set; };
    }







    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyCharacteristics", 8552546e-4457-4825-b464-635471a39f5c)]
    [threading(both)]
    runtimeclass SmartCardCryptogramStorageKeyCharacteristics
    {
        SmartCardCryptogramStorageKeyCharacteristics();
        String StorageKeyName{ get; };
        Windows.Foundation.DateTime DateCreated{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyAlgorithm Algorithm{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities Capabilities{ get; };
    }



    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPackageCharacteristics", ffb58e1f-0692-4c47-93cf-34d91f9dcd00)]
    [threading(both)]
    runtimeclass SmartCardCryptogramMaterialPackageCharacteristics
    {
        SmartCardCryptogramMaterialPackageCharacteristics();
        String PackageName{ get; };
        String StorageKeyName{ get; };
        Windows.Foundation.DateTime DateImported{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat PackageFormat{ get; };
    }



    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramMaterialCharacteristics", fc9ac5cc-c1d7-4153-923b-a2d43c6c8d49)]
    [threading(both)]
    runtimeclass SmartCardCryptogramMaterialCharacteristics
    {
        SmartCardCryptogramMaterialCharacteristics();
        String MaterialName{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm>  AllowedAlgorithms{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat>  AllowedProofOfPossessionAlgorithms{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm>  AllowedValidations{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramMaterialType MaterialType{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramMaterialProtectionMethod ProtectionMethod{ get; };
        Int32 ProtectionVersion{ get; };
        Int32 MaterialLength{ get; };
    }


    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Devices.SmartCards.ISmartCardCryptogramGeneratorStatics", 09933910-cb9c-4015-967d-5234f3b02900)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramGenerator", e39f587b-edd3-4e49-b594-0ff5e4d0c76f)]
    [threading(both)]
    runtimeclass SmartCardCryptogramGenerator
    {

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 5)]
        [static_name("Windows.Devices.SmartCards.ISmartCardCryptogramGeneratorStatics2", 09bdf5e5-b4bd-4e23-a588-74469204c128)]
        {
            static Boolean IsSupported();
        }
        static Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGenerator>  GetSmartCardCryptogramGeneratorAsync();
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialType>  SupportedCryptogramMaterialTypes{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramAlgorithm>  SupportedCryptogramAlgorithms{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageFormat>  SupportedCryptogramMaterialPackageFormats{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageConfirmationResponseFormat>  SupportedCryptogramMaterialPackageConfirmationResponseFormats{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities>  SupportedSmartCardCryptogramStorageKeyCapabilities{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  DeleteCryptogramMaterialStorageKeyAsync(String storageKeyName);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  CreateCryptogramMaterialStorageKeyAsync(SmartCardUnlockPromptingBehavior promptingBehavior, String storageKeyName, SmartCardCryptogramStorageKeyAlgorithm algorithm, SmartCardCryptogramStorageKeyCapabilities capabilities);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyInfo>  RequestCryptogramMaterialStorageKeyInfoAsync(SmartCardUnlockPromptingBehavior promptingBehavior, String storageKeyName, Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType format);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  ImportCryptogramMaterialPackageAsync(SmartCardCryptogramMaterialPackageFormat format, String storageKeyName, String materialPackageName, Windows.Storage.Streams.IBuffer cryptogramMaterialPackage);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramMaterialPossessionProof>  TryProvePossessionOfCryptogramMaterialPackageAsync(SmartCardUnlockPromptingBehavior promptingBehavior, SmartCardCryptogramMaterialPackageConfirmationResponseFormat responseFormat, String materialPackageName, String materialName, Windows.Storage.Streams.IBuffer challenge);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  RequestUnlockCryptogramMaterialForUseAsync(SmartCardUnlockPromptingBehavior promptingBehavior);
        Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  DeleteCryptogramMaterialPackageAsync(String materialPackageName);

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramGenerator2", 7116aa34-5d6d-4b4a-96a3-efa47d2a7e25)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus>  ValidateRequestApduAsync(SmartCardUnlockPromptingBehavior promptingBehavior, Windows.Storage.Streams.IBuffer apduToValidate, Windows.Foundation.Collections.IIterable <Windows.Devices.SmartCards.SmartCardCryptogramPlacementStep>  cryptogramPlacementSteps);
            Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult>  GetAllCryptogramStorageKeyCharacteristicsAsync();
            [method_name("GetAllCryptogramMaterialPackageCharacteristicsAsync")] Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>  GetAllCryptogramMaterialPackageCharacteristicsAsync();
            [method_name("GetAllCryptogramMaterialPackageCharacteristicsWithStorageKeyAsync")] Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>  GetAllCryptogramMaterialPackageCharacteristicsAsync(String storageKeyName);
            Windows.Foundation.IAsyncOperation <Windows.Devices.SmartCards.SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult>  GetAllCryptogramMaterialCharacteristicsAsync(SmartCardUnlockPromptingBehavior promptingBehavior, String materialPackageName);
        }
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo", 77b0f00d-b097-4f61-a26a-9561639c9c3a)]
    runtimeclass SmartCardCryptogramStorageKeyInfo
    {
        Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus OperationStatus{ get; };
        Windows.Security.Cryptography.Core.CryptographicPublicKeyBlobType PublicKeyBlobType{ get; };
        Windows.Storage.Streams.IBuffer PublicKey{ get; };
        Windows.Devices.SmartCards.SmartCardCryptographicKeyAttestationStatus AttestationStatus{ get; };
        Windows.Storage.Streams.IBuffer Attestation{ get; };
        Windows.Storage.Streams.IBuffer AttestationCertificateChain{ get; };
        Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCapabilities Capabilities{ get; };

        [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 3)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramStorageKeyInfo2", 000440f9-f7fd-417d-89e1-fbb0382adc4d)]
        {
            String OperationalRequirements{ get; };
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 2)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramMaterialPossessionProof", e5b9ab8c-a141-4135-9add-b0d2e3aa1fc9)]
    runtimeclass SmartCardCryptogramMaterialPossessionProof
    {
        Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus OperationStatus{ get; };
        Windows.Storage.Streams.IBuffer Proof{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult", 8c7ce857-a7e7-489d-b9d6-368061515012)]
    [threading(both)]
    runtimeclass SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
    {
        SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult();
        Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus OperationStatus{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramStorageKeyCharacteristics>  Characteristics{ get; };
    }

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult", 4e6a8a5c-9773-46c4-a32f-b1e543159e04)]
    [threading(both)]
    runtimeclass SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
    {
        SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult();
        Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus OperationStatus{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialPackageCharacteristics>  Characteristics{ get; };
    }

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult", 2798e029-d687-4c92-86c6-399e9a0ecb09)]
    [threading(both)]
    runtimeclass SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
    {
        SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult();
        Windows.Devices.SmartCards.SmartCardCryptogramGeneratorOperationStatus OperationStatus{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.SmartCards.SmartCardCryptogramMaterialCharacteristics>  Characteristics{ get; };
    }

    [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.SmartCards.ISmartCardTriggerDetails", 5f9bf11e-39ef-4f2b-b44f-0a9155b177bc)]
    runtimeclass SmartCardTriggerDetails
    {
        Windows.Devices.SmartCards.SmartCardTriggerType TriggerType{ get; };
        Windows.Storage.Streams.IBuffer SourceAppletId{ get; };
        Windows.Storage.Streams.IBuffer TriggerData{ get; };

        [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardTriggerDetails2", 2945c569-8975-4a51-9e1a-5f8a76ee51af)]
        {
            Windows.Devices.SmartCards.SmartCardEmulator Emulator{ get; };
            [method_name("TryLaunchCurrentAppAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryLaunchCurrentAppAsync(String arguments);
            [method_name("TryLaunchCurrentAppWithBehaviorAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryLaunchCurrentAppAsync(String arguments, SmartCardLaunchBehavior behavior);
        }

        [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 3)]
        [interface_name("Windows.Devices.SmartCards.ISmartCardTriggerDetails3", b3e2c27d-18c6-4ba8-8376-ef03d4912666)]
        {
            Windows.Devices.SmartCards.SmartCard SmartCard{ get; };
        }
    }

    [contract(Windows.Devices.SmartCards.SmartCardEmulatorContract, 6)]
    [feature(Velocity_SometimesAlwaysEnabled)]
    [static_name("Windows.Devices.SmartCards.IKnownSmartCardAppletIds", 7b04d8d8-95b4-4c88-8cea-411e55511efc)]
    runtimeclass KnownSmartCardAppletIds
    {
        static Windows.Storage.Streams.IBuffer PaymentSystemEnvironment{ get; };
        static Windows.Storage.Streams.IBuffer ProximityPaymentSystemEnvironment{ get; };
    }



}
namespace Windows.ApplicationModel.Background
{
    [marshaling_behavior(standard)]
    [contract(Windows.Devices.SmartCards.SmartCardBackgroundTriggerContract, 1)]
    [constructor_name("Windows.ApplicationModel.Background.ISmartCardTriggerFactory", 63bf54c3-89c1-4e00-a9d3-97c629269dad)]
    [interface_name("Windows.ApplicationModel.Background.ISmartCardTrigger", f53bc5ac-84ca-4972-8ce9-e58f97b37a50)]
    [threading(mta)]
    runtimeclass SmartCardTrigger
        : Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        [method_name( "Create" )] SmartCardTrigger(Windows.Devices.SmartCards.SmartCardTriggerType triggerType);
        Windows.Devices.SmartCards.SmartCardTriggerType TriggerType{ get; };
    }

}
