









namespace Windows.ApplicationModel.ConversationalAgent
{
    [feature(Velocity_SometimesAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum ConversationalAgentState
    {
        Inactive,
        Detecting,
        Listening,
        Working,
        Speaking,
        ListeningAndSpeaking,
    };

    [feature(Velocity_SometimesAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum ConversationalAgentSystemStateChangeType
    {
        UserAuthentication,
        ScreenAvailability,
        IndicatorLightAvailability,
        VoiceActivationAvailability,
    };


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_SometimesAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSystemStateChangedEventArgs", 1c2c6e3e-2785-59a7-8e71-38adeef79928)]
    runtimeclass ConversationalAgentSystemStateChangedEventArgs
    {
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangeType SystemStateChangeType{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionInterruptedEventArgs", 9766591f-f63d-5d3e-9bf2-bd0760552686)]
    runtimeclass ConversationalAgentSessionInterruptedEventArgs
    {
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignalDetectedEventArgs", 4d57eb8f-f88a-599b-91d3-d604876708bc)]
    runtimeclass ConversationalAgentSignalDetectedEventArgs
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum ConversationalAgentSessionUpdateResponse
    {
        Success,
        Failed,
    };


    [feature(Velocity_SometimesAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [interface_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSignal", 20ed25f7-b120-51f2-8603-265d6a47f232)]
    runtimeclass ConversationalAgentSignal
    {
        Boolean IsSignalVerificationRequired{ get; };
        Boolean IsSignalVerificationRequired{ set; };
        String SignalId{ get; };
        String SignalId{ set; };
        String SignalName{ get; };
        String SignalName{ set; };
        Object SignalContext{ get; };
        Object SignalContext{ set; };
        Windows.Foundation.TimeSpan SignalStart{ get; };
        Windows.Foundation.TimeSpan SignalStart{ set; };
        Windows.Foundation.TimeSpan SignalEnd{ get; };
        Windows.Foundation.TimeSpan SignalEnd{ set; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [feature(Velocity_SometimesAlwaysEnabled)]
    [static_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSessionStatics", a005166e-e954-576e-be04-11b8ed10f37b)]
    [interface_name("Windows.ApplicationModel.ConversationalAgent.IConversationalAgentSession", daaae09a-b7ba-57e5-ad13-df520f9b6fa7)]
    [threading(both)]
    runtimeclass ConversationalAgentSession
        : Windows.Foundation.IClosable
    {
        static Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession>  GetCurrentSessionAsync();
        static Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession GetCurrentSessionSync();
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionInterruptedEventArgs>  SessionInterrupted;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignalDetectedEventArgs>  SignalDetected;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSession, Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSystemStateChangedEventArgs>  SystemStateChanged;
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentState AgentState{ get; };
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSignal Signal{ get; };
        Boolean IsIndicatorLightAvailable{ get; };
        Boolean IsScreenAvailable{ get; };
        Boolean IsUserAuthenticated{ get; };
        Boolean IsVoiceActivationAvailable{ get; };
        Boolean IsInterruptible{ get; };
        Boolean IsInterrupted{ get; };
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>  RequestInterruptibleAsync(Boolean interruptible);
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse RequestInterruptible(Boolean interruptible);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>  RequestAgentStateChangeAsync(ConversationalAgentState state);
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse RequestAgentStateChange(ConversationalAgentState state);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse>  RequestForegroundActivationAsync();
        Windows.ApplicationModel.ConversationalAgent.ConversationalAgentSessionUpdateResponse RequestForegroundActivation();
        Windows.Foundation.IAsyncOperation <Object>  GetAudioClientAsync();
        Object GetAudioClient();
        Windows.Foundation.IAsyncOperation <Windows.Media.Audio.AudioDeviceInputNode>  CreateAudioDeviceInputNodeAsync(Windows.Media.Audio.AudioGraph graph);
        Windows.Media.Audio.AudioDeviceInputNode CreateAudioDeviceInputNode(Windows.Media.Audio.AudioGraph graph);
        Windows.Foundation.IAsyncOperation <String>  GetAudioCaptureDeviceIdAsync();
        String GetAudioCaptureDeviceId();
        Windows.Foundation.IAsyncOperation <String>  GetAudioRenderDeviceIdAsync();
        String GetAudioRenderDeviceId();
        Windows.Foundation.IAsyncOperation <UInt32>  GetSignalModelIdAsync();
        UInt32 GetSignalModelId();
        Windows.Foundation.IAsyncOperation <Boolean>  SetSignalModelIdAsync(UInt32 signalModelId);
        Boolean SetSignalModelId(UInt32 signalModelId);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <UInt32> >  GetSupportedSignalModelIdsAsync();
        Windows.Foundation.Collections.IVectorView <UInt32>  GetSupportedSignalModelIds();
    }


}
namespace Windows.ApplicationModel.Background
{
    [feature(Velocity_SometimesAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [dualapipartition(0x1)]
    runtimeclass ConversationalAgentTrigger
        : [default]Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        ConversationalAgentTrigger();
    }

}
