













namespace Windows.Media.Audio
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AudioGraphCreationStatus
    {
        Success,
        DeviceNotAvailable,
        FormatNotSupported,
        UnknownFailure,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum QuantumSizeSelectionMode
    {
        SystemDefault,
        LowestLatency,
        ClosestToDesired,
    };


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Media.Audio.IAudioGraphStatics", 76ec3132-e159-4ab7-a82a-17beb4b31e94)]
    [interface_name("Windows.Media.Audio.IAudioGraph", 1ad46eed-e48c-4e14-9660-2c4f83e9cdd8)]
    [threading(both)]
    runtimeclass AudioGraph
        : Windows.Foundation.IClosable
    {
        static Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioGraphResult>  CreateAsync(AudioGraphSettings settings);
        [method_name("CreateFrameInputNode")] Windows.Media.Audio.AudioFrameInputNode CreateFrameInputNode();
        [method_name("CreateFrameInputNodeWithFormat")] Windows.Media.Audio.AudioFrameInputNode CreateFrameInputNode(Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties);
        [method_name("CreateDeviceInputNodeAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioDeviceInputNodeResult>  CreateDeviceInputNodeAsync(Windows.Media.Capture.MediaCategory category);
        [method_name("CreateDeviceInputNodeWithFormatAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioDeviceInputNodeResult>  CreateDeviceInputNodeAsync(Windows.Media.Capture.MediaCategory category, Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties);
        [method_name("CreateDeviceInputNodeWithFormatOnDeviceAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioDeviceInputNodeResult>  CreateDeviceInputNodeAsync(Windows.Media.Capture.MediaCategory category, Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties, Windows.Devices.Enumeration.DeviceInformation device);
        [method_name("CreateFrameOutputNode")] Windows.Media.Audio.AudioFrameOutputNode CreateFrameOutputNode();
        [method_name("CreateFrameOutputNodeWithFormat")] Windows.Media.Audio.AudioFrameOutputNode CreateFrameOutputNode(Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties);
        Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioDeviceOutputNodeResult>  CreateDeviceOutputNodeAsync();
        Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioFileInputNodeResult>  CreateFileInputNodeAsync(Windows.Storage.IStorageFile file);
        [method_name("CreateFileOutputNodeAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioFileOutputNodeResult>  CreateFileOutputNodeAsync(Windows.Storage.IStorageFile file);
        [method_name("CreateFileOutputNodeWithFileProfileAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioFileOutputNodeResult>  CreateFileOutputNodeAsync(Windows.Storage.IStorageFile file, Windows.Media.MediaProperties.MediaEncodingProfile fileEncodingProfile);
        [method_name("CreateSubmixNode")] Windows.Media.Audio.AudioSubmixNode CreateSubmixNode();
        [method_name("CreateSubmixNodeWithFormat")] Windows.Media.Audio.AudioSubmixNode CreateSubmixNode(Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties);
        void Start();
        void Stop();
        void ResetAllNodes();
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioGraph, Object>  QuantumStarted;
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioGraph, Object>  QuantumProcessed;
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioGraph, Windows.Media.Audio.AudioGraphUnrecoverableErrorOccurredEventArgs>  UnrecoverableErrorOccurred;
        UInt64 CompletedQuantumCount{ get; };
        Windows.Media.MediaProperties.AudioEncodingProperties EncodingProperties{ get; };
        Int32 LatencyInSamples{ get; };
        Windows.Devices.Enumeration.DeviceInformation PrimaryRenderDevice{ get; };
        Windows.Media.AudioProcessing RenderDeviceAudioProcessing{ get; };
        Int32 SamplesPerQuantum{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Media.Audio.IAudioGraph2", 4e4c3bd5-4fc1-45f6-a947-3cd38f4fd839)]
        {
            [method_name("CreateFrameInputNodeWithFormatAndEmitter")] Windows.Media.Audio.AudioFrameInputNode CreateFrameInputNode(Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties, AudioNodeEmitter emitter);
            [method_name("CreateDeviceInputNodeWithFormatAndEmitterOnDeviceAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioDeviceInputNodeResult>  CreateDeviceInputNodeAsync(Windows.Media.Capture.MediaCategory category, Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties, Windows.Devices.Enumeration.DeviceInformation device, AudioNodeEmitter emitter);
            [method_name("CreateFileInputNodeWithEmitterAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateAudioFileInputNodeResult>  CreateFileInputNodeAsync(Windows.Storage.IStorageFile file, AudioNodeEmitter emitter);
            [method_name("CreateSubmixNodeWithFormatAndEmitter")] Windows.Media.Audio.AudioSubmixNode CreateSubmixNode(Windows.Media.MediaProperties.AudioEncodingProperties encodingProperties, AudioNodeEmitter emitter);
            Windows.Media.Audio.AudioGraphBatchUpdater CreateBatchUpdater();
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Media.Audio.IAudioGraph3", ddcd25ae-1185-42a7-831d-6a9b0fc86820)]
        {
            [method_name("CreateMediaSourceAudioInputNodeAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult>  CreateMediaSourceAudioInputNodeAsync(Windows.Media.Core.MediaSource mediaSource);
            [method_name("CreateMediaSourceAudioInputNodeWithEmitterAsync")] Windows.Foundation.IAsyncOperation <Windows.Media.Audio.CreateMediaSourceAudioInputNodeResult>  CreateMediaSourceAudioInputNodeAsync(Windows.Media.Core.MediaSource mediaSource, AudioNodeEmitter emitter);
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.ICreateAudioGraphResult", 5453ef7e-7bde-4b76-bb5d-48f79cfc8c0b)]
    runtimeclass CreateAudioGraphResult
    {
        Windows.Media.Audio.AudioGraphCreationStatus Status{ get; };
        Windows.Media.Audio.AudioGraph Graph{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateAudioGraphResult2", 6d738dfc-88c6-4fcb-a534-85cedd4050a1)]
        {
            HRESULT ExtendedError{ get; };
        }
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Media.Audio.IAudioGraphSettingsFactory", a5d91cc6-c2eb-4a61-a214-1d66d75f83da)]
    [interface_name("Windows.Media.Audio.IAudioGraphSettings", 1d59647f-e6fe-4628-84f8-9d8bdba25785)]
    [threading(both)]
    runtimeclass AudioGraphSettings
    {
        [method_name( "Create" )] AudioGraphSettings(Windows.Media.Render.AudioRenderCategory audioRenderCategory);
        Windows.Media.MediaProperties.AudioEncodingProperties EncodingProperties{ get; };
        Windows.Media.MediaProperties.AudioEncodingProperties EncodingProperties{ set; };
        Windows.Devices.Enumeration.DeviceInformation PrimaryRenderDevice{ get; };
        Windows.Devices.Enumeration.DeviceInformation PrimaryRenderDevice{ set; };
        Windows.Media.Audio.QuantumSizeSelectionMode QuantumSizeSelectionMode{ get; };
        Windows.Media.Audio.QuantumSizeSelectionMode QuantumSizeSelectionMode{ set; };
        Int32 DesiredSamplesPerQuantum{ get; };
        Int32 DesiredSamplesPerQuantum{ set; };
        Windows.Media.Render.AudioRenderCategory AudioRenderCategory{ get; };
        Windows.Media.Render.AudioRenderCategory AudioRenderCategory{ set; };
        Windows.Media.AudioProcessing DesiredRenderDeviceAudioProcessing{ get; };
        Windows.Media.AudioProcessing DesiredRenderDeviceAudioProcessing{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Media.Audio.IAudioGraphSettings2", 72919787-4dab-46e3-b4c9-d8e1a2636062)]
        {
            Double MaxPlaybackSpeedFactor{ set; };
            Double MaxPlaybackSpeedFactor{ get; };
        }
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AudioDeviceNodeCreationStatus
    {
        Success,
        DeviceNotAvailable,
        FormatNotSupported,
        UnknownFailure,
        AccessDenied,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AudioFileNodeCreationStatus
    {
        Success,
        FileNotFound,
        InvalidFileType,
        FormatNotSupported,
        UnknownFailure,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.IAudioDeviceInputNode", b01b6be1-6f4e-49e2-ac01-559d62beb3a9)]
    runtimeclass AudioDeviceInputNode
        : Windows.Media.Audio.IAudioInputNode
        , Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.Media.Audio.IAudioInputNode2
    {
        Windows.Devices.Enumeration.DeviceInformation Device{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.ICreateAudioDeviceInputNodeResult", 16eec7a8-1ca7-40ef-91a4-d346e0aa1bba)]
    runtimeclass CreateAudioDeviceInputNodeResult
    {
        Windows.Media.Audio.AudioDeviceNodeCreationStatus Status{ get; };
        Windows.Media.Audio.AudioDeviceInputNode DeviceInputNode{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateAudioDeviceInputNodeResult2", 921c69ce-3f35-41c7-9622-79f608baedc2)]
        {
            HRESULT ExtendedError{ get; };
        }
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.IAudioDeviceOutputNode", 362edbff-ff1c-4434-9e0f-bd2ef522ac82)]
    runtimeclass AudioDeviceOutputNode
        : Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.Media.Audio.IAudioNodeWithListener
    {
        Windows.Devices.Enumeration.DeviceInformation Device{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult", f7776d27-1d9a-47f7-9cd4-2859cc1b7bff)]
    runtimeclass CreateAudioDeviceOutputNodeResult
    {
        Windows.Media.Audio.AudioDeviceNodeCreationStatus Status{ get; };
        Windows.Media.Audio.AudioDeviceOutputNode DeviceOutputNode{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateAudioDeviceOutputNodeResult2", 4864269f-bdce-4ab1-bd38-fbae93aedaca)]
        {
            HRESULT ExtendedError{ get; };
        }
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.IAudioFileInputNode", 905b67c8-6f65-4cd4-8890-4694843c276d)]
    runtimeclass AudioFileInputNode
        : Windows.Media.Audio.IAudioInputNode
        , Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.Media.Audio.IAudioInputNode2
    {
        Double PlaybackSpeedFactor{ set; };
        Double PlaybackSpeedFactor{ get; };
        Windows.Foundation.TimeSpan Position{ get; };
        void Seek(Windows.Foundation.TimeSpan position);
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  StartTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  StartTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  EndTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  EndTime{ set; };
        Windows.Foundation.IReference <Int32>  LoopCount{ get; };
        Windows.Foundation.IReference <Int32>  LoopCount{ set; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Storage.StorageFile SourceFile{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioFileInputNode, Object>  FileCompleted;
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Media.Audio.ICreateAudioFileInputNodeResult", ce83d61c-e297-4c50-9ce7-1c7a69d6bd09)]
    runtimeclass CreateAudioFileInputNodeResult
    {
        Windows.Media.Audio.AudioFileNodeCreationStatus Status{ get; };
        Windows.Media.Audio.AudioFileInputNode FileInputNode{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateAudioFileInputNodeResult2", f9082020-3d80-4fe0-81c1-768fea7ca7e0)]
        {
            HRESULT ExtendedError{ get; };
        }
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.IAudioFileOutputNode", 50e01980-5166-4093-80f8-ada00089e9cf)]
    runtimeclass AudioFileOutputNode
        : Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
    {
        Windows.Storage.IStorageFile File{ get; };
        Windows.Media.MediaProperties.MediaEncodingProfile FileEncodingProfile{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Media.Transcoding.TranscodeFailureReason>  FinalizeAsync();
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.ICreateAudioFileOutputNodeResult", 47d6ba7b-e909-453f-866e-5540cda734ff)]
    runtimeclass CreateAudioFileOutputNodeResult
    {
        Windows.Media.Audio.AudioFileNodeCreationStatus Status{ get; };
        Windows.Media.Audio.AudioFileOutputNode FileOutputNode{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateAudioFileOutputNodeResult2", 9f01b50d-3318-47b3-a60a-1b492be7fc0d)]
        {
            HRESULT ExtendedError{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 6)]
    enum MediaSourceAudioInputNodeCreationStatus
    {
        Success,
        FormatNotSupported,
        NetworkError,
        UnknownFailure,
    };


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.IMediaSourceAudioInputNode", 99d8983b-a88a-4041-8e4f-ddbac0c91fd3)]
    runtimeclass MediaSourceAudioInputNode
        : Windows.Media.Audio.IAudioInputNode2
        , Windows.Media.Audio.IAudioInputNode
        , Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
    {
        Double PlaybackSpeedFactor{ set; };
        Double PlaybackSpeedFactor{ get; };
        Windows.Foundation.TimeSpan Position{ get; };
        void Seek(Windows.Foundation.TimeSpan position);
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  StartTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  StartTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  EndTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  EndTime{ set; };
        Windows.Foundation.IReference <Int32>  LoopCount{ get; };
        Windows.Foundation.IReference <Int32>  LoopCount{ set; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Media.Core.MediaSource MediaSource{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.MediaSourceAudioInputNode, Object>  MediaSourceCompleted;
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [interface_name("Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult", 46a658a3-53c0-4d59-9e51-cc1d1044a4c4)]
    runtimeclass CreateMediaSourceAudioInputNodeResult
    {
        Windows.Media.Audio.MediaSourceAudioInputNodeCreationStatus Status{ get; };
        Windows.Media.Audio.MediaSourceAudioInputNode Node{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Media.Audio.ICreateMediaSourceAudioInputNodeResult2", 63514ce8-6a1a-49e3-97ec-28fd5be114e5)]
        {
            HRESULT ExtendedError{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AudioGraphUnrecoverableError
    {
        None,
        AudioDeviceLost,
        AudioSessionDisconnected,
        UnknownFailure,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Media.Audio.IAudioGraphUnrecoverableErrorOccurredEventArgs", c3d9cbe0-3ff6-4fb3-b262-50d435c55423)]
    runtimeclass AudioGraphUnrecoverableErrorOccurredEventArgs
    {
        Windows.Media.Audio.AudioGraphUnrecoverableError Error{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    runtimeclass AudioGraphBatchUpdater
        : [default]Windows.Foundation.IClosable
    {
    }


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.IAudioFrameInputNode", 01b266c7-fd96-4ff5-a3c5-d27a9bf44237)]
    runtimeclass AudioFrameInputNode
        : Windows.Media.Audio.IAudioInputNode
        , Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.Media.Audio.IAudioInputNode2
    {
        Double PlaybackSpeedFactor{ set; };
        Double PlaybackSpeedFactor{ get; };
        void AddFrame(Windows.Media.AudioFrame frame);
        void DiscardQueuedFrames();
        UInt64 QueuedSampleCount{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioFrameInputNode, Windows.Media.Audio.AudioFrameCompletedEventArgs>  AudioFrameCompleted;
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.AudioFrameInputNode, Windows.Media.Audio.FrameInputNodeQuantumStartedEventArgs>  QuantumStarted;
    }

    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.IAudioFrameOutputNode", b847371b-3299-45f5-88b3-c9d12a3f1cc8)]
    runtimeclass AudioFrameOutputNode
        : Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
    {
        Windows.Media.AudioFrame GetFrame();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    runtimeclass AudioSubmixNode
        : [default]Windows.Media.Audio.IAudioInputNode
        , Windows.Media.Audio.IAudioNode
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.Media.Audio.IAudioInputNode2
    {
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Media.Audio.IAudioNodeEmitterFactory", fdc8489a-6ad6-4ce4-b7f7-a99370df7ee9)]
    [interface_name("Windows.Media.Audio.IAudioNodeEmitter", 3676971d-880a-47b8-adf7-1323a9d965be)]
    [threading(both)]
    runtimeclass AudioNodeEmitter
    {
        [method_name( "CreateAudioNodeEmitter" )] AudioNodeEmitter(AudioNodeEmitterShape shape, AudioNodeEmitterDecayModel decayModel, AudioNodeEmitterSettings settings);
        AudioNodeEmitter();
        Windows.Foundation.Numerics.Vector3 Position{ get; };
        Windows.Foundation.Numerics.Vector3 Position{ set; };
        Windows.Foundation.Numerics.Vector3 Direction{ get; };
        Windows.Foundation.Numerics.Vector3 Direction{ set; };
        Windows.Media.Audio.AudioNodeEmitterShape Shape{ get; };
        Windows.Media.Audio.AudioNodeEmitterDecayModel DecayModel{ get; };
        Double Gain{ get; };
        Double Gain{ set; };
        Double DistanceScale{ get; };
        Double DistanceScale{ set; };
        Double DopplerScale{ get; };
        Double DopplerScale{ set; };
        Windows.Foundation.Numerics.Vector3 DopplerVelocity{ get; };
        Windows.Foundation.Numerics.Vector3 DopplerVelocity{ set; };
        Boolean IsDopplerDisabled{ get; };

        [interface_name("Windows.Media.Audio.IAudioNodeEmitter2", 4ab6eecb-ec29-47f8-818c-b6b660a5aeb1)]
        {
            Windows.Media.Audio.SpatialAudioModel SpatialAudioModel{ get; };
            Windows.Media.Audio.SpatialAudioModel SpatialAudioModel{ set; };
        }
    }


    [uuid(15389d7f-dbd8-4819-bf03-668e9357cd6d)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAudioNode requires Windows.Foundation.IClosable
    {
        Windows.Foundation.Collections.IVector <Windows.Media.Effects.IAudioEffectDefinition>  EffectDefinitions{ get; };
        Double OutgoingGain{ set; };
        Double OutgoingGain{ get; };
        Windows.Media.MediaProperties.AudioEncodingProperties EncodingProperties{ get; };
        Boolean ConsumeInput{ get; };
        Boolean ConsumeInput{ set; };
        void Start();
        void Stop();
        void Reset();
        void DisableEffectsByDefinition(Windows.Media.Effects.IAudioEffectDefinition definition);
        void EnableEffectsByDefinition(Windows.Media.Effects.IAudioEffectDefinition definition);
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [uuid(0e0f907c-79ff-4544-9eeb-01257b15105a)]
    interface IAudioNodeWithListener requires Windows.Foundation.IClosable, Windows.Media.Audio.IAudioNode
    {
        Windows.Media.Audio.AudioNodeListener Listener{ set; };
        Windows.Media.Audio.AudioNodeListener Listener{ get; };
    };

    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.Media.Audio.IAudioNodeListener", d9722e16-0c0a-41da-b755-6c77835fb1eb)]
    [threading(both)]
    runtimeclass AudioNodeListener
    {
        AudioNodeListener();
        Windows.Foundation.Numerics.Vector3 Position{ get; };
        Windows.Foundation.Numerics.Vector3 Position{ set; };
        Windows.Foundation.Numerics.Quaternion Orientation{ get; };
        Windows.Foundation.Numerics.Quaternion Orientation{ set; };
        Double SpeedOfSound{ get; };
        Double SpeedOfSound{ set; };
        Windows.Foundation.Numerics.Vector3 DopplerVelocity{ get; };
        Windows.Foundation.Numerics.Vector3 DopplerVelocity{ set; };
    }

    [uuid(d148005c-8428-4784-b7fd-a99d468c5d20)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAudioInputNode requires Windows.Media.Audio.IAudioNode, Windows.Foundation.IClosable
    {
        Windows.Foundation.Collections.IVectorView <Windows.Media.Audio.AudioGraphConnection>  OutgoingConnections{ get; };
        [method_name("AddOutgoingConnection")] void AddOutgoingConnection(IAudioNode destination);
        [method_name("AddOutgoingConnectionWithGain")] void AddOutgoingConnection(IAudioNode destination, Double gain);
        void RemoveOutgoingConnection(IAudioNode destination);
    };

    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.IAudioGraphConnection", 763070ed-d04e-4fac-b233-600b42edd469)]
    runtimeclass AudioGraphConnection
    {
        Windows.Media.Audio.IAudioNode Destination{ get; };
        Double Gain{ set; };
        Double Gain{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [uuid(905156b7-ca68-4c6d-a8bc-e3ee17fe3fd2)]
    interface IAudioInputNode2 requires Windows.Media.Audio.IAudioNode, Windows.Foundation.IClosable, Windows.Media.Audio.IAudioInputNode
    {
        Windows.Media.Audio.AudioNodeEmitter Emitter{ get; };
    };


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Media.Audio.IAudioFrameCompletedEventArgs", dc7c829e-0208-4504-a5a8-f0f268920a65)]
    runtimeclass AudioFrameCompletedEventArgs
    {
        Windows.Media.AudioFrame Frame{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Media.Audio.IFrameInputNodeQuantumStartedEventArgs", 3d9bd498-a306-4f06-bd9f-e9efc8226304)]
    runtimeclass FrameInputNodeQuantumStartedEventArgs
    {
        Int32 RequiredSamples{ get; };
    }











    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Media.Audio.IEqualizerBand", c00a5a6a-262d-4b85-9bb7-43280b62ed0c)]
    runtimeclass EqualizerBand
    {
        Double Bandwidth{ get; };
        Double Bandwidth{ set; };
        Double FrequencyCenter{ get; };
        Double FrequencyCenter{ set; };
        Double Gain{ get; };
        Double Gain{ set; };
    }



    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Media.Audio.IEqualizerEffectDefinitionFactory", d2876fc4-d410-4eb5-9e69-c9aa1277eaf0)]
    [interface_name("Windows.Media.Audio.IEqualizerEffectDefinition", 023f6f1f-83fe-449a-a822-c696442d16b0)]
    [threading(both)]
    runtimeclass EqualizerEffectDefinition
        : Windows.Media.Effects.IAudioEffectDefinition
    {
        [method_name( "Create" )] EqualizerEffectDefinition(AudioGraph audioGraph);
        Windows.Foundation.Collections.IVectorView <Windows.Media.Audio.EqualizerBand>  Bands{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [constructor_name("Windows.Media.Audio.IReverbEffectDefinitionFactory", a7d5cbfe-100b-4ff0-9da6-dc4e05a759f0)]
    [interface_name("Windows.Media.Audio.IReverbEffectDefinition", 4606aa89-f563-4d0a-8f6e-f0cddff35d84)]
    [threading(both)]
    runtimeclass ReverbEffectDefinition
        : Windows.Media.Effects.IAudioEffectDefinition
    {
        [method_name( "Create" )] ReverbEffectDefinition(AudioGraph audioGraph);
        Double WetDryMix{ set; };
        Double WetDryMix{ get; };
        UInt32 ReflectionsDelay{ set; };
        UInt32 ReflectionsDelay{ get; };
        UInt8 ReverbDelay{ set; };
        UInt8 ReverbDelay{ get; };
        UInt8 RearDelay{ set; };
        UInt8 RearDelay{ get; };
        UInt8 PositionLeft{ set; };
        UInt8 PositionLeft{ get; };
        UInt8 PositionRight{ set; };
        UInt8 PositionRight{ get; };
        UInt8 PositionMatrixLeft{ set; };
        UInt8 PositionMatrixLeft{ get; };
        UInt8 PositionMatrixRight{ set; };
        UInt8 PositionMatrixRight{ get; };
        UInt8 EarlyDiffusion{ set; };
        UInt8 EarlyDiffusion{ get; };
        UInt8 LateDiffusion{ set; };
        UInt8 LateDiffusion{ get; };
        UInt8 LowEQGain{ set; };
        UInt8 LowEQGain{ get; };
        UInt8 LowEQCutoff{ set; };
        UInt8 LowEQCutoff{ get; };
        UInt8 HighEQGain{ set; };
        UInt8 HighEQGain{ get; };
        UInt8 HighEQCutoff{ set; };
        UInt8 HighEQCutoff{ get; };
        Double RoomFilterFreq{ set; };
        Double RoomFilterFreq{ get; };
        Double RoomFilterMain{ set; };
        Double RoomFilterMain{ get; };
        Double RoomFilterHF{ set; };
        Double RoomFilterHF{ get; };
        Double ReflectionsGain{ set; };
        Double ReflectionsGain{ get; };
        Double ReverbGain{ set; };
        Double ReverbGain{ get; };
        Double DecayTime{ set; };
        Double DecayTime{ get; };
        Double Density{ set; };
        Double Density{ get; };
        Double RoomSize{ set; };
        Double RoomSize{ get; };
        Boolean DisableLateField{ set; };
        Boolean DisableLateField{ get; };
    }



    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Media.Audio.IEchoEffectDefinitionFactory", 0d4e2257-aaf2-4e86-a54c-fb79db8f6c12)]
    [interface_name("Windows.Media.Audio.IEchoEffectDefinition", 0e4d3faa-36b8-4c91-b9da-11f44a8a6610)]
    [threading(both)]
    runtimeclass EchoEffectDefinition
        : Windows.Media.Effects.IAudioEffectDefinition
    {
        [method_name( "Create" )] EchoEffectDefinition(AudioGraph audioGraph);
        Double WetDryMix{ set; };
        Double WetDryMix{ get; };
        Double Feedback{ set; };
        Double Feedback{ get; };
        Double Delay{ set; };
        Double Delay{ get; };
    }



    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Media.Audio.ILimiterEffectDefinitionFactory", ecbae6f1-61ff-45ef-b8f5-48659a57c72d)]
    [interface_name("Windows.Media.Audio.ILimiterEffectDefinition", 6b755d19-2603-47ba-bdeb-39055e3486dc)]
    [threading(both)]
    runtimeclass LimiterEffectDefinition
        : Windows.Media.Effects.IAudioEffectDefinition
    {
        [method_name( "Create" )] LimiterEffectDefinition(AudioGraph audioGraph);
        UInt32 Release{ set; };
        UInt32 Release{ get; };
        UInt32 Loudness{ set; };
        UInt32 Loudness{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [flags]
    enum AudioNodeEmitterSettings
    {
        None,
        DisableDoppler,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum AudioNodeEmitterShapeKind
    {
        Omnidirectional,
        Cone,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum AudioNodeEmitterDecayKind
    {
        Natural,
        Custom,
    };


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Audio.IAudioNodeEmitterConeProperties", e99b2cee-02ca-4375-9326-0c6ae4bcdfb5)]
    runtimeclass AudioNodeEmitterConeProperties
    {
        Double InnerAngle{ get; };
        Double OuterAngle{ get; };
        Double OuterAngleGain{ get; };
    }



    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.Media.Audio.IAudioNodeEmitterShapeStatics", 57bb2771-ffa5-4b86-a779-e264aeb9145f)]
    [interface_name("Windows.Media.Audio.IAudioNodeEmitterShape", ea0311c5-e73d-44bc-859c-45553bbc4828)]
    [threading(both)]
    runtimeclass AudioNodeEmitterShape
    {
        static Windows.Media.Audio.AudioNodeEmitterShape CreateCone(Double innerAngle, Double outerAngle, Double outerAngleGain);
        static Windows.Media.Audio.AudioNodeEmitterShape CreateOmnidirectional();
        Windows.Media.Audio.AudioNodeEmitterShapeKind Kind{ get; };
        Windows.Media.Audio.AudioNodeEmitterConeProperties ConeProperties{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.Media.Audio.IAudioNodeEmitterNaturalDecayModelProperties", 48934bcf-cf2c-4efc-9331-75bd22df1f0c)]
    runtimeclass AudioNodeEmitterNaturalDecayModelProperties
    {
        Double UnityGainDistance{ get; };
        Double CutoffDistance{ get; };
    }



    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Media.Audio.IAudioNodeEmitterDecayModelStatics", c7787ca8-f178-462f-bc81-8dd5cbe5dae8)]
    [interface_name("Windows.Media.Audio.IAudioNodeEmitterDecayModel", 1d1d5af7-0d53-4fa9-bd84-d5816a86f3ff)]
    [threading(both)]
    runtimeclass AudioNodeEmitterDecayModel
    {
        static Windows.Media.Audio.AudioNodeEmitterDecayModel CreateNatural(Double minGain, Double maxGain, Double unityGainDistance, Double cutoffDistance);
        static Windows.Media.Audio.AudioNodeEmitterDecayModel CreateCustom(Double minGain, Double maxGain);
        Windows.Media.Audio.AudioNodeEmitterDecayKind Kind{ get; };
        Double MinGain{ get; };
        Double MaxGain{ get; };
        Windows.Media.Audio.AudioNodeEmitterNaturalDecayModelProperties NaturalProperties{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum SpatialAudioModel
    {
        ObjectBased,
        FoldDown,
    };





}
