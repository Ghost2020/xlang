










namespace Windows.Devices.Enumeration
{
    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DevicePickerDisplayStatusOptions
    {
        None,
        ShowProgress,
        ShowDisconnectButton,
        ShowRetryButton = 4,
    };


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.Enumeration.IDevicePickerAppearance", e69a12c6-e627-4ed8-9b6c-460af445e56d)]
    runtimeclass DevicePickerAppearance
    {
        String Title{ get; };
        String Title{ set; };
        Windows.UI.Color ForegroundColor{ get; };
        Windows.UI.Color ForegroundColor{ set; };
        Windows.UI.Color BackgroundColor{ get; };
        Windows.UI.Color BackgroundColor{ set; };
        Windows.UI.Color AccentColor{ get; };
        Windows.UI.Color AccentColor{ set; };
        Windows.UI.Color SelectedForegroundColor{ get; };
        Windows.UI.Color SelectedForegroundColor{ set; };
        Windows.UI.Color SelectedBackgroundColor{ get; };
        Windows.UI.Color SelectedBackgroundColor{ set; };
        Windows.UI.Color SelectedAccentColor{ get; };
        Windows.UI.Color SelectedAccentColor{ set; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Devices.Enumeration.IDeviceSelectedEventArgs", 269edade-1d2f-4940-8402-4156b81d3c77)]
    runtimeclass DeviceSelectedEventArgs
    {
        Windows.Devices.Enumeration.DeviceInformation SelectedDevice{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Devices.Enumeration.IDeviceDisconnectButtonClickedEventArgs", 8e44b56d-f902-4a00-b536-f37992e6a2a7)]
    runtimeclass DeviceDisconnectButtonClickedEventArgs
    {
        Windows.Devices.Enumeration.DeviceInformation Device{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.Enumeration.IDevicePickerFilter", 91db92a2-57cb-48f1-9b59-a59b7a1f02a2)]
    runtimeclass DevicePickerFilter
    {
        Windows.Foundation.Collections.IVector <Windows.Devices.Enumeration.DeviceClass>  SupportedDeviceClasses{ get; };
        Windows.Foundation.Collections.IVector <String>  SupportedDeviceSelectors{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Devices.Enumeration.IDevicePicker", 84997aa2-034a-4440-8813-7d0bd479bf5a)]
    [threading(both)]
    runtimeclass DevicePicker
    {
        DevicePicker();
        Windows.Devices.Enumeration.DevicePickerFilter Filter{ get; };
        Windows.Devices.Enumeration.DevicePickerAppearance Appearance{ get; };
        Windows.Foundation.Collections.IVector <String>  RequestedProperties{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Enumeration.DevicePicker, Windows.Devices.Enumeration.DeviceSelectedEventArgs>  DeviceSelected;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Enumeration.DevicePicker, Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs>  DisconnectButtonClicked;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Enumeration.DevicePicker, Object>  DevicePickerDismissed;
        [method_name("Show")] void Show(Windows.Foundation.Rect selection);
        [method_name("ShowWithPlacement")] void Show(Windows.Foundation.Rect selection, Windows.UI.Popups.Placement placement);
        [method_name("PickSingleDeviceAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Devices.Enumeration.DeviceInformation>  PickSingleDeviceAsync(Windows.Foundation.Rect selection);
        [method_name("PickSingleDeviceAsyncWithPlacement")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Devices.Enumeration.DeviceInformation>  PickSingleDeviceAsync(Windows.Foundation.Rect selection, Windows.UI.Popups.Placement placement);
        void Hide();
        void SetDisplayStatus(DeviceInformation device, String status, DevicePickerDisplayStatusOptions options);
    }

}
