











namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.StateRepository.IOptionalBundlePackageStatics", 3fb1d9ea-62de-46ef-9035-af8851ac5e05)]
    [interface_name("Windows.Internal.StateRepository.IOptionalBundlePackage", 72ed6f78-f352-41ae-b029-8519d5c959e2)]
    [threading(both)]
    runtimeclass OptionalBundlePackage
    {
        OptionalBundlePackage();
        static Boolean Exists(Int64 optionalBundlePackageID);
        static Boolean ExistsByOptionalBundle(OptionalBundle OptionalBundle);
        static Boolean ExistsByOptionalBundleAndVersion(OptionalBundle OptionalBundle, UInt64 Version);
        static Boolean ExistsByOptionalBundleAndVersionAndArchitecture(OptionalBundle OptionalBundle, UInt64 Version, UInt32 Architecture);
        static Boolean ExistsByOptionalBundleAndVersionAndArchitectureAndResourceId(OptionalBundle OptionalBundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Windows.Internal.StateRepository.OptionalBundlePackage Get(Int64 optionalBundlePackageID);
        static Windows.Internal.StateRepository.OptionalBundlePackage TryGet(Int64 optionalBundlePackageID);
        static Windows.Internal.StateRepository.OptionalBundlePackage GetByOptionalBundleAndVersionAndArchitectureAndResourceId(OptionalBundle OptionalBundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Windows.Internal.StateRepository.OptionalBundlePackage TryGetByOptionalBundleAndVersionAndArchitectureAndResourceId(OptionalBundle OptionalBundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundlePackage>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundlePackage>  FindByOptionalBundle(OptionalBundle OptionalBundle);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundlePackage>  FindByOptionalBundleAndVersion(OptionalBundle OptionalBundle, UInt64 Version);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundlePackage>  FindByOptionalBundleAndVersionAndArchitecture(OptionalBundle OptionalBundle, UInt64 Version, UInt32 Architecture);
        Int64 _OptionalBundlePackageID{ get; };
        Int64 _OptionalBundlePackageID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 OptionalBundle{ get; };
        Int64 OptionalBundle{ set; };
        Windows.Internal.StateRepository.OptionalBundle GetOptionalBundle();
        void SetOptionalBundle(OptionalBundle value);
        Windows.Internal.StateRepository.BundlePackageType PackageType{ get; };
        Windows.Internal.StateRepository.BundlePackageType PackageType{ set; };
        UInt64 Version{ get; };
        UInt64 Version{ set; };
        UInt32 Architecture{ get; };
        UInt32 Architecture{ set; };
        Boolean IsResourceIdNull{ get; };
        void SetResourceIdToNull();
        String ResourceId{ get; };
        String ResourceId{ set; };
        String Filename{ get; };
        String Filename{ set; };
        Windows.Storage.StorageFile GetFilenameAsStorageFile();
        void SetFilenameAsStorageFile(Windows.Storage.IStorageFile value);
        UInt64 Offset{ get; };
        UInt64 Offset{ set; };
        UInt64 Size{ get; };
        UInt64 Size{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
