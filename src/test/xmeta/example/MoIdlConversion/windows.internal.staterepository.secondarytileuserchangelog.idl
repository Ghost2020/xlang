









namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.ISecondaryTileUserChangelogStatics", 862d4511-ed5f-4037-8d83-55829d75143d)]
    [interface_name("Windows.Internal.StateRepository.ISecondaryTileUserChangelog", 9a480b45-0d53-4433-b359-2a723db1b57b)]
    [threading(both)]
    runtimeclass SecondaryTileUserChangelog
    {
        SecondaryTileUserChangelog();
        static Boolean Exists(Int64 secondaryTileUserChangelogID);
        static Boolean ExistsByTileUniqueId(Guid TileUniqueId);
        static Boolean ExistsByUser(User User);
        static Boolean ExistsByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Boolean ExistsByWhenOccurred(Windows.Foundation.DateTime WhenOccurred);
        static Boolean ExistsBy_Created(Int64 _Created);
        static Boolean ExistsBy_Deleted(Int64 _Deleted);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog Get(Int64 secondaryTileUserChangelogID);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog TryGet(Int64 secondaryTileUserChangelogID);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog GetByTileUniqueId(Guid TileUniqueId);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog TryGetByTileUniqueId(Guid TileUniqueId);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog GetByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog TryGetByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog GetBy_Created(Int64 _Created);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog TryGetBy_Created(Int64 _Created);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog GetBy_Deleted(Int64 _Deleted);
        static Windows.Internal.StateRepository.SecondaryTileUserChangelog TryGetBy_Deleted(Int64 _Deleted);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.SecondaryTileUserChangelog>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.SecondaryTileUserChangelog>  FindByUser(User User);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.SecondaryTileUserChangelog>  FindByWhenOccurred(Windows.Foundation.DateTime WhenOccurred);
        static void DeleteBy_Created(Int64 _created);
        static void DeleteBy_Deleted(Int64 _deleted);
        static void DeleteByTileUniqueId(Guid TileUniqueId);
        Int64 _SecondaryTileUserChangelogID{ get; };
        Int64 _SecondaryTileUserChangelogID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 _Created{ get; };
        Int64 _Created{ set; };
        Int64 _Deleted{ get; };
        Int64 _Deleted{ set; };
        Int64 User{ get; };
        Int64 User{ set; };
        Windows.Internal.StateRepository.User GetUser();
        void SetUser(User value);
        Guid TileUniqueId{ get; };
        Guid TileUniqueId{ set; };
        Windows.Foundation.DateTime WhenOccurred{ get; };
        Windows.Foundation.DateTime WhenOccurred{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
