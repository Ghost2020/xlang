









namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IPrimaryTileUserChangelogStatics", 1856fa4c-a005-4c46-b92e-69cd310edcfa)]
    [interface_name("Windows.Internal.StateRepository.IPrimaryTileUserChangelog", 75253199-8bc8-41e0-870e-874475f5d970)]
    [threading(both)]
    runtimeclass PrimaryTileUserChangelog
    {
        PrimaryTileUserChangelog();
        static Boolean Exists(Int64 primaryTileUserChangelogID);
        static Boolean ExistsByTileUniqueId(Guid TileUniqueId);
        static Boolean ExistsByUser(User User);
        static Boolean ExistsByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Boolean ExistsByWhenOccurred(Windows.Foundation.DateTime WhenOccurred);
        static Boolean ExistsBy_Created(Int64 _Created);
        static Boolean ExistsBy_Deleted(Int64 _Deleted);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog Get(Int64 primaryTileUserChangelogID);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog TryGet(Int64 primaryTileUserChangelogID);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog GetByTileUniqueId(Guid TileUniqueId);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog TryGetByTileUniqueId(Guid TileUniqueId);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog GetByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog TryGetByUserAndTileUniqueId(User User, Guid TileUniqueId);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog GetBy_Created(Int64 _Created);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog TryGetBy_Created(Int64 _Created);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog GetBy_Deleted(Int64 _Deleted);
        static Windows.Internal.StateRepository.PrimaryTileUserChangelog TryGetBy_Deleted(Int64 _Deleted);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PrimaryTileUserChangelog>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PrimaryTileUserChangelog>  FindByUser(User User);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PrimaryTileUserChangelog>  FindByWhenOccurred(Windows.Foundation.DateTime WhenOccurred);
        static void DeleteBy_Created(Int64 _created);
        static void DeleteBy_Deleted(Int64 _deleted);
        static void DeleteByTileUniqueId(Guid TileUniqueId);
        Int64 _PrimaryTileUserChangelogID{ get; };
        Int64 _PrimaryTileUserChangelogID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 _Created{ get; };
        Int64 _Created{ set; };
        Int64 _Deleted{ get; };
        Int64 _Deleted{ set; };
        Int64 User{ get; };
        Int64 User{ set; };
        Windows.Internal.StateRepository.User GetUser();
        void SetUser(User value);
        Guid TileUniqueId{ get; };
        Guid TileUniqueId{ set; };
        Windows.Foundation.DateTime WhenOccurred{ get; };
        Windows.Foundation.DateTime WhenOccurred{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
