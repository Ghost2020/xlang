














namespace Windows.Security.Authentication.Web
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum TokenBindingKeyType
    {
        Rsa2048,
        EcdsaP256,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        AnyExisting,
    };

}
namespace Windows.Security.Authentication.Web.Provider
{
    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WebAccountSelectionOptions
    {
        Default,
        New,
    };




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest", 1e18778b-8805-454b-9f11-468d2af1095a)]
    runtimeclass WebProviderTokenRequest
    {
        Windows.Security.Authentication.Web.Core.WebTokenRequest ClientRequest{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Security.Credentials.WebAccount>  WebAccounts{ get; };
        Windows.Security.Authentication.Web.Provider.WebAccountSelectionOptions WebAccountSelectionOptions{ get; };
        Windows.Foundation.Uri ApplicationCallbackUri{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Security.Cryptography.Core.CryptographicKey>  GetApplicationTokenBindingKeyAsync(Windows.Security.Authentication.Web.TokenBindingKeyType keyType, Windows.Foundation.Uri target);

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest2", b5d72e4c-10b1-4aa6-88b1-0b6c9e0c1e46)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IBuffer>  GetApplicationTokenBindingKeyIdAsync(Windows.Security.Authentication.Web.TokenBindingKeyType keyType, Windows.Foundation.Uri target);
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Security.Authentication.Web.Provider.IWebProviderTokenRequest3", 1b2716aa-4289-446e-9256-dafb6f66a51e)]
        {
            String ApplicationPackageFamilyName{ get; };
            String ApplicationProcessName{ get; };
            Windows.Foundation.IAsyncOperation <Boolean>  CheckApplicationForCapabilityAsync(String capabilityName);
        }
    }



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Security.Authentication.Web.Provider.IWebProviderTokenResponseFactory", fa49d99a-25ba-4077-9cfa-9db4dea7b71a)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebProviderTokenResponse", ef213793-ef55-4186-b7ce-8cb2e7f9849e)]
    [threading(both)]
    runtimeclass WebProviderTokenResponse
    {
        [method_name( "Create" )] WebProviderTokenResponse(Windows.Security.Authentication.Web.Core.WebTokenResponse webTokenResponse);
        Windows.Security.Authentication.Web.Core.WebTokenResponse ClientResponse{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WebAccountClientViewType
    {
        IdOnly,
        IdAndProperties,
    };



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [constructor_name("Windows.Security.Authentication.Web.Provider.IWebAccountClientViewFactory", 616d16a4-de22-4855-a326-06cebf2a3f23)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountClientView", e7bd66ba-0bc7-4c66-bfd4-65d3082cbca8)]
    [threading(both)]
    runtimeclass WebAccountClientView
    {
        [method_name( "Create" )] WebAccountClientView(WebAccountClientViewType viewType, Windows.Foundation.Uri applicationCallbackUri);
        [method_name( "CreateWithPairwiseId" )] WebAccountClientView(WebAccountClientViewType viewType, Windows.Foundation.Uri applicationCallbackUri, String accountPairwiseId);
        Windows.Foundation.Uri ApplicationCallbackUri{ get; };
        Windows.Security.Authentication.Web.Provider.WebAccountClientViewType Type{ get; };
        String AccountPairwiseId{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WebAccountScope
    {
        PerUser,
        PerApplication,
    };







    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountScopeManagerStatics", 5c6ce37c-12b2-423a-bf3d-85b8d7e53656)]
    runtimeclass WebAccountManager
    {

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountMapManagerStatics", e8fa446f-3a1b-48a4-8e90-1e59ca6f54db)]
        {
            [method_name("AddWebAccountWithScopeAndMapAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountAsync(String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props, WebAccountScope scope, String perUserWebAccountId);
            static Windows.Foundation.IAsyncAction SetPerAppToPerUserAccountAsync(Windows.Security.Credentials.WebAccount perAppAccount, String perUserWebAccountId);
            static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  GetPerUserFromPerAppAccountAsync(Windows.Security.Credentials.WebAccount perAppAccount);
            static Windows.Foundation.IAsyncAction ClearPerUserFromPerAppAccountAsync(Windows.Security.Credentials.WebAccount perAppAccount);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics4", 59ebc2d2-f7db-412f-bc3f-f2fea04430b4)]
        {
            static Windows.Foundation.IAsyncAction InvalidateAppCacheForAllAccountsAsync();
            static Windows.Foundation.IAsyncAction InvalidateAppCacheForAccountAsync(Windows.Security.Credentials.WebAccount webAccount);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics3", dd4523a6-8a4f-4aa2-b15e-03f550af1359)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Security.Credentials.WebAccount> >  FindAllProviderWebAccountsForUserAsync(Windows.System.User user);
            [method_name("AddWebAccountForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountForUserAsync(Windows.System.User user, String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props);
            [method_name("AddWebAccountWithScopeForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountForUserAsync(Windows.System.User user, String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props, WebAccountScope scope);
            [method_name("AddWebAccountWithScopeAndMapForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountForUserAsync(Windows.System.User user, String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props, WebAccountScope scope, String perUserWebAccountId);
        }
        [method_name("AddWebAccountWithScopeAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountAsync(String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props, WebAccountScope scope);
        [remote_sync]static Windows.Foundation.IAsyncAction SetScopeAsync(Windows.Security.Credentials.WebAccount webAccount, WebAccountScope scope);
        static Windows.Security.Authentication.Web.Provider.WebAccountScope GetScope(Windows.Security.Credentials.WebAccount webAccount);

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics2", 68a7a829-2d5f-4653-8bb0-bd2fa6bd2d87)]
        {
            static Windows.Foundation.IAsyncAction PullCookiesAsync(String uriString, String callerPFN);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Security.Authentication.Web.Provider.IWebAccountManagerStatics", b2e8e1a6-d49a-4032-84bf-1a2847747bf1)]
        {
            [remote_sync]static Windows.Foundation.IAsyncAction UpdateWebAccountPropertiesAsync(Windows.Security.Credentials.WebAccount webAccount, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  additionalProperties);
            [method_name("AddWebAccountAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  AddWebAccountAsync(String webAccountId, String webAccountUserName, Windows.Foundation.Collections.IMapView <String, String>  props);
            [remote_sync]static Windows.Foundation.IAsyncAction DeleteWebAccountAsync(Windows.Security.Credentials.WebAccount webAccount);
            static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Security.Credentials.WebAccount> >  FindAllProviderWebAccountsAsync();
            static Windows.Foundation.IAsyncAction PushCookiesAsync(Windows.Foundation.Uri uri, Windows.Foundation.Collections.IVectorView <Windows.Web.Http.HttpCookie>  cookies);
            static Windows.Foundation.IAsyncAction SetViewAsync(Windows.Security.Credentials.WebAccount webAccount, WebAccountClientView view);
            static Windows.Foundation.IAsyncAction ClearViewAsync(Windows.Security.Credentials.WebAccount webAccount, Windows.Foundation.Uri applicationCallbackUri);
            static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Security.Authentication.Web.Provider.WebAccountClientView> >  GetViewsAsync(Windows.Security.Credentials.WebAccount webAccount);
            [remote_sync]static Windows.Foundation.IAsyncAction SetWebAccountPictureAsync(Windows.Security.Credentials.WebAccount webAccount, Windows.Storage.Streams.IRandomAccessStream webAccountPicture);
            [remote_sync]static Windows.Foundation.IAsyncAction ClearWebAccountPictureAsync(Windows.Security.Credentials.WebAccount webAccount);
        }
    }

    [uuid(bba4acbb-993b-4d57-bbe4-1421e3668b4c)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IWebAccountProviderBaseReportOperation
    {
        void ReportCompleted();
        void ReportError(Windows.Security.Authentication.Web.Core.WebProviderError value);
    };

    [uuid(28ff92d3-8f80-42fb-944f-b2107bbd42e6)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IWebAccountProviderUIReportOperation requires Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
        void ReportUserCanceled();
    };

    [uuid(e0b545f8-3b0f-44da-924c-7b18baaa62a9)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IWebAccountProviderSilentReportOperation requires Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
        [method_name("ReportUserInteractionRequired")] void ReportUserInteractionRequired();
        [method_name("ReportUserInteractionRequiredWithError")] void ReportUserInteractionRequired(Windows.Security.Authentication.Web.Core.WebProviderError value);
    };

    [uuid(95c613be-2034-4c38-9434-d26c14b2b4b2)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IWebAccountProviderTokenOperation requires Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
    {
        Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest ProviderRequest{ get; };
        Windows.Foundation.Collections.IVector <Windows.Security.Authentication.Web.Provider.WebProviderTokenResponse>  ProviderResponses{ get; };
        Windows.Foundation.DateTime CacheExpirationTime{ set; };
        Windows.Foundation.DateTime CacheExpirationTime{ get; };
    };






    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass WebAccountProviderRequestTokenOperation
        : [default]Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderUIReportOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
    }

    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass WebAccountProviderGetTokenSilentOperation
        : [default]Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderSilentReportOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountProviderAddAccountOperation", 73ebdccf-4378-4c79-9335-a5d7ab81594e)]
    runtimeclass WebAccountProviderAddAccountOperation
        : Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
    {
        void ReportCompleted();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountProviderManageAccountOperation", ed20dc5c-d21b-463e-a9b7-c1fd0edae978)]
    runtimeclass WebAccountProviderManageAccountOperation
        : Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
    {
        Windows.Security.Credentials.WebAccount WebAccount{ get; };
        void ReportCompleted();
    }

    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountProviderDeleteAccountOperation", 0abb48b8-9e01-49c9-a355-7d48caf7d6ca)]
    runtimeclass WebAccountProviderDeleteAccountOperation
        : Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
        Windows.Security.Credentials.WebAccount WebAccount{ get; };
    }

    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountProviderSignOutAccountOperation", b890e21d-0c55-47bc-8c72-04a6fc7cac07)]
    runtimeclass WebAccountProviderSignOutAccountOperation
        : Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
        Windows.Security.Credentials.WebAccount WebAccount{ get; };
        Windows.Foundation.Uri ApplicationCallbackUri{ get; };
        String ClientId{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Provider.IWebAccountProviderRetrieveCookiesOperation", 5a040441-0fa3-4ab1-a01c-20b110358594)]
    runtimeclass WebAccountProviderRetrieveCookiesOperation
        : Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation
        , Windows.Security.Authentication.Web.Provider.IWebAccountProviderBaseReportOperation
    {
        Windows.Foundation.Uri Context{ get; };
        Windows.Foundation.Collections.IVector <Windows.Web.Http.HttpCookie>  Cookies{ get; };
        Windows.Foundation.Uri Uri{ set; };
        Windows.Foundation.Uri Uri{ get; };
        Windows.Foundation.Uri ApplicationCallbackUri{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(408f284b-1328-42db-89a4-0bce7a717d8e)]
    interface IWebAccountProviderTokenObjects
    {
        Windows.Security.Authentication.Web.Provider.IWebAccountProviderOperation Operation{ get; };
    };

    [uuid(1020b893-5ca5-4fff-95fb-b820273fc395)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    interface IWebAccountProviderTokenObjects2 requires Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects
    {
        Windows.System.User User{ get; };
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    runtimeclass WebAccountProviderTriggerDetails
        : [default]Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects
        , [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Security.Authentication.Web.Provider.IWebAccountProviderTokenObjects2
    {
    }

}
