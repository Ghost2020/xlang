












namespace Windows.Media.Effects
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(7946b8d0-2010-4ae3-9ab2-2cef42edd4d2)]
    interface IVideoCompositorDefinition
    {
        String ActivatableClassId{ get; };
        Windows.Foundation.Collections.IPropertySet Properties{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Media.Effects.IVideoCompositorDefinitionFactory", 4366fd10-68b8-4d52-89b6-02a968cca899)]
    [threading(both)]
    runtimeclass VideoCompositorDefinition
        : [default]Windows.Media.Effects.IVideoCompositorDefinition
    {
        [method_name( "Create" )] VideoCompositorDefinition(String activatableClassId);
        [method_name( "CreateWithProperties" )] VideoCompositorDefinition(String activatableClassId, Windows.Foundation.Collections.IPropertySet props);
    }



}
namespace Windows.Media.Editing
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [constructor_name("Windows.Media.Editing.IMediaOverlayFactory", b584828a-6188-4f8f-a2e0-aa552d598e18)]
    [interface_name("Windows.Media.Editing.IMediaOverlay", a902ae5d-7869-4830-8ab1-94dc01c05fa4)]
    [threading(both)]
    runtimeclass MediaOverlay
    {
        [method_name( "Create" )] MediaOverlay(MediaClip clip);
        [method_name( "CreateWithPositionAndOpacity" )] MediaOverlay(MediaClip clip, Windows.Foundation.Rect position, Double opacity);
        Windows.Foundation.Rect Position{ get; };
        Windows.Foundation.Rect Position{ set; };
        Windows.Foundation.TimeSpan Delay{ set; };
        Windows.Foundation.TimeSpan Delay{ get; };
        Double Opacity{ get; };
        Double Opacity{ set; };
        Windows.Media.Editing.MediaOverlay Clone();
        Windows.Media.Editing.MediaClip Clip{ get; };
        Boolean AudioEnabled{ get; };
        Boolean AudioEnabled{ set; };
    }

}
namespace Windows.Media.Effects
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(8510b43e-420c-420f-96c7-7c98bba1fc55)]
    interface IVideoCompositor requires Windows.Media.IMediaExtension
    {
        Boolean TimeIndependent{ get; };
        void SetEncodingProperties(Windows.Media.MediaProperties.VideoEncodingProperties backgroundProperties, Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device);
        void CompositeFrame(CompositeVideoFrameContext context);
        void Close(MediaEffectClosedReason reason);
        void DiscardQueuedFrames();
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [interface_name("Windows.Media.Effects.ICompositeVideoFrameContext", 6c30024b-f514-4278-a5f7-b9188049d110)]
    runtimeclass CompositeVideoFrameContext
    {
        Windows.Foundation.Collections.IVectorView <Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface>  SurfacesToOverlay{ get; };
        Windows.Media.VideoFrame BackgroundFrame{ get; };
        Windows.Media.VideoFrame OutputFrame{ get; };
        Windows.Media.Editing.MediaOverlay GetOverlayForSurface(Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surfaceToOverlay);
    }

}
namespace Windows.Media.Editing
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum VideoFramePrecision
    {
        NearestFrame,
        NearestKeyFrame,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum MediaTrimmingPreference
    {
        Fast,
        Precise,
    };


    [marshaling_behavior(agile)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Media.Editing.IMediaClipStatics", fa402b68-928f-43c4-bc6e-783a1a359656)]
    [interface_name("Windows.Media.Editing.IMediaClip", 53f25366-5fba-3ea4-8693-24761811140a)]
    [threading(both)]
    runtimeclass MediaClip
    {
        static Windows.Media.Editing.MediaClip CreateFromColor(Windows.UI.Color color, Windows.Foundation.TimeSpan originalDuration);
        static Windows.Foundation.IAsyncOperation <Windows.Media.Editing.MediaClip>  CreateFromFileAsync(Windows.Storage.IStorageFile file);
        static Windows.Foundation.IAsyncOperation <Windows.Media.Editing.MediaClip>  CreateFromImageFileAsync(Windows.Storage.IStorageFile file, Windows.Foundation.TimeSpan originalDuration);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Media.Editing.IMediaClipStatics2", 5b1dd7b3-854e-4d9b-877d-4774a556cd12)]
        {
            static Windows.Media.Editing.MediaClip CreateFromSurface(Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface, Windows.Foundation.TimeSpan originalDuration);
        }
        Windows.Foundation.TimeSpan TrimTimeFromStart{ get; };
        Windows.Foundation.TimeSpan TrimTimeFromStart{ set; };
        Windows.Foundation.TimeSpan TrimTimeFromEnd{ get; };
        Windows.Foundation.TimeSpan TrimTimeFromEnd{ set; };
        Windows.Foundation.TimeSpan OriginalDuration{ get; };
        Windows.Foundation.TimeSpan TrimmedDuration{ get; };
        Windows.Foundation.Collections.IMap <String, String>  UserData{ get; };
        Windows.Media.Editing.MediaClip Clone();
        Windows.Foundation.TimeSpan StartTimeInComposition{ get; };
        Windows.Foundation.TimeSpan EndTimeInComposition{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Media.Editing.EmbeddedAudioTrack>  EmbeddedAudioTracks{ get; };
        UInt32 SelectedEmbeddedAudioTrackIndex{ get; };
        UInt32 SelectedEmbeddedAudioTrackIndex{ set; };
        Double Volume{ set; };
        Double Volume{ get; };
        Windows.Media.MediaProperties.VideoEncodingProperties GetVideoEncodingProperties();
        Windows.Foundation.Collections.IVector <Windows.Media.Effects.IAudioEffectDefinition>  AudioEffectDefinitions{ get; };
        Windows.Foundation.Collections.IVector <Windows.Media.Effects.IVideoEffectDefinition>  VideoEffectDefinitions{ get; };
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [interface_name("Windows.Media.Editing.IEmbeddedAudioTrack", 55ee5a7a-2d30-3fba-a190-4f1a6454f88f)]
    runtimeclass EmbeddedAudioTrack
    {
        Windows.Media.MediaProperties.AudioEncodingProperties GetAudioEncodingProperties();
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [static_name("Windows.Media.Editing.IBackgroundAudioTrackStatics", d9b1c0d7-d018-42a8-a559-cb4d9e97e664)]
    [interface_name("Windows.Media.Editing.IBackgroundAudioTrack", 4b91b3bd-9e21-4266-a9c2-67dd011a2357)]
    [threading(both)]
    runtimeclass BackgroundAudioTrack
    {
        static Windows.Media.Editing.BackgroundAudioTrack CreateFromEmbeddedAudioTrack(EmbeddedAudioTrack embeddedAudioTrack);
        static Windows.Foundation.IAsyncOperation <Windows.Media.Editing.BackgroundAudioTrack>  CreateFromFileAsync(Windows.Storage.IStorageFile file);
        Windows.Foundation.TimeSpan TrimTimeFromStart{ get; };
        Windows.Foundation.TimeSpan TrimTimeFromStart{ set; };
        Windows.Foundation.TimeSpan TrimTimeFromEnd{ get; };
        Windows.Foundation.TimeSpan TrimTimeFromEnd{ set; };
        Windows.Foundation.TimeSpan OriginalDuration{ get; };
        Windows.Foundation.TimeSpan TrimmedDuration{ get; };
        Windows.Foundation.Collections.IMap <String, String>  UserData{ get; };
        Windows.Foundation.TimeSpan Delay{ set; };
        Windows.Foundation.TimeSpan Delay{ get; };
        Double Volume{ set; };
        Double Volume{ get; };
        Windows.Media.Editing.BackgroundAudioTrack Clone();
        Windows.Media.MediaProperties.AudioEncodingProperties GetAudioEncodingProperties();
        Windows.Foundation.Collections.IVector <Windows.Media.Effects.IAudioEffectDefinition>  AudioEffectDefinitions{ get; };
    }

    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Media.Editing.IMediaCompositionStatics", 87a08f04-e32a-45ce-8f66-a30df0766224)]
    [interface_name("Windows.Media.Editing.IMediaComposition", 2e06e605-dc71-41d6-b837-2d2bc14a2947)]
    [threading(both)]
    runtimeclass MediaComposition
    {
        MediaComposition();
        static Windows.Foundation.IAsyncOperation <Windows.Media.Editing.MediaComposition>  LoadAsync(Windows.Storage.StorageFile file);
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Foundation.Collections.IVector <Windows.Media.Editing.MediaClip>  Clips{ get; };
        Windows.Foundation.Collections.IVector <Windows.Media.Editing.BackgroundAudioTrack>  BackgroundAudioTracks{ get; };
        Windows.Foundation.Collections.IMap <String, String>  UserData{ get; };
        Windows.Media.Editing.MediaComposition Clone();
        Windows.Foundation.IAsyncAction SaveAsync(Windows.Storage.IStorageFile file);
        Windows.Foundation.IAsyncOperation <Windows.Graphics.Imaging.ImageStream>  GetThumbnailAsync(Windows.Foundation.TimeSpan timeFromStart, Int32 scaledWidth, Int32 scaledHeight, VideoFramePrecision framePrecision);
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Graphics.Imaging.ImageStream> >  GetThumbnailsAsync(Windows.Foundation.Collections.IIterable <Windows.Foundation.TimeSpan>  timesFromStart, Int32 scaledWidth, Int32 scaledHeight, VideoFramePrecision framePrecision);
        [method_name("RenderToFileAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Media.Transcoding.TranscodeFailureReason, Double>  RenderToFileAsync(Windows.Storage.IStorageFile destination);
        [method_name("RenderToFileWithTrimmingPreferenceAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Media.Transcoding.TranscodeFailureReason, Double>  RenderToFileAsync(Windows.Storage.IStorageFile destination, MediaTrimmingPreference trimmingPreference);
        [method_name("RenderToFileWithProfileAsync")] [remote_sync]Windows.Foundation.IAsyncOperationWithProgress <Windows.Media.Transcoding.TranscodeFailureReason, Double>  RenderToFileAsync(Windows.Storage.IStorageFile destination, MediaTrimmingPreference trimmingPreference, Windows.Media.MediaProperties.MediaEncodingProfile encodingProfile);
        Windows.Media.MediaProperties.MediaEncodingProfile CreateDefaultEncodingProfile();
        [method_name("GenerateMediaStreamSource")] Windows.Media.Core.MediaStreamSource GenerateMediaStreamSource();
        [method_name("GenerateMediaStreamSourceWithProfile")] Windows.Media.Core.MediaStreamSource GenerateMediaStreamSource(Windows.Media.MediaProperties.MediaEncodingProfile encodingProfile);
        Windows.Media.Core.MediaStreamSource GeneratePreviewMediaStreamSource(Int32 scaledWidth, Int32 scaledHeight);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Media.Editing.IMediaComposition2", a59e5372-2366-492c-bec8-e6dfba6d0281)]
        {
            Windows.Foundation.Collections.IVector <Windows.Media.Editing.MediaOverlayLayer>  OverlayLayers{ get; };
        }
    }








    [marshaling_behavior(agile)]
    [gc_pressure(Windows.Foundation.Metadata.GCPressureAmount.High)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Media.Editing.IMediaOverlayLayerFactory", 947cb473-a39e-4362-abbf-9f8b5070a062)]
    [interface_name("Windows.Media.Editing.IMediaOverlayLayer", a6d9ba57-eeda-46c6-bbe5-e398c84168ac)]
    [threading(both)]
    runtimeclass MediaOverlayLayer
    {
        [method_name( "CreateWithCompositorDefinition" )] MediaOverlayLayer(Windows.Media.Effects.IVideoCompositorDefinition compositorDefinition);
        MediaOverlayLayer();
        Windows.Media.Editing.MediaOverlayLayer Clone();
        Windows.Foundation.Collections.IVector <Windows.Media.Editing.MediaOverlay>  Overlays{ get; };
        Windows.Media.Effects.IVideoCompositorDefinition CustomCompositorDefinition{ get; };
    }





}
