








namespace Windows.Devices.Gpio.Provider
{
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderGpioSharingMode
    {
        Exclusive,
        SharedReadOnly,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderGpioPinDriveMode
    {
        Input,
        Output,
        InputPullUp,
        InputPullDown,
        OutputOpenDrain,
        OutputOpenDrainPullUp,
        OutputOpenSource,
        OutputOpenSourcePullDown,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderGpioPinValue
    {
        Low,
        High,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderGpioPinEdge
    {
        FallingEdge,
        RisingEdge,
    };


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [constructor_name("Windows.Devices.Gpio.Provider.IGpioPinProviderValueChangedEventArgsFactory", 3ecb0b59-568c-4392-b24a-8a59a902b1f1)]
    [interface_name("Windows.Devices.Gpio.Provider.IGpioPinProviderValueChangedEventArgs", 32a6d6f2-3d5b-44cd-8fbe-13a69f2edb24)]
    [threading(both)]
    runtimeclass GpioPinProviderValueChangedEventArgs
    {
        [method_name( "Create" )] GpioPinProviderValueChangedEventArgs(ProviderGpioPinEdge edge);
        Windows.Devices.Gpio.Provider.ProviderGpioPinEdge Edge{ get; };
    }


    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [uuid(42344cb7-6abc-40ff-9ce7-73b85301b900)]
    interface IGpioPinProvider
    {
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Gpio.Provider.IGpioPinProvider, Windows.Devices.Gpio.Provider.GpioPinProviderValueChangedEventArgs>  ValueChanged;
        Windows.Foundation.TimeSpan DebounceTimeout{ get; };
        Windows.Foundation.TimeSpan DebounceTimeout{ set; };
        Int32 PinNumber{ get; };
        Windows.Devices.Gpio.Provider.ProviderGpioSharingMode SharingMode{ get; };
        Boolean IsDriveModeSupported(ProviderGpioPinDriveMode driveMode);
        Windows.Devices.Gpio.Provider.ProviderGpioPinDriveMode GetDriveMode();
        void SetDriveMode(ProviderGpioPinDriveMode value);
        void Write(ProviderGpioPinValue value);
        Windows.Devices.Gpio.Provider.ProviderGpioPinValue Read();
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [uuid(ad11cec7-19ea-4b21-874f-b91aed4a25db)]
    interface IGpioControllerProvider
    {
        Int32 PinCount{ get; };
        Windows.Devices.Gpio.Provider.IGpioPinProvider OpenPinProvider(Int32 pin, ProviderGpioSharingMode sharingMode);
    };

    [uuid(44e82707-08ca-434a-afe0-d61580446f7e)]
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    interface IGpioProvider
    {
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Gpio.Provider.IGpioControllerProvider>  GetControllers();
    };

}
