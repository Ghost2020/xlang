









namespace Windows.Globalization
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DayOfWeek
    {
        Sunday,
        Monday,
        Tuesday,
        Wednesday,
        Thursday,
        Friday,
        Saturday,
    };




}
namespace Windows.System.UserProfile
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [dualapipartition(0xa000005)]
    [interface_name("Windows.System.UserProfile.IGlobalizationPreferencesForUser", 150f0795-4f6e-40ba-a010-e27d81bda7f5)]
    runtimeclass GlobalizationPreferencesForUser
    {
        Windows.System.User User{ get; };
        Windows.Foundation.Collections.IVectorView <String>  Calendars{ get; };
        Windows.Foundation.Collections.IVectorView <String>  Clocks{ get; };
        Windows.Foundation.Collections.IVectorView <String>  Currencies{ get; };
        Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
        String HomeGeographicRegion{ get; };
        Windows.Globalization.DayOfWeek WeekStartsOn{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [static_name("Windows.System.UserProfile.IGlobalizationPreferencesStatics", 01bf4326-ed37-4e96-b0e9-c1340d1ea158)]
    runtimeclass GlobalizationPreferences
    {
        static Windows.Foundation.Collections.IVectorView <String>  Calendars{ get; };
        static Windows.Foundation.Collections.IVectorView <String>  Clocks{ get; };
        static Windows.Foundation.Collections.IVectorView <String>  Currencies{ get; };
        static Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
        static String HomeGeographicRegion{ get; };
        static Windows.Globalization.DayOfWeek WeekStartsOn{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [static_name("Windows.System.UserProfile.IGlobalizationPreferencesStatics3", 1e059733-35f5-40d8-b9e8-aef3ef856fce)]
        {
            static Windows.System.UserProfile.GlobalizationPreferencesForUser GetForUser(Windows.System.User user);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [static_name("Windows.System.UserProfile.IGlobalizationPreferencesStatics2", fcce85f1-4300-4cd0-9cac-1a8e7b7e18f4)]
        {
            static Boolean TrySetHomeGeographicRegion(String region);
            static Boolean TrySetLanguages(Windows.Foundation.Collections.IIterable <String>  languageTags);
        }
    }




}
namespace Windows.Globalization
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [static_name("Windows.Globalization.ICalendarIdentifiersStatics2", 7df4d488-5fd0-42a7-95b5-7d98d823075f)]
    [threading(both)]
    runtimeclass CalendarIdentifiers
    {

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.Globalization.ICalendarIdentifiersStatics3", 2c225423-1fad-40c0-9334-a8eb90db04f5)]
        {
            static String ChineseLunar{ get; };
            static String JapaneseLunar{ get; };
            static String KoreanLunar{ get; };
            static String TaiwanLunar{ get; };
            static String VietnameseLunar{ get; };
        }
        static String Persian{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Globalization.ICalendarIdentifiersStatics", 80653f68-2cb2-4c1f-b590-f0f52bf4fd1a)]
        {
            static String Gregorian{ get; };
            static String Hebrew{ get; };
            static String Hijri{ get; };
            static String Japanese{ get; };
            static String Julian{ get; };
            static String Korean{ get; };
            static String Taiwan{ get; };
            static String Thai{ get; };
            static String UmAlQura{ get; };
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Globalization.IClockIdentifiersStatics", 523805bb-12ec-4f83-bc31-b1b4376b0808)]
    [threading(both)]
    runtimeclass ClockIdentifiers
    {
        static String TwelveHour{ get; };
        static String TwentyFourHour{ get; };
    }



    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Globalization.INumeralSystemIdentifiersStatics2", 7f003228-9ddb-4a34-9104-0260c091a7c7)]
    [threading(both)]
    runtimeclass NumeralSystemIdentifiers
    {
        static String Brah{ get; };
        static String Osma{ get; };
        static String MathBold{ get; };
        static String MathDbl{ get; };
        static String MathSans{ get; };
        static String MathSanb{ get; };
        static String MathMono{ get; };
        static String ZmthBold{ get; };
        static String ZmthDbl{ get; };
        static String ZmthSans{ get; };
        static String ZmthSanb{ get; };
        static String ZmthMono{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Globalization.INumeralSystemIdentifiersStatics", a5c662c3-68c9-4d3d-b765-972029e21dec)]
        {
            static String Arab{ get; };
            static String ArabExt{ get; };
            static String Bali{ get; };
            static String Beng{ get; };
            static String Cham{ get; };
            static String Deva{ get; };
            static String FullWide{ get; };
            static String Gujr{ get; };
            static String Guru{ get; };
            static String HaniDec{ get; };
            static String Java{ get; };
            static String Kali{ get; };
            static String Khmr{ get; };
            static String Knda{ get; };
            static String Lana{ get; };
            static String LanaTham{ get; };
            static String Laoo{ get; };
            static String Latn{ get; };
            static String Lepc{ get; };
            static String Limb{ get; };
            static String Mlym{ get; };
            static String Mong{ get; };
            static String Mtei{ get; };
            static String Mymr{ get; };
            static String MymrShan{ get; };
            static String Nkoo{ get; };
            static String Olck{ get; };
            static String Orya{ get; };
            static String Saur{ get; };
            static String Sund{ get; };
            static String Talu{ get; };
            static String TamlDec{ get; };
            static String Telu{ get; };
            static String Thai{ get; };
            static String Tibt{ get; };
            static String Vaii{ get; };
        }
    }




    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Globalization.ICurrencyIdentifiersStatics", 9f1d091b-d586-4913-9b6a-a9bd2dc12874)]
    [threading(both)]
    runtimeclass CurrencyIdentifiers
    {

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [static_name("Windows.Globalization.ICurrencyIdentifiersStatics3", 4fb23bfa-ed25-4f4d-857f-237f1748c21c)]
        {
            static String MRU{ get; };
            static String SSP{ get; };
            static String STN{ get; };
            static String VES{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Globalization.ICurrencyIdentifiersStatics2", 1814797f-c3b2-4c33-9591-980011950d37)]
        {
            static String BYN{ get; };
        }
        static String AED{ get; };
        static String AFN{ get; };
        static String ALL{ get; };
        static String AMD{ get; };
        static String ANG{ get; };
        static String AOA{ get; };
        static String ARS{ get; };
        static String AUD{ get; };
        static String AWG{ get; };
        static String AZN{ get; };
        static String BAM{ get; };
        static String BBD{ get; };
        static String BDT{ get; };
        static String BGN{ get; };
        static String BHD{ get; };
        static String BIF{ get; };
        static String BMD{ get; };
        static String BND{ get; };
        static String BOB{ get; };
        static String BRL{ get; };
        static String BSD{ get; };
        static String BTN{ get; };
        static String BWP{ get; };
        static String BYR{ get; };
        static String BZD{ get; };
        static String CAD{ get; };
        static String CDF{ get; };
        static String CHF{ get; };
        static String CLP{ get; };
        static String CNY{ get; };
        static String COP{ get; };
        static String CRC{ get; };
        static String CUP{ get; };
        static String CVE{ get; };
        static String CZK{ get; };
        static String DJF{ get; };
        static String DKK{ get; };
        static String DOP{ get; };
        static String DZD{ get; };
        static String EGP{ get; };
        static String ERN{ get; };
        static String ETB{ get; };
        static String EUR{ get; };
        static String FJD{ get; };
        static String FKP{ get; };
        static String GBP{ get; };
        static String GEL{ get; };
        static String GHS{ get; };
        static String GIP{ get; };
        static String GMD{ get; };
        static String GNF{ get; };
        static String GTQ{ get; };
        static String GYD{ get; };
        static String HKD{ get; };
        static String HNL{ get; };
        static String HRK{ get; };
        static String HTG{ get; };
        static String HUF{ get; };
        static String IDR{ get; };
        static String ILS{ get; };
        static String INR{ get; };
        static String IQD{ get; };
        static String IRR{ get; };
        static String ISK{ get; };
        static String JMD{ get; };
        static String JOD{ get; };
        static String JPY{ get; };
        static String KES{ get; };
        static String KGS{ get; };
        static String KHR{ get; };
        static String KMF{ get; };
        static String KPW{ get; };
        static String KRW{ get; };
        static String KWD{ get; };
        static String KYD{ get; };
        static String KZT{ get; };
        static String LAK{ get; };
        static String LBP{ get; };
        static String LKR{ get; };
        static String LRD{ get; };
        static String LSL{ get; };
        static String LTL{ get; };
        static String LVL{ get; };
        static String LYD{ get; };
        static String MAD{ get; };
        static String MDL{ get; };
        static String MGA{ get; };
        static String MKD{ get; };
        static String MMK{ get; };
        static String MNT{ get; };
        static String MOP{ get; };
        static String MRO{ get; };
        static String MUR{ get; };
        static String MVR{ get; };
        static String MWK{ get; };
        static String MXN{ get; };
        static String MYR{ get; };
        static String MZN{ get; };
        static String NAD{ get; };
        static String NGN{ get; };
        static String NIO{ get; };
        static String NOK{ get; };
        static String NPR{ get; };
        static String NZD{ get; };
        static String OMR{ get; };
        static String PAB{ get; };
        static String PEN{ get; };
        static String PGK{ get; };
        static String PHP{ get; };
        static String PKR{ get; };
        static String PLN{ get; };
        static String PYG{ get; };
        static String QAR{ get; };
        static String RON{ get; };
        static String RSD{ get; };
        static String RUB{ get; };
        static String RWF{ get; };
        static String SAR{ get; };
        static String SBD{ get; };
        static String SCR{ get; };
        static String SDG{ get; };
        static String SEK{ get; };
        static String SGD{ get; };
        static String SHP{ get; };
        static String SLL{ get; };
        static String SOS{ get; };
        static String SRD{ get; };
        static String STD{ get; };
        static String SYP{ get; };
        static String SZL{ get; };
        static String THB{ get; };
        static String TJS{ get; };
        static String TMT{ get; };
        static String TND{ get; };
        static String TOP{ get; };
        static String TRY{ get; };
        static String TTD{ get; };
        static String TWD{ get; };
        static String TZS{ get; };
        static String UAH{ get; };
        static String UGX{ get; };
        static String USD{ get; };
        static String UYU{ get; };
        static String UZS{ get; };
        static String VEF{ get; };
        static String VND{ get; };
        static String VUV{ get; };
        static String WST{ get; };
        static String XAF{ get; };
        static String XCD{ get; };
        static String XOF{ get; };
        static String XPF{ get; };
        static String XXX{ get; };
        static String YER{ get; };
        static String ZAR{ get; };
        static String ZMW{ get; };
        static String ZWL{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [constructor_name("Windows.Globalization.ICurrencyAmountFactory", 48d7168f-ef3b-4aee-a6a1-4b036fe03ff0)]
    [interface_name("Windows.Globalization.ICurrencyAmount", 74b49942-eb75-443a-95b3-7d723f56f93c)]
    [threading(both)]
    runtimeclass CurrencyAmount
    {
        [method_name( "Create" )] CurrencyAmount(String amount, String currency);
        String Amount{ get; };
        String Currency{ get; };
    }




    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Globalization.IGeographicRegionFactory", 53425270-77b4-426b-859f-81e19d512546)]
    [static_name("Windows.Globalization.IGeographicRegionStatics", 29e28974-7ad9-4ef4-8799-b3b44fadec08)]
    [threading(both)]
    runtimeclass GeographicRegion
    {
        [method_name( "CreateGeographicRegion" )] GeographicRegion(String geographicRegionCode);
        static Boolean IsSupported(String geographicRegionCode);
        GeographicRegion();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.IGeographicRegion", 01e9a621-4a64-4ed9-954f-9edeb07bd903)]
        {
            String Code{ get; };
            String CodeTwoLetter{ get; };
            String CodeThreeLetter{ get; };
            String CodeThreeDigit{ get; };
            String DisplayName{ get; };
            String NativeName{ get; };
            Windows.Foundation.Collections.IVectorView <String>  CurrenciesInUse{ get; };
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 6)]
    enum LanguageLayoutDirection
    {
        Ltr,
        Rtl,
        TtbLtr,
        TtbRtl,
    };





    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Globalization.ILanguageFactory", 9b0252ac-0c27-44f8-b792-9793fb66c63e)]
    [static_name("Windows.Globalization.ILanguageStatics2", 30199f6e-914b-4b2a-9d6e-e3b0e27dbe4f)]
    [threading(both)]
    runtimeclass Language
    {
        [method_name( "CreateLanguage" )] Language(String languageTag);
        static Boolean TrySetInputMethodLanguageTag(String languageTag);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Globalization.ILanguageStatics", b23cd557-0865-46d4-89b8-d59be8990f0d)]
        {
            static Boolean IsWellFormed(String languageTag);
            static String CurrentInputMethodLanguageTag{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.ILanguage", ea79a752-f7c2-4265-b1bd-c4dec4e4f080)]
        {
            String LanguageTag{ get; };
            String DisplayName{ get; };
            String NativeName{ get; };
            String Script{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.ILanguageExtensionSubtags", 7d7daf45-368d-4364-852b-dec927037b85)]
        {
            Windows.Foundation.Collections.IVectorView <String>  GetExtensionSubtags(String singleton);
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Globalization.ILanguage2", 6a47e5b5-d94d-4886-a404-a5a5b9d5b494)]
        {
            Windows.Globalization.LanguageLayoutDirection LayoutDirection{ get; };
        }
    }



}
namespace Windows.Globalization.DateTimeFormatting
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum YearFormat
    {
        None,
        Default,
        Abbreviated,
        Full,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum MonthFormat
    {
        None,
        Default,
        Abbreviated,
        Full,
        Numeric,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DayOfWeekFormat
    {
        None,
        Default,
        Abbreviated,
        Full,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DayFormat
    {
        None,
        Default,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HourFormat
    {
        None,
        Default,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum MinuteFormat
    {
        None,
        Default,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SecondFormat
    {
        None,
        Default,
    };



    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Globalization.DateTimeFormatting.IDateTimeFormatterStatics", bfcde7c0-df4c-4a2e-9012-f47daf3f1212)]
    [constructor_name("Windows.Globalization.DateTimeFormatting.IDateTimeFormatterFactory", ec8d8a53-1a2e-412d-8815-3b745fb1a2a0)]
    [threading(both)]
    runtimeclass DateTimeFormatter
    {
        static Windows.Globalization.DateTimeFormatting.DateTimeFormatter LongDate{ get; };
        static Windows.Globalization.DateTimeFormatting.DateTimeFormatter LongTime{ get; };
        static Windows.Globalization.DateTimeFormatting.DateTimeFormatter ShortDate{ get; };
        static Windows.Globalization.DateTimeFormatting.DateTimeFormatter ShortTime{ get; };
        [method_name( "CreateDateTimeFormatter" )] DateTimeFormatter(String formatTemplate);
        [method_name( "CreateDateTimeFormatterLanguages" )] DateTimeFormatter(String formatTemplate, Windows.Foundation.Collections.IIterable <String>  languages);
        [method_name( "CreateDateTimeFormatterContext" )] DateTimeFormatter(String formatTemplate, Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion, String calendar, String clock);
        [method_name( "CreateDateTimeFormatterDate" )] DateTimeFormatter(YearFormat yearFormat, MonthFormat monthFormat, DayFormat dayFormat, DayOfWeekFormat dayOfWeekFormat);
        [method_name( "CreateDateTimeFormatterTime" )] DateTimeFormatter(HourFormat hourFormat, MinuteFormat minuteFormat, SecondFormat secondFormat);
        [method_name( "CreateDateTimeFormatterDateTimeLanguages" )] DateTimeFormatter(YearFormat yearFormat, MonthFormat monthFormat, DayFormat dayFormat, DayOfWeekFormat dayOfWeekFormat, HourFormat hourFormat, MinuteFormat minuteFormat, SecondFormat secondFormat, Windows.Foundation.Collections.IIterable <String>  languages);
        [method_name( "CreateDateTimeFormatterDateTimeContext" )] DateTimeFormatter(YearFormat yearFormat, MonthFormat monthFormat, DayFormat dayFormat, DayOfWeekFormat dayOfWeekFormat, HourFormat hourFormat, MinuteFormat minuteFormat, SecondFormat secondFormat, Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion, String calendar, String clock);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.DateTimeFormatting.IDateTimeFormatter", 95eeca10-73e0-4e4b-a183-3d6ad0ba35ec)]
        {
            Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
            String GeographicRegion{ get; };
            String Calendar{ get; };
            String Clock{ get; };
            String NumeralSystem{ get; };
            String NumeralSystem{ set; };
            Windows.Foundation.Collections.IVectorView <String>  Patterns{ get; };
            String Template{ get; };
            String Format(Windows.Foundation.DateTime value);
            Windows.Globalization.DateTimeFormatting.YearFormat IncludeYear{ get; };
            Windows.Globalization.DateTimeFormatting.MonthFormat IncludeMonth{ get; };
            Windows.Globalization.DateTimeFormatting.DayOfWeekFormat IncludeDayOfWeek{ get; };
            Windows.Globalization.DateTimeFormatting.DayFormat IncludeDay{ get; };
            Windows.Globalization.DateTimeFormatting.HourFormat IncludeHour{ get; };
            Windows.Globalization.DateTimeFormatting.MinuteFormat IncludeMinute{ get; };
            Windows.Globalization.DateTimeFormatting.SecondFormat IncludeSecond{ get; };
            String ResolvedLanguage{ get; };
            String ResolvedGeographicRegion{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.DateTimeFormatting.IDateTimeFormatter2", 27c91a86-bdaa-4fd0-9e36-671d5aa5ee03)]
        {
            [method_name("FormatUsingTimeZone")] String Format(Windows.Foundation.DateTime datetime, String timeZoneId);
        }
    }




}
namespace Windows.Globalization
{
    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Globalization.ICalendarFactory2", b44b378c-ca7e-4590-9e72-ea2bec1a5115)]
    [threading(both)]
    runtimeclass Calendar
    {
        [method_name( "CreateCalendarWithTimeZone" )] Calendar(Windows.Foundation.Collections.IIterable <String>  languages, String calendar, String clock, String timeZoneId);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Globalization.ICalendarFactory", 83f58412-e56b-4c75-a66e-0f63d57758a6)]
        {
            [method_name( "CreateCalendarDefaultCalendarAndClock" )] Calendar(Windows.Foundation.Collections.IIterable <String>  languages);
            [method_name( "CreateCalendar" )] Calendar(Windows.Foundation.Collections.IIterable <String>  languages, String calendar, String clock);
        }
        Calendar();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.ICalendar", ca30221d-86d9-40fb-a26b-d44eb7cf08ea)]
        {
            Windows.Globalization.Calendar Clone();
            void SetToMin();
            void SetToMax();
            Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
            String NumeralSystem{ get; };
            String NumeralSystem{ set; };
            String GetCalendarSystem();
            void ChangeCalendarSystem(String value);
            String GetClock();
            void ChangeClock(String value);
            Windows.Foundation.DateTime GetDateTime();
            void SetDateTime(Windows.Foundation.DateTime value);
            void SetToNow();
            Int32 FirstEra{ get; };
            Int32 LastEra{ get; };
            Int32 NumberOfEras{ get; };
            Int32 Era{ get; };
            Int32 Era{ set; };
            void AddEras(Int32 eras);
            [method_name("EraAsFullString")] String EraAsString();
            [method_name("EraAsString")] String EraAsString(Int32 idealLength);
            Int32 FirstYearInThisEra{ get; };
            Int32 LastYearInThisEra{ get; };
            Int32 NumberOfYearsInThisEra{ get; };
            Int32 Year{ get; };
            Int32 Year{ set; };
            void AddYears(Int32 years);
            String YearAsString();
            String YearAsTruncatedString(Int32 remainingDigits);
            String YearAsPaddedString(Int32 minDigits);
            Int32 FirstMonthInThisYear{ get; };
            Int32 LastMonthInThisYear{ get; };
            Int32 NumberOfMonthsInThisYear{ get; };
            Int32 Month{ get; };
            Int32 Month{ set; };
            void AddMonths(Int32 months);
            [method_name("MonthAsFullString")] String MonthAsString();
            [method_name("MonthAsString")] String MonthAsString(Int32 idealLength);
            [method_name("MonthAsFullSoloString")] String MonthAsSoloString();
            [method_name("MonthAsSoloString")] String MonthAsSoloString(Int32 idealLength);
            String MonthAsNumericString();
            String MonthAsPaddedNumericString(Int32 minDigits);
            void AddWeeks(Int32 weeks);
            Int32 FirstDayInThisMonth{ get; };
            Int32 LastDayInThisMonth{ get; };
            Int32 NumberOfDaysInThisMonth{ get; };
            Int32 Day{ get; };
            Int32 Day{ set; };
            void AddDays(Int32 days);
            String DayAsString();
            String DayAsPaddedString(Int32 minDigits);
            Windows.Globalization.DayOfWeek DayOfWeek{ get; };
            [method_name("DayOfWeekAsFullString")] String DayOfWeekAsString();
            [method_name("DayOfWeekAsString")] String DayOfWeekAsString(Int32 idealLength);
            [method_name("DayOfWeekAsFullSoloString")] String DayOfWeekAsSoloString();
            [method_name("DayOfWeekAsSoloString")] String DayOfWeekAsSoloString(Int32 idealLength);
            Int32 FirstPeriodInThisDay{ get; };
            Int32 LastPeriodInThisDay{ get; };
            Int32 NumberOfPeriodsInThisDay{ get; };
            Int32 Period{ get; };
            Int32 Period{ set; };
            void AddPeriods(Int32 periods);
            [method_name("PeriodAsFullString")] String PeriodAsString();
            [method_name("PeriodAsString")] String PeriodAsString(Int32 idealLength);
            Int32 FirstHourInThisPeriod{ get; };
            Int32 LastHourInThisPeriod{ get; };
            Int32 NumberOfHoursInThisPeriod{ get; };
            Int32 Hour{ get; };
            Int32 Hour{ set; };
            void AddHours(Int32 hours);
            String HourAsString();
            String HourAsPaddedString(Int32 minDigits);
            Int32 Minute{ get; };
            Int32 Minute{ set; };
            void AddMinutes(Int32 minutes);
            String MinuteAsString();
            String MinuteAsPaddedString(Int32 minDigits);
            Int32 Second{ get; };
            Int32 Second{ set; };
            void AddSeconds(Int32 seconds);
            String SecondAsString();
            String SecondAsPaddedString(Int32 minDigits);
            Int32 Nanosecond{ get; };
            Int32 Nanosecond{ set; };
            void AddNanoseconds(Int32 nanoseconds);
            String NanosecondAsString();
            String NanosecondAsPaddedString(Int32 minDigits);
            Int32 Compare(Calendar other);
            Int32 CompareDateTime(Windows.Foundation.DateTime other);
            void CopyTo(Calendar other);
            Int32 FirstMinuteInThisHour{ get; };
            Int32 LastMinuteInThisHour{ get; };
            Int32 NumberOfMinutesInThisHour{ get; };
            Int32 FirstSecondInThisMinute{ get; };
            Int32 LastSecondInThisMinute{ get; };
            Int32 NumberOfSecondsInThisMinute{ get; };
            String ResolvedLanguage{ get; };
            Boolean IsDaylightSavingTime{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.ITimeZoneOnCalendar", bb3c25e5-46cf-4317-a3f5-02621ad54478)]
        {
            String GetTimeZone();
            void ChangeTimeZone(String timeZoneId);
            [method_name("TimeZoneAsFullString")] String TimeZoneAsString();
            [method_name("TimeZoneAsString")] String TimeZoneAsString(Int32 idealLength);
        }
    }




}
namespace Windows.Globalization.NumberFormatting
{
    [uuid(5473c375-38ed-4631-b80c-ef34fc48b7f5)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface INumberRounder
    {
        Int32 RoundInt32(Int32 value);
        UInt32 RoundUInt32(UInt32 value);
        Int64 RoundInt64(Int64 value);
        UInt64 RoundUInt64(UInt64 value);
        Single RoundSingle(Single value);
        Double RoundDouble(Double value);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum RoundingAlgorithm
    {
        None,
        RoundDown,
        RoundUp,
        RoundTowardsZero,
        RoundAwayFromZero,
        RoundHalfDown,
        RoundHalfUp,
        RoundHalfTowardsZero,
        RoundHalfAwayFromZero,
        RoundHalfToEven,
        RoundHalfToOdd,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [threading(both)]
    runtimeclass SignificantDigitsNumberRounder
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]Windows.Globalization.NumberFormatting.INumberRounder
    {
        SignificantDigitsNumberRounder();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.NumberFormatting.ISignificantDigitsNumberRounder", f5941bca-6646-4913-8c76-1b191ff94dfd)]
        {
            Windows.Globalization.NumberFormatting.RoundingAlgorithm RoundingAlgorithm{ get; };
            Windows.Globalization.NumberFormatting.RoundingAlgorithm RoundingAlgorithm{ set; };
            UInt32 SignificantDigits{ get; };
            UInt32 SignificantDigits{ set; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [threading(both)]
    runtimeclass IncrementNumberRounder
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]Windows.Globalization.NumberFormatting.INumberRounder
    {
        IncrementNumberRounder();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.NumberFormatting.IIncrementNumberRounder", 70a64ff8-66ab-4155-9da1-739e46764543)]
        {
            Windows.Globalization.NumberFormatting.RoundingAlgorithm RoundingAlgorithm{ get; };
            Windows.Globalization.NumberFormatting.RoundingAlgorithm RoundingAlgorithm{ set; };
            Double Increment{ get; };
            Double Increment{ set; };
        }
    }

    [uuid(a5007c49-7676-4db7-8631-1b6ff265caa9)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface INumberFormatter
    {
        [method_name("FormatInt")] String Format(Int64 value);
        [method_name("FormatUInt")] String Format(UInt64 value);
        [method_name("FormatDouble")] [default_overload]
        String Format(Double value);
    };

    [uuid(d4a8c1f0-80d0-4b0d-a89e-882c1e8f8310)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface INumberFormatter2
    {
        String FormatInt(Int64 value);
        String FormatUInt(UInt64 value);
        String FormatDouble(Double value);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(e6659412-4a13-4a53-83a1-392fbe4cff9f)]
    interface INumberParser
    {
        Windows.Foundation.IReference <Int64>  ParseInt(String text);
        Windows.Foundation.IReference <UInt64>  ParseUInt(String text);
        Windows.Foundation.IReference <Double>  ParseDouble(String text);
    };

    [uuid(80332d21-aee1-4a39-baa2-07ed8c96daf6)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface INumberFormatterOptions
    {
        Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
        String GeographicRegion{ get; };
        Int32 IntegerDigits{ get; };
        Int32 IntegerDigits{ set; };
        Int32 FractionDigits{ get; };
        Int32 FractionDigits{ set; };
        Boolean IsGrouped{ get; };
        Boolean IsGrouped{ set; };
        Boolean IsDecimalPointAlwaysDisplayed{ get; };
        Boolean IsDecimalPointAlwaysDisplayed{ set; };
        String NumeralSystem{ get; };
        String NumeralSystem{ set; };
        String ResolvedLanguage{ get; };
        String ResolvedGeographicRegion{ get; };
    };

    [uuid(1d4dfcdd-2d43-4ee8-bbf1-c1b26a711a58)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface ISignificantDigitsOption
    {
        Int32 SignificantDigits{ get; };
        Int32 SignificantDigits{ set; };
    };

    [uuid(3b088433-646f-4efe-8d48-66eb2e49e736)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface INumberRounderOption
    {
        Windows.Globalization.NumberFormatting.INumberRounder NumberRounder{ get; };
        Windows.Globalization.NumberFormatting.INumberRounder NumberRounder{ set; };
    };

    [uuid(fd1cdd31-0a3c-49c4-a642-96a1564f4f30)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface ISignedZeroOption
    {
        Boolean IsZeroSigned{ get; };
        Boolean IsZeroSigned{ set; };
    };


    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Globalization.NumberFormatting.IDecimalFormatterFactory", 0d018c9a-e393-46b8-b830-7a69c8f89fbb)]
    [threading(both)]
    runtimeclass DecimalFormatter
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatterOptions
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]Windows.Globalization.NumberFormatting.INumberFormatter
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberParser
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignificantDigitsOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberRounderOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignedZeroOption
    {
        [method_name( "CreateDecimalFormatter" )] DecimalFormatter(Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion);
        DecimalFormatter();
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Globalization.NumberFormatting.IPercentFormatterFactory", b7828aef-fed4-4018-a6e2-e09961e03765)]
    [threading(both)]
    runtimeclass PercentFormatter
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatterOptions
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]Windows.Globalization.NumberFormatting.INumberFormatter
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberParser
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignificantDigitsOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberRounderOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignedZeroOption
    {
        [method_name( "CreatePercentFormatter" )] PercentFormatter(Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion);
        PercentFormatter();
    }


    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass PermilleFormatter
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatterOptions
        , [default][contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberParser
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignificantDigitsOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberRounderOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignedZeroOption
    {
        PermilleFormatter();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Globalization.NumberFormatting.IPermilleFormatterFactory", 2b37b4ac-e638-4ed5-a998-62f6b06a49ae)]
        {
            [method_name( "CreatePermilleFormatter" )] PermilleFormatter(Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion);
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CurrencyFormatterMode
    {
        UseSymbol,
        UseCurrencyCode,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [constructor_name("Windows.Globalization.NumberFormatting.ICurrencyFormatterFactory", 86c7537e-b938-4aa2-84b0-2c33dc5b1450)]
    [threading(both)]
    runtimeclass CurrencyFormatter
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberParser
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatter
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberFormatterOptions
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignificantDigitsOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.INumberRounderOption
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Globalization.NumberFormatting.ISignedZeroOption
    {
        [method_name( "CreateCurrencyFormatterCode" )] CurrencyFormatter(String currencyCode);
        [method_name( "CreateCurrencyFormatterCodeContext" )] CurrencyFormatter(String currencyCode, Windows.Foundation.Collections.IIterable <String>  languages, String geographicRegion);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.NumberFormatting.ICurrencyFormatter", 11730ca5-4b00-41b2-b332-73b12a497d54)]
        {
            String Currency{ get; };
            [deprecated("Currency may be read-only for releases after Windows 8.1. Instead, use a new CurrencyFormatter.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            String Currency{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.NumberFormatting.ICurrencyFormatter2", 072c2f1d-e7ba-4197-920e-247c92f7dea6)]
        {
            Windows.Globalization.NumberFormatting.CurrencyFormatterMode Mode{ get; };
            Windows.Globalization.NumberFormatting.CurrencyFormatterMode Mode{ set; };
            void ApplyRoundingForCurrency(RoundingAlgorithm roundingAlgorithm);
        }
    }




    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Globalization.NumberFormatting.INumeralSystemTranslatorFactory", 9630c8da-36ef-4d88-a85c-6f0d98d620a6)]
    [threading(both)]
    runtimeclass NumeralSystemTranslator
    {
        [method_name( "Create" )] NumeralSystemTranslator(Windows.Foundation.Collections.IIterable <String>  languages);
        NumeralSystemTranslator();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.NumberFormatting.INumeralSystemTranslator", 28f5bc2c-8c23-4234-ad2e-fa5a3a426e9b)]
        {
            Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
            String ResolvedLanguage{ get; };
            String NumeralSystem{ get; };
            String NumeralSystem{ set; };
            String TranslateNumerals(String value);
        }
    }



}
namespace Windows.Globalization.Collation
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    runtimeclass CharacterGrouping
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Globalization.Collation.ICharacterGrouping", fae761bb-805d-4bb0-95bb-c1f7c3e8eb8e)]
        {
            String First{ get; };
            String Label{ get; };
        }
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [threading(both)]
    runtimeclass CharacterGroupings
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Foundation.Collections.IVectorView<Windows.Globalization.Collation.CharacterGrouping>
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Foundation.Collections.IIterable<Windows.Globalization.Collation.CharacterGrouping>
    {

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [constructor_name("Windows.Globalization.Collation.ICharacterGroupingsFactory", 99ea9fd9-886d-4401-9f98-69c82d4c2f78)]
        {
            [method_name( "Create" )] CharacterGroupings(String language);
        }
        CharacterGroupings();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Globalization.Collation.ICharacterGroupings", b8d20a75-d4cf-4055-80e5-ce169c226496)]
        {
            String Lookup(String text);
        }
    }




}
namespace Windows.Globalization
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Globalization.IApplicationLanguagesStatics", 75b40847-0a4c-4a92-9565-fd63c95f7aed)]
    [threading(both)]
    runtimeclass ApplicationLanguages
    {
        static String PrimaryLanguageOverride{ get; };
        static String PrimaryLanguageOverride{ set; };
        static Windows.Foundation.Collections.IVectorView <String>  Languages{ get; };
        static Windows.Foundation.Collections.IVectorView <String>  ManifestLanguages{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [static_name("Windows.Globalization.IApplicationLanguagesStatics2", 1df0de4f-072b-4d7b-8f06-cb2db40f2bb5)]
        {
            static Windows.Foundation.Collections.IVectorView <String>  GetLanguagesForUser(Windows.System.User user);
        }
    }

}
namespace Windows.Data.Text
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum UnicodeGeneralCategory
    {
        UppercaseLetter,
        LowercaseLetter,
        TitlecaseLetter,
        ModifierLetter,
        OtherLetter,
        NonspacingMark,
        SpacingCombiningMark,
        EnclosingMark,
        DecimalDigitNumber,
        LetterNumber,
        OtherNumber,
        SpaceSeparator,
        LineSeparator,
        ParagraphSeparator,
        Control,
        Format,
        Surrogate,
        PrivateUse,
        ConnectorPunctuation,
        DashPunctuation,
        OpenPunctuation,
        ClosePunctuation,
        InitialQuotePunctuation,
        FinalQuotePunctuation,
        OtherPunctuation,
        MathSymbol,
        CurrencySymbol,
        ModifierSymbol,
        OtherSymbol,
        NotAssigned,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum UnicodeNumericType
    {
        None,
        Decimal,
        Digit,
        Numeric,
    };


    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Data.Text.IUnicodeCharactersStatics", 97909e87-9291-4f91-b6c8-b6e359d7a7fb)]
    [threading(both)]
    runtimeclass UnicodeCharacters
    {
        static UInt32 GetCodepointFromSurrogatePair(UInt32 highSurrogate, UInt32 lowSurrogate);
        static void GetSurrogatePairFromCodepoint(UInt32 codepoint, out Char highSurrogate, out Char lowSurrogate);
        static Boolean IsHighSurrogate(UInt32 codepoint);
        static Boolean IsLowSurrogate(UInt32 codepoint);
        static Boolean IsSupplementary(UInt32 codepoint);
        static Boolean IsNoncharacter(UInt32 codepoint);
        static Boolean IsWhitespace(UInt32 codepoint);
        static Boolean IsAlphabetic(UInt32 codepoint);
        static Boolean IsCased(UInt32 codepoint);
        static Boolean IsUppercase(UInt32 codepoint);
        static Boolean IsLowercase(UInt32 codepoint);
        static Boolean IsIdStart(UInt32 codepoint);
        static Boolean IsIdContinue(UInt32 codepoint);
        static Boolean IsGraphemeBase(UInt32 codepoint);
        static Boolean IsGraphemeExtend(UInt32 codepoint);
        static Windows.Data.Text.UnicodeNumericType GetNumericType(UInt32 codepoint);
        static Windows.Data.Text.UnicodeGeneralCategory GetGeneralCategory(UInt32 codepoint);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AlternateNormalizationFormat
    {
        NotNormalized,
        Number,
        Currency = 3,
        Date,
        Time,
    };


    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AlternateWordForm
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Data.Text.IAlternateWordForm", 47396c1e-51b9-4207-9146-248e636a1d1d)]
        {
            Windows.Data.Text.TextSegment SourceTextSegment{ get; };
            String AlternateText{ get; };
            Windows.Data.Text.AlternateNormalizationFormat NormalizationFormat{ get; };
        }
    }



    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass WordSegment
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Data.Text.IWordSegment", d2d4ba6d-987c-4cc0-b6bd-d49a11b38f9a)]
        {
            String Text{ get; };
            Windows.Data.Text.TextSegment SourceTextSegment{ get; };
            Windows.Foundation.Collections.IVectorView <Windows.Data.Text.AlternateWordForm>  AlternateForms{ get; };
        }
    }

    [uuid(a5dd6357-bf2a-4c4f-a31f-29e71c6f8b35)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void WordSegmentsTokenizingHandler(Windows.Foundation.Collections.IIterable <Windows.Data.Text.WordSegment>  precedingWords, Windows.Foundation.Collections.IIterable <Windows.Data.Text.WordSegment>  words);



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Data.Text.IWordsSegmenterFactory", e6977274-fc35-455c-8bfb-6d7f4653ca97)]
    [threading(both)]
    runtimeclass WordsSegmenter
    {
        [method_name( "CreateWithLanguage" )] WordsSegmenter(String language);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Data.Text.IWordsSegmenter", 86b4d4d1-b2fe-4e34-a81d-66640300454f)]
        {
            String ResolvedLanguage{ get; };
            Windows.Data.Text.WordSegment GetTokenAt(String text, UInt32 startIndex);
            Windows.Foundation.Collections.IVectorView <Windows.Data.Text.WordSegment>  GetTokens(String text);
            void Tokenize(String text, UInt32 startIndex, WordSegmentsTokenizingHandler handler);
        }
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass SelectableWordSegment
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Data.Text.ISelectableWordSegment", 916a4cb7-8aa7-4c78-b374-5dedb752e60b)]
        {
            String Text{ get; };
            Windows.Data.Text.TextSegment SourceTextSegment{ get; };
        }
    }

    [uuid(3a3dfc9c-aede-4dc7-9e6c-41c044bd3592)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void SelectableWordSegmentsTokenizingHandler(Windows.Foundation.Collections.IIterable <Windows.Data.Text.SelectableWordSegment>  precedingWords, Windows.Foundation.Collections.IIterable <Windows.Data.Text.SelectableWordSegment>  words);



    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Data.Text.ISelectableWordsSegmenterFactory", 8c7a7648-6057-4339-bc70-f210010a4150)]
    [threading(both)]
    runtimeclass SelectableWordsSegmenter
    {
        [method_name( "CreateWithLanguage" )] SelectableWordsSegmenter(String language);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.Data.Text.ISelectableWordsSegmenter", f6dc31e7-4b13-45c5-8897-7d71269e085d)]
        {
            String ResolvedLanguage{ get; };
            Windows.Data.Text.SelectableWordSegment GetTokenAt(String text, UInt32 startIndex);
            Windows.Foundation.Collections.IVectorView <Windows.Data.Text.SelectableWordSegment>  GetTokens(String text);
            void Tokenize(String text, UInt32 startIndex, SelectableWordSegmentsTokenizingHandler handler);
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [flags]
    enum TextPredictionOptions
    {
        None,
        Predictions,
        Corrections,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Data.Text.ITextPredictionGeneratorFactory", 7257b416-8ba2-4751-9d30-9d85435653a2)]
    [interface_name("Windows.Data.Text.ITextPredictionGenerator", 5eacab07-abf1-4cb6-9d9e-326f2b468756)]
    [threading(both)]
    runtimeclass TextPredictionGenerator
    {
        [method_name( "Create" )] TextPredictionGenerator(String languageTag);
        String ResolvedLanguage{ get; };
        Boolean LanguageAvailableButNotInstalled{ get; };
        [method_name("GetCandidatesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetCandidatesAsync(String input);
        [method_name("GetCandidatesWithMaxCountAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetCandidatesAsync(String input, UInt32 maxCandidates);

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Data.Text.ITextPredictionGenerator2", b84723b8-2c77-486a-900a-a3453eedc15d)]
        {
            [method_name("GetCandidatesWithParametersAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetCandidatesAsync(String input, UInt32 maxCandidates, TextPredictionOptions predictionOptions, Windows.Foundation.Collections.IIterable <String>  previousStrings);
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetNextWordCandidatesAsync(UInt32 maxCandidates, Windows.Foundation.Collections.IIterable <String>  previousStrings);
            Windows.UI.Text.Core.CoreTextInputScope InputScope{ get; };
            Windows.UI.Text.Core.CoreTextInputScope InputScope{ set; };
        }
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Data.Text.ITextConversionGeneratorFactory", fcaa3781-3083-49ab-be15-56dfbbb74d6f)]
    [interface_name("Windows.Data.Text.ITextConversionGenerator", 03606a5e-2aa9-4ab6-af8b-a562b63a8992)]
    [threading(both)]
    runtimeclass TextConversionGenerator
    {
        [method_name( "Create" )] TextConversionGenerator(String languageTag);
        String ResolvedLanguage{ get; };
        Boolean LanguageAvailableButNotInstalled{ get; };
        [method_name("GetCandidatesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetCandidatesAsync(String input);
        [method_name("GetCandidatesWithMaxCountAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  GetCandidatesAsync(String input, UInt32 maxCandidates);
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Data.Text.ITextReverseConversionGeneratorFactory", 63bed326-1fda-41f6-89d5-23ddea3c729a)]
    [interface_name("Windows.Data.Text.ITextReverseConversionGenerator", 51e7f514-9c51-4d86-ae1b-b498fbad8313)]
    [threading(both)]
    runtimeclass TextReverseConversionGenerator
    {
        [method_name( "Create" )] TextReverseConversionGenerator(String languageTag);
        String ResolvedLanguage{ get; };
        Boolean LanguageAvailableButNotInstalled{ get; };
        Windows.Foundation.IAsyncOperation <String>  ConvertBackAsync(String input);

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Data.Text.ITextReverseConversionGenerator2", 1aafd2ec-85d6-46fd-828a-3a4830fa6e18)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Data.Text.TextPhoneme> >  GetPhonemesAsync(String input);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [dualapipartition(0xa000002)]
    [interface_name("Windows.Data.Text.ITextPhoneme", 9362a40a-9b7a-4569-94cf-d84f2f38cf9b)]
    runtimeclass TextPhoneme
    {
        String DisplayText{ get; };
        String ReadingText{ get; };
    }


}
