









namespace Windows.Gaming.UI
{
    [contract(Windows.Foundation.UniversalApiContract, 2)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Gaming.UI.IGameBarStatics", 1db9a292-cc78-4173-be45-b61e67283ea7)]
    [threading(both)]
    runtimeclass GameBar
    {
        static event Windows.Foundation.EventHandler <Object>  VisibilityChanged;
        static event Windows.Foundation.EventHandler <Object>  IsInputRedirectedChanged;
        static Boolean Visible{ get; };
        static Boolean IsInputRedirected{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum GameChatOverlayPosition
    {
        BottomCenter,
        BottomLeft,
        BottomRight,
        MiddleRight,
        MiddleLeft,
        TopCenter,
        TopLeft,
        TopRight,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum GameChatMessageOrigin
    {
        Voice,
        Text,
    };


    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Gaming.UI.IGameChatOverlayStatics", 89acf614-7867-49f7-9687-25d9dbf444d1)]
    [interface_name("Windows.Gaming.UI.IGameChatOverlay", fbc64865-f6fc-4a48-ae07-03ac6ed43704)]
    runtimeclass GameChatOverlay
    {
        static Windows.Gaming.UI.GameChatOverlay GetDefault();
        Windows.Gaming.UI.GameChatOverlayPosition DesiredPosition{ get; };
        Windows.Gaming.UI.GameChatOverlayPosition DesiredPosition{ set; };
        void AddMessage(String sender, String message, GameChatMessageOrigin origin);
    }


    [contractversion(1)]
    apicontract GameChatOverlayContract{};


    [contract(Windows.Gaming.UI.GameChatOverlayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Gaming.UI.IGameChatOverlayMessageSource", 1e177397-59fb-4f4f-8e9a-80acf817743c)]
    [threading(both)]
    runtimeclass GameChatOverlayMessageSource
    {
        GameChatOverlayMessageSource();
        event Windows.Foundation.TypedEventHandler <Windows.Gaming.UI.GameChatOverlayMessageSource, Windows.Gaming.UI.GameChatMessageReceivedEventArgs>  MessageReceived;
        void SetDelayBeforeClosingAfterMessageReceived(Windows.Foundation.TimeSpan value);
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Gaming.UI.GameChatOverlayContract, 1)]
    [interface_name("Windows.Gaming.UI.IGameChatMessageReceivedEventArgs", a28201f1-3fb9-4e42-a403-7afce2023b1e)]
    runtimeclass GameChatMessageReceivedEventArgs
    {
        String AppId{ get; };
        String AppDisplayName{ get; };
        String SenderName{ get; };
        String Message{ get; };
        Windows.Gaming.UI.GameChatMessageOrigin Origin{ get; };
    }


    [contractversion(1)]
    apicontract GamingUIProviderContract{};


    [contract(Windows.Gaming.UI.GamingUIProviderContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Gaming.UI.IGameUIProviderActivatedEventArgs", a7b3203e-caf7-4ded-bbd2-47de43bb6dd5)]
    runtimeclass GameUIProviderActivatedEventArgs
        : Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.Foundation.Collections.ValueSet GameUIArgs{ get; };
        void ReportCompleted(Windows.Foundation.Collections.ValueSet results);
    }

}
