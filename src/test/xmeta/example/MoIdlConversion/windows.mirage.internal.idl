










namespace Windows.Mirage.Internal
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum PositionalLocatorState
    {
        Unavailable,
        Activating,
        Active,
        Deactivating,
        Inactive,
        Inhibited,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum Locatability
    {
        Located,
        Pending,
        UnableToLocate,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum Phrase
    {
        None,
        Select,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(a2f984cb-4d7f-48c3-a5e2-f28946d467b0)]
    interface ILocatable
    {
        [return_name("locatability")] Windows.Mirage.Internal.Locatability TryGetRelativeTransformTo(ILocatable pTarget, out Windows.Foundation.Numerics.Matrix4x4 pTransform);
        Windows.Mirage.Internal.Locatability Locatability{ get; };
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum CameraShutterType
    {
        CameraShutterTypeUndefined,
        CameraShutterTypeGlobal,
        CameraShutterTypeRolling,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum CameraLensDistortionModel
    {
        CameraLensDistortionModelUndefined,
        CameraLensDistortionModelTheta,
        CameraLensDistortionModelPolynomial3K,
        CameraLensDistortionModelRational6KT,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct ModelParameters
    {
        Single P00;
        Single P01;
        Single P02;
        Single P03;
        Single P04;
        Single P05;
        Single P06;
        Single P07;
        Single P08;
        Single P09;
        Single P10;
        Single P11;
        Single P12;
        Single P13;
        Single P14;
        Single P15;
        Single P16;
        Single P17;
        Single P18;
        Single P19;
        Single P20;
        Single P21;
        Single P22;
        Single P23;
        Single P24;
        Single P25;
        Single P26;
        Single P27;
        Single P28;
        Single P29;
        Single P30;
        Single P31;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct PVCamCalibration
    {
        Single RightFOV;
        Single LeftFOV;
        Single UpFOV;
        Single DownFOV;
        UInt32 SensorPixelWidth;
        UInt32 SensorPixelHeight;
        CameraShutterType CameraShutterType;
        CameraLensDistortionModel CameraLensDistortionModel;
        UInt32 ModelParameterCount;
        ModelParameters ModelParameters;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum TrackerMode
    {
        NotTracking,
        InertialTracking,
        VisualTracking,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum HeadSizeCalibrationResult
    {
        Failed,
        Succeeded,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct SerializedRigPose
    {
        Guid Anchor;
        Windows.Foundation.Numerics.Matrix4x4 AnchorToRigTransform;
    };


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Mirage.Internal.ILocatableBuffer", 74ba7bcf-481a-4ae9-bf20-3fb166876d41)]
    runtimeclass LocatableBuffer
        : Windows.Mirage.Internal.ILocatable
    {
        LocatableBuffer();
        Windows.Storage.Streams.IBuffer Buffer{ get; };
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct IPDPoseEstimationParams
    {
        String PosterFilePath;
        UInt32 MinNumOfFeaturePoints;
        UInt32 NumOfHypotheses;
        UInt32 MaxHuberIterations;
        UInt32 MaxTukeyIterations;
        Boolean Debug;
        String DebugDirPath;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum IPDPoseEstimationStatus
    {
        Pending,
        Completed,
        Failure,
        Timeout,
        Canceled,
        TooBright,
        TooDark,
        LostTracking,
    };


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct IPDPoseEstimationProgress
    {
        Windows.Foundation.Numerics.Matrix4x4 PosterToInitialCameraTransform;
        Single WidthScale;
        Boolean Converged;
        IPDPoseEstimationStatus CurrentStatus;
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [interface_name("Windows.Mirage.Internal.IIPDPoseEstimationResult", bf7b35f6-ce61-4416-8cf2-d996d2cb04e5)]
    runtimeclass IPDPoseEstimationResult
    {
        IPDPoseEstimationResult();
        Windows.Mirage.Internal.ILocatable InitialHeadLocatable{ get; };
        Windows.Foundation.Numerics.Matrix4x4 PosterToInitialCameraTransform{ get; };
        Single WidthScale{ get; };
        Windows.Mirage.Internal.IPDPoseEstimationStatus CurrentStatus{ get; };
    }


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [static_name("Windows.Mirage.Internal.IViewConfigurationStatics", 5754c28a-241a-4a39-84ea-e667e61b6273)]
    runtimeclass ViewConfiguration
    {
        static void SetSpaceId(Guid spaceId);
        static void GetSpaceId(out Guid spaceId);
        static Windows.Foundation.IAsyncOperation <Windows.Mirage.Internal.HeadSizeCalibrationResult>  CalibrateHeadSizeAsync();
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct FieldCalibrationMessage
    {
        String Message;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct FieldCalibrationState
    {
        String Message;
    };


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [static_name("Windows.Mirage.Internal.IFieldCalibrationStatics", 70ebe99f-c149-4f5f-b473-d14ce66dd50b)]
    runtimeclass FieldCalibration
    {
        static void SendFieldCalibrationCommand(FieldCalibrationMessage fieldCalibrationMessage);
        static Windows.Foundation.IAsyncOperationWithProgress <Boolean, Windows.Mirage.Internal.FieldCalibrationState>  RegisterFieldCalibrationStateAsync();
    }


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [static_name("Windows.Mirage.Internal.IPVCamCalibrationStatics", 84ffa78f-a4f3-45ce-a353-afa413e841a7)]
    runtimeclass PVCamCalibrator
    {
        static Windows.Mirage.Internal.PVCamCalibration PVCamCalibration{ get; };
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(5fe98ae9-16d2-4ca0-b77a-75c6d142b434)]
    interface IHomeGestureDetectedEventArgs
    {
        Windows.Mirage.Internal.IPoseInternal Pose{ get; };
        Windows.UI.Input.Spatial.SpatialInteractionSourceKind Source{ get; };
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(b456e227-77b7-4967-a076-7c88a1358b96)]
    interface IPoseInternal
    {
        Int64 Tick{ get; };
        void GetRemoteRigPose(out SerializedRigPose remote, out UInt64 stamp);
        Windows.Mirage.Internal.SerializedRigPose SerializedRigPose{ get; };
        [return_name("locatability")] Windows.Mirage.Internal.Locatability TryGetMrcReferenceFrameToPoseTransform(out Windows.Foundation.Numerics.Matrix4x4 originToPoseTransform);
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass HomeGestureDetectedEventArgs
        : [default]Windows.Mirage.Internal.IHomeGestureDetectedEventArgs
    {
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum ActivationState
    {
        ObservationMode,
        InteractiveMode,
        Unknown,
    };


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Mirage.Internal.IVoiceActivationChangedEventArgs", b6b6748e-35aa-4b4a-9129-3a2cd62ea2a0)]
    runtimeclass VoiceActivationChangedEventArgs
    {
        Windows.Mirage.Internal.ActivationState ActivationState{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [interface_name("Windows.Mirage.Internal.IGesturesPriv", 13b12dd0-d149-4adc-b1bf-f92a60ceee5c)]
    runtimeclass GesturesPriv
    {
        GesturesPriv();
        event Windows.Foundation.EventHandler <Windows.Mirage.Internal.IHomeGestureDetectedEventArgs>  OnHomeGestureDetected;
        event Windows.Foundation.EventHandler <Windows.Mirage.Internal.VoiceActivationChangedEventArgs>  OnVoiceActivationChanged;
        Windows.Mirage.Internal.ActivationState VoiceActivationState{ get; };
        void SendHomeEvent(UInt32 source);
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct LocationReference
    {
        UInt32 AnchorIndex;
        Windows.Foundation.Numerics.Matrix4x4 Transform;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct DepthRay
    {
        Windows.Foundation.Numerics.Vector3 start;
        Windows.Foundation.Numerics.Vector3 end;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct AnchorStatistics
    {
        UInt32 LowPriorityAnchors;
        UInt32 MediumPriorityAnchors;
        UInt32 HighPriorityAnchors;
        UInt32 HighPriorityAnchorBudget;
        UInt32 Clients;
        UInt32 Locations;
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [interface_name("Windows.Mirage.Internal.IDebugView", 7fda5f7f-0c67-42e3-b778-69aec2bdbf3a)]
    runtimeclass DebugView
    {
        DebugView();
        void GetHeTMapData(out Windows.Foundation.Numerics.Matrix4x4 rigToContext, out Windows.Foundation.Numerics.Matrix4x4 localToContext, out Windows.Foundation.Numerics.Vector3 contextGravity, out LocationReference[] locationsToAnchors, out Windows.Foundation.Numerics.Matrix4x4[] anchorsToContext);
        void GetHeTDepthData(out Windows.Foundation.Numerics.Matrix4x4 localToContext, out DepthRay[] depths);
        Windows.Mirage.Internal.AnchorStatistics GetAnchorStatistics();
        void GetAppSpatialAnchors(UInt32 processId, out SerializedRigPose[] anchors);
    }

    [uuid(a06a68ef-692d-46e4-9fd9-d6b831ff9e84)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    interface IHumanInternal
    {
        Windows.Mirage.Internal.IPoseInternal MakePoseAtTick(Int64 tick);
        Windows.Mirage.Internal.IPoseInternal MakePoseFromSerializedRigPose(SerializedRigPose serialized);
        void SendRemoteRigPoseAtTick(Int64 tick, UInt64 stamp);
        Single Ipd{ get; };
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct WiFiReading
    {
        UInt64 hash;
        Int16 signalStrength;
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [interface_name("Windows.Mirage.Internal.IWiFiSpaceSample", 1555a31c-6d3b-44dc-94ad-14c526678d87)]
    runtimeclass WiFiSpaceSample
    {
        WiFiSpaceSample();
        Guid Id{ get; };
        Guid SpaceId{ get; };
        Guid Anchor{ get; };
        Guid Fragment{ get; };
        Windows.Foundation.Numerics.Vector3 AnchorToRig{ get; };
        Windows.Foundation.Numerics.Vector3 AnchorToFragment{ get; };
        Windows.Mirage.Internal.WiFiReading[] FingerPrints{ get; };
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct WiFiTestResult
    {
        Guid Id;
        Single Confidence;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(de2b0b81-1467-499c-8f6b-c63213a6da63)]
    interface IWiFiTracking
    {
        event Windows.Foundation.TypedEventHandler <Windows.Mirage.Internal.WiFiTracking, Windows.Mirage.Internal.WiFiSpaceSample>  WiFiTrackingEvent;
        Windows.Foundation.IAsyncOperation <Windows.Mirage.Internal.WiFiSpaceSample>  TakeSampleAsync();
        Windows.Foundation.Collections.IVectorView <Windows.Mirage.Internal.WiFiSpaceSample>  Samples{ get; };
        void TestSample(Guid Id, out WiFiTestResult[] pTestResults);
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass WiFiTracking
        : [default]Windows.Mirage.Internal.IWiFiTracking
    {
        WiFiTracking();
    }


    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Mirage.Internal.IEnvironmentDefinition", 8e468c56-70a7-4722-9cf1-e877faa705d8)]
    runtimeclass EnvironmentDefinition
    {
        Guid Id{ get; };
        String Name{ get; };
        String Name{ set; };
        String Name2{ get; };
        String Name2{ set; };
        Windows.Foundation.IReference <Single>  Confidence{ get; };
        Windows.Foundation.IAsyncAction RefreshConfidence();
        Windows.Foundation.DateTime LastLoaded{ get; };
        Int32 LastLoadResult{ get; };
        UInt64 Size{ get; };
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(375e8fa5-af97-4867-9c3d-d1f0242f52cb)]
    interface IEnvironmentManager
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Mirage.Internal.EnvironmentDefinition> >  GetAvailableEnvironments();
        Windows.Mirage.Internal.EnvironmentDefinition CurrentEnvironment{ get; };
        void DeleteEnvironment(EnvironmentDefinition pEnvironment);
        Windows.Foundation.IAsyncOperation <Windows.Mirage.Internal.EnvironmentDefinition>  CreateEnvironmentAsync();
        Windows.Foundation.IAsyncOperation <Windows.Mirage.Internal.EnvironmentDefinition>  SetEnvironmentAsync(EnvironmentDefinition pEnvironment);
        void SaveEnvironment(EnvironmentDefinition pEnvironment);
        event Windows.Foundation.TypedEventHandler <Windows.Mirage.Internal.IEnvironmentManager, Windows.Mirage.Internal.EnvironmentDefinition>  EnvironmentChanged;
        Boolean CurrentMapLocked{ get; };
        Windows.Foundation.IAsyncAction LockCurrentMap();
        Windows.Foundation.IAsyncAction UnlockCurrentMap();
        Windows.Foundation.IAsyncAction SaveCurrentMap(String filename);
        Windows.Foundation.IAsyncAction LoadMap(String filename, Boolean switchToLoadedMap);
        Windows.Foundation.IAsyncAction DeleteMap(Guid Id);
        Windows.Foundation.IAsyncAction DeleteSpatialNeighborhoodForSpatialAnchors(Windows.Foundation.Collections.IIterable <Windows.Perception.Spatial.SpatialAnchor>  anchors);
        Windows.Foundation.IAsyncAction DeleteSpatialNeighborhoodForAllSpatialAnchors();
        Windows.Foundation.IAsyncAction DeleteAllSpatialStoreData(Windows.Foundation.Collections.IIterable <String>  pFirstPartyPackageFamilyNames);
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass EnvironmentManager
        : [default]Windows.Mirage.Internal.IEnvironmentManager
    {
        EnvironmentManager();
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(f92bd436-a580-4b2c-ac4f-6cd6baf6fa71)]
    interface ISecondaryHeadPose requires Windows.Mirage.Internal.ILocatable
    {
        Windows.Foundation.DateTime Received{ get; };
        UInt64 Stamp{ get; };
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass SecondaryHeadPose
        : [default]Windows.Mirage.Internal.ISecondaryHeadPose
        , Windows.Mirage.Internal.ILocatable
    {
    }

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(5665db94-6a66-44b8-a9ac-fe51a2585bf8)]
    interface ISecondaryHead
    {
        String Device{ get; };
        Windows.Foundation.Numerics.Matrix4x4 RigToHeadTransform{ get; };
        Windows.Foundation.Collections.IIterator <Windows.Mirage.Internal.ISecondaryHeadPose>  Poses{ get; };
        Windows.Mirage.Internal.ISecondaryHeadPose GetCurrentPose();
        Windows.Mirage.Internal.ISecondaryHeadPose GetPoseForStamp(UInt64 stamp);
        Windows.Mirage.Internal.ISecondaryHeadPose GetPoseAtOrBefore(Windows.Foundation.DateTime time);
        Windows.Mirage.Internal.ISecondaryHeadPose GetPoseAfterKnownPose(ISecondaryHeadPose previousPose);
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass SecondaryHead
        : [default]Windows.Mirage.Internal.ISecondaryHead
        , Windows.Foundation.Collections.IIterable<Windows.Mirage.Internal.ISecondaryHeadPose>
    {
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [interface_name("Windows.Mirage.Internal.ISecondaryHeadTracking", 0ae06f4d-8959-42f7-9aa5-14651dc0fb65)]
    runtimeclass SecondaryHeadTracking
        : Windows.Foundation.Collections.IIterable<Windows.Mirage.Internal.ISecondaryHead>
    {
        SecondaryHeadTracking();
        Windows.Mirage.Internal.ISecondaryHead GetSecondaryHead(String device);
    }

    [uuid(41b73b2b-31d9-4385-a5bc-74249a388958)]
    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    interface IDebugPlanarDecomposition
    {
        UInt32[] GetVertexColorization();
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(9c4cdedc-2cd8-4c23-946a-a8e997c67e03)]
    interface IDebugPlane
    {
        UInt32[] GetConvexHull();
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    [uuid(3d608c8d-afcf-4794-a9be-5112d6fe6c67)]
    interface IPositionalLocatorInternal
    {
        Windows.Foundation.Numerics.Matrix4x4 HeadToRigTransform{ get; };
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    enum DisplayType
    {
        LocalStereo,
        RemoteStereo,
        Composited,
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct DisplayRect
    {
        UInt32 Width;
        UInt32 Height;
        UInt32 OffsetX;
        UInt32 OffsetY;
    };

    [contract(Windows.Mirage.Internal.InternalContract, 1)]
    struct RemoteDisplayConfiguration
    {
        String RemoteAddress;
        UInt32 MaxBitrateKbps;
        UInt32 FrameRate;
    };

}
