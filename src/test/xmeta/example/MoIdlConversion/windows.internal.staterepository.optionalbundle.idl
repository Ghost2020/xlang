










namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IOptionalBundleStatics", 8a7191bb-a153-40c0-b325-da50324eee0d)]
    [interface_name("Windows.Internal.StateRepository.IOptionalBundle", f94dd24f-2002-43a9-b2a8-c2d0520cecf4)]
    [threading(both)]
    runtimeclass OptionalBundle
    {
        OptionalBundle();
        static Boolean Exists(Int64 optionalBundleID);
        static Boolean ExistsByMainBundle(Bundle MainBundle);
        static Boolean ExistsByMainBundleAndName(Bundle MainBundle, String Name);
        static Boolean ExistsByMainBundleAndNameAndPublisher(Bundle MainBundle, String Name, String Publisher);
        static Boolean ExistsByName(String Name);
        static Boolean ExistsByNameAndPublisher(String Name, String Publisher);
        static Windows.Internal.StateRepository.OptionalBundle Get(Int64 optionalBundleID);
        static Windows.Internal.StateRepository.OptionalBundle TryGet(Int64 optionalBundleID);
        static Windows.Internal.StateRepository.OptionalBundle GetByMainBundleAndNameAndPublisher(Bundle MainBundle, String Name, String Publisher);
        static Windows.Internal.StateRepository.OptionalBundle TryGetByMainBundleAndNameAndPublisher(Bundle MainBundle, String Name, String Publisher);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundle>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundle>  FindByMainBundle(Bundle MainBundle);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundle>  FindByMainBundleAndName(Bundle MainBundle, String Name);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundle>  FindByName(String Name);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.OptionalBundle>  FindByNameAndPublisher(String Name, String Publisher);
        Int64 _OptionalBundleID{ get; };
        Int64 _OptionalBundleID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 MainBundle{ get; };
        Int64 MainBundle{ set; };
        Windows.Internal.StateRepository.Bundle GetMainBundle();
        void SetMainBundle(Bundle value);
        String Name{ get; };
        String Name{ set; };
        String Publisher{ get; };
        String Publisher{ set; };
        UInt64 Version{ get; };
        UInt64 Version{ set; };
        Boolean IsFilenameNull{ get; };
        void SetFilenameToNull();
        String Filename{ get; };
        String Filename{ set; };
        Windows.Storage.StorageFile GetFilenameAsStorageFile();
        void SetFilenameAsStorageFile(Windows.Storage.IStorageFile value);
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
