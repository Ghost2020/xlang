










namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.StateRepository.INamedDependencyStatics", a11a8611-7d1e-419b-b359-c4438518bb5e)]
    [interface_name("Windows.Internal.StateRepository.INamedDependency", 1f33687a-b979-49e4-b4d5-55bc98ee9d6b)]
    [threading(both)]
    runtimeclass NamedDependency
    {
        NamedDependency();
        static Boolean Exists(Int64 namedDependencyID);
        static Boolean ExistsByPackage(Package Package);
        static Boolean ExistsByPackageAndDependencyType(Package Package, NamedDependencyType DependencyType);
        static Boolean ExistsByPackageAndDependencyTypeAndIndex(Package Package, NamedDependencyType DependencyType, Int32 Index);
        static Windows.Internal.StateRepository.NamedDependency TryGet(Int64 namedDependencyID);
        static Windows.Internal.StateRepository.NamedDependency TryGetByPackageAndDependencyTypeAndIndex(Package Package, NamedDependencyType DependencyType, Int32 Index);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.NamedDependency>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.NamedDependency>  FindByPackage(Package Package);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.NamedDependency>  FindByPackageAndDependencyType(Package Package, NamedDependencyType DependencyType);
        Int64 _NamedDependncyID{ get; };
        Int64 _NamedDependncyID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Windows.Internal.StateRepository.NamedDependencyType DependencyType{ get; };
        Windows.Internal.StateRepository.NamedDependencyType DependencyType{ set; };
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        String Name{ get; };
        String Name{ set; };
        UInt64 Version{ get; };
        UInt64 Version{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
