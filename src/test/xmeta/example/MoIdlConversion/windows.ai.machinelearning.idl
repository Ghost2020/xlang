














namespace Windows.AI.MachineLearning
{
    [contractversion(2)]
    apicontract MachineLearningContract{};

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    enum LearningModelFeatureKind
    {
        Tensor,
        Sequence,
        Map,
        Image,
    };

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [uuid(bc08cf7c-6ed0-4004-97ba-b9a2eecd2b4f)]
    interface ILearningModelFeatureDescriptor
    {
        String Name{ get; };
        String Description{ get; };
        Windows.AI.MachineLearning.LearningModelFeatureKind Kind{ get; };
        Boolean IsRequired{ get; };
    };

    [uuid(2a222e5d-afb1-47ed-bfad-b5b3a459ec04)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    interface ILearningModelOperatorProvider
    {
    };



    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.ILearningModelStatics", e3b977e8-6952-4e47-8ef4-1f7f07897c6d)]
    [interface_name("Windows.AI.MachineLearning.ILearningModel", 5b8e4920-489f-4e86-9128-265a327b78fa)]
    [threading(both)]
    runtimeclass LearningModel
        : Windows.Foundation.IClosable
    {
        [method_name("LoadFromStorageFileAsync")] static Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModel>  LoadFromStorageFileAsync(Windows.Storage.IStorageFile modelFile);
        [method_name("LoadFromStreamAsync")] static Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModel>  LoadFromStreamAsync(Windows.Storage.Streams.IRandomAccessStreamReference modelStream);
        [method_name("LoadFromFilePath")] static Windows.AI.MachineLearning.LearningModel LoadFromFilePath(String filePath);
        [method_name("LoadFromStream")] static Windows.AI.MachineLearning.LearningModel LoadFromStream(Windows.Storage.Streams.IRandomAccessStreamReference modelStream);
        [method_name("LoadFromStorageFileWithOperatorProviderAsync")] static Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModel>  LoadFromStorageFileAsync(Windows.Storage.IStorageFile modelFile, ILearningModelOperatorProvider operatorProvider);
        [method_name("LoadFromStreamWithOperatorProviderAsync")] static Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModel>  LoadFromStreamAsync(Windows.Storage.Streams.IRandomAccessStreamReference modelStream, ILearningModelOperatorProvider operatorProvider);
        [method_name("LoadFromFilePathWithOperatorProvider")] static Windows.AI.MachineLearning.LearningModel LoadFromFilePath(String filePath, ILearningModelOperatorProvider operatorProvider);
        [method_name("LoadFromStreamWithOperatorProvider")] static Windows.AI.MachineLearning.LearningModel LoadFromStream(Windows.Storage.Streams.IRandomAccessStreamReference modelStream, ILearningModelOperatorProvider operatorProvider);
        String Author{ get; };
        String Name{ get; };
        String Domain{ get; };
        String Description{ get; };
        Int64 Version{ get; };
        Windows.Foundation.Collections.IMapView <String, String>  Metadata{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.AI.MachineLearning.ILearningModelFeatureDescriptor>  InputFeatures{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.AI.MachineLearning.ILearningModelFeatureDescriptor>  OutputFeatures{ get; };
    }

    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    enum LearningModelDeviceKind
    {
        Default,
        Cpu,
        DirectX,
        DirectXHighPerformance,
        DirectXMinPower,
    };



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [static_name("Windows.AI.MachineLearning.ILearningModelDeviceStatics", 49f32107-a8bf-42bb-92c7-10b12dc5d21f)]
    [constructor_name("Windows.AI.MachineLearning.ILearningModelDeviceFactory", 9cffd74d-b1e5-4f20-80ad-0a56690db06b)]
    [interface_name("Windows.AI.MachineLearning.ILearningModelDevice", f5c2c8fe-3f56-4a8c-ac5f-fdb92d8b8252)]
    [threading(both)]
    runtimeclass LearningModelDevice
    {
        static Windows.AI.MachineLearning.LearningModelDevice CreateFromDirect3D11Device(Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device);
        [method_name( "Create" )] LearningModelDevice(LearningModelDeviceKind deviceKind);
        Windows.Graphics.DisplayAdapterId AdapterId{ get; };
        Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice Direct3D11Device{ get; };
    }



    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [interface_name("Windows.AI.MachineLearning.ILearningModelEvaluationResult", b2f9bfcd-960e-49c0-8593-eb190ae3eee2)]
    runtimeclass LearningModelEvaluationResult
    {
        String CorrelationId{ get; };
        Int32 ErrorStatus{ get; };
        Boolean Succeeded{ get; };
        Windows.Foundation.Collections.IMapView <String, Object>  Outputs{ get; };
    }


    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
    [dualapipartition(0xa000006)]
    [interface_name("Windows.AI.MachineLearning.ILearningModelSessionOptions", b8f63fa1-134d-5133-8cff-3a5c3c263beb)]
    [threading(both)]
    runtimeclass LearningModelSessionOptions
    {
        LearningModelSessionOptions();
        UInt32 BatchSizeOverride{ get; };
        UInt32 BatchSizeOverride{ set; };
    }


    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [constructor_name("Windows.AI.MachineLearning.ILearningModelBindingFactory", c95f7a7a-e788-475e-8917-23aa381faf0b)]
    [interface_name("Windows.AI.MachineLearning.ILearningModelBinding", ea312f20-168f-4f8c-94fe-2e7ac31b4aa8)]
    [threading(both)]
    runtimeclass LearningModelBinding
        : Windows.Foundation.Collections.IMapView<String, Object>
        , Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Object> >
    {
        [method_name( "CreateFromSession" )] LearningModelBinding(LearningModelSession session);
        [method_name("Bind")] void Bind(String name, Object value);
        [method_name("BindWithProperties")] void Bind(String name, Object value, Windows.Foundation.Collections.IPropertySet props);
        void Clear();
    }


    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [constructor_name("Windows.AI.MachineLearning.ILearningModelSessionFactory", 0f6b881d-1c9b-47b6-bfe0-f1cf62a67579)]
    [interface_name("Windows.AI.MachineLearning.ILearningModelSession", 8e58f8f6-b787-4c11-90f0-7129aeca74a9)]
    [threading(both)]
    runtimeclass LearningModelSession
        : Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [constructor_name("Windows.AI.MachineLearning.ILearningModelSessionFactory2", 4e5c88bf-0a1f-5fec-ade0-2fd91e4ef29b)]
        {
            [method_name( "CreateFromModelOnDeviceWithSessionOptions" )] LearningModelSession(LearningModel model, LearningModelDevice deviceToRunOn, LearningModelSessionOptions learningModelSessionOptions);
        }
        [method_name( "CreateFromModel" )] LearningModelSession(LearningModel model);
        [method_name( "CreateFromModelOnDevice" )] LearningModelSession(LearningModel model, LearningModelDevice deviceToRunOn);
        Windows.AI.MachineLearning.LearningModel Model{ get; };
        Windows.AI.MachineLearning.LearningModelDevice Device{ get; };
        Windows.Foundation.Collections.IPropertySet EvaluationProperties{ get; };
        Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModelEvaluationResult>  EvaluateAsync(LearningModelBinding bindings, String correlationId);
        Windows.Foundation.IAsyncOperation <Windows.AI.MachineLearning.LearningModelEvaluationResult>  EvaluateFeaturesAsync(Windows.Foundation.Collections.IMap <String, Object>  features, String correlationId);
        Windows.AI.MachineLearning.LearningModelEvaluationResult Evaluate(LearningModelBinding bindings, String correlationId);
        Windows.AI.MachineLearning.LearningModelEvaluationResult EvaluateFeatures(Windows.Foundation.Collections.IMap <String, Object>  features, String correlationId);
    }


    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [uuid(f51005db-4085-4dfe-9fed-95eb0c0cf75c)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    interface ILearningModelFeatureValue
    {
        Windows.AI.MachineLearning.LearningModelFeatureKind Kind{ get; };
    };



    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    enum TensorKind
    {
        Undefined,
        Float,
        UInt8,
        Int8,
        UInt16,
        Int16,
        Int32,
        Int64,
        String,
        Boolean,
        Float16,
        Double,
        UInt32,
        UInt64,
        Complex64,
        Complex128,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [interface_name("Windows.AI.MachineLearning.IMapFeatureDescriptor", 530424bd-a257-436d-9e60-c2981f7cc5c4)]
    runtimeclass MapFeatureDescriptor
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor
    {
        Windows.AI.MachineLearning.TensorKind KeyKind{ get; };
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor ValueDescriptor{ get; };
    }


    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.AI.MachineLearning.ISequenceFeatureDescriptor", 84f6945a-562b-4d62-a851-739aced96668)]
    runtimeclass SequenceFeatureDescriptor
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor
    {
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor ElementDescriptor{ get; };
    }


    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [interface_name("Windows.AI.MachineLearning.ITensorFeatureDescriptor", 74455c80-946a-4310-a19c-ee0af028fce4)]
    runtimeclass TensorFeatureDescriptor
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor
    {
        Windows.AI.MachineLearning.TensorKind TensorKind{ get; };
        Windows.Foundation.Collections.IVectorView <Int64>  Shape{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [interface_name("Windows.AI.MachineLearning.IImageFeatureDescriptor", 365585a5-171a-4a2a-985f-265159d3895a)]
    runtimeclass ImageFeatureDescriptor
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ILearningModelFeatureDescriptor
    {
        Windows.Graphics.Imaging.BitmapPixelFormat BitmapPixelFormat{ get; };
        Windows.Graphics.Imaging.BitmapAlphaMode BitmapAlphaMode{ get; };
        UInt32 Width{ get; };
        UInt32 Height{ get; };
    }

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [uuid(05489593-a305-4a25-ad09-440119b4b7f6)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    interface ITensor requires Windows.AI.MachineLearning.ILearningModelFeatureValue
    {
        Windows.AI.MachineLearning.TensorKind TensorKind{ get; };
        Windows.Foundation.Collections.IVectorView <Int64>  Shape{ get; };
    };



    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [static_name("Windows.AI.MachineLearning.ITensorFloatStatics", dbcd395b-3ba3-452f-b10d-3c135e573fa9)]
    [interface_name("Windows.AI.MachineLearning.ITensorFloat", f2282d82-aa02-42c8-a0c8-df1efc9676e1)]
    [threading(both)]
    runtimeclass TensorFloat
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {
        [method_name("Create")] static Windows.AI.MachineLearning.TensorFloat Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorFloat Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorFloat CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Single[] data);
        static Windows.AI.MachineLearning.TensorFloat CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Single>  data);

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorFloatStatics2", 24610bc1-5e44-5713-b281-8f4ad4d555e8)]
        {
            static Windows.AI.MachineLearning.TensorFloat CreateFromShapeArrayAndDataArray(Int64[] shape, Single[] data);
            static Windows.AI.MachineLearning.TensorFloat CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        Windows.Foundation.Collections.IVectorView <Single>  GetAsVectorView();
    }




    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [static_name("Windows.AI.MachineLearning.ITensorFloat16BitStatics", a52db6f5-318a-44d4-820b-0cdc7054a84a)]
    [interface_name("Windows.AI.MachineLearning.ITensorFloat16Bit", 0ab994fc-5b89-4c3c-b5e4-5282a5316c0a)]
    [threading(both)]
    runtimeclass TensorFloat16Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {
        [method_name("Create")] static Windows.AI.MachineLearning.TensorFloat16Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorFloat16Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorFloat16Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Single[] data);
        static Windows.AI.MachineLearning.TensorFloat16Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Single>  data);

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorFloat16BitStatics2", 68545726-2dc7-51bf-b470-0b344cc2a1bc)]
        {
            static Windows.AI.MachineLearning.TensorFloat16Bit CreateFromShapeArrayAndDataArray(Int64[] shape, Single[] data);
            static Windows.AI.MachineLearning.TensorFloat16Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        Windows.Foundation.Collections.IVectorView <Single>  GetAsVectorView();
    }




    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.ITensorUInt8BitStatics", 05f67583-bc24-4220-8a41-2dcd8c5ed33c)]
    [interface_name("Windows.AI.MachineLearning.ITensorUInt8Bit", 58e1ae27-622b-48e3-be22-d867aed1daac)]
    [threading(both)]
    runtimeclass TensorUInt8Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorUInt8BitStatics2", 2ba042d6-373e-5a3a-a2fc-a6c41bd52789)]
        {
            static Windows.AI.MachineLearning.TensorUInt8Bit CreateFromShapeArrayAndDataArray(Int64[] shape, UInt8[] data);
            static Windows.AI.MachineLearning.TensorUInt8Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorUInt8Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorUInt8Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorUInt8Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, UInt8[] data);
        static Windows.AI.MachineLearning.TensorUInt8Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <UInt8>  data);
        Windows.Foundation.Collections.IVectorView <UInt8>  GetAsVectorView();
    }




    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [static_name("Windows.AI.MachineLearning.ITensorInt8BitStatics", b1a12284-095c-4c76-a661-ac4cee1f3e8b)]
    [interface_name("Windows.AI.MachineLearning.ITensorInt8Bit", cddd97c5-ffd8-4fef-aefb-30e1a485b2ee)]
    [threading(both)]
    runtimeclass TensorInt8Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {
        [method_name("Create")] static Windows.AI.MachineLearning.TensorInt8Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorInt8Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorInt8Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, UInt8[] data);
        static Windows.AI.MachineLearning.TensorInt8Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <UInt8>  data);

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorInt8BitStatics2", c0d59637-c468-56fb-9535-c052bdb93dc0)]
        {
            static Windows.AI.MachineLearning.TensorInt8Bit CreateFromShapeArrayAndDataArray(Int64[] shape, UInt8[] data);
            static Windows.AI.MachineLearning.TensorInt8Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        Windows.Foundation.Collections.IVectorView <UInt8>  GetAsVectorView();
    }




    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [marshaling_behavior(agile)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [static_name("Windows.AI.MachineLearning.ITensorUInt16BitStatics", 5df745dd-028a-481a-a27c-c7e6435e52dd)]
    [interface_name("Windows.AI.MachineLearning.ITensorUInt16Bit", 68140f4b-23c0-42f3-81f6-a891c011bc3f)]
    [threading(both)]
    runtimeclass TensorUInt16Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorUInt16BitStatics2", 8af40c64-d69f-5315-9348-490877bbd642)]
        {
            static Windows.AI.MachineLearning.TensorUInt16Bit CreateFromShapeArrayAndDataArray(Int64[] shape, UInt16[] data);
            static Windows.AI.MachineLearning.TensorUInt16Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorUInt16Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorUInt16Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorUInt16Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, UInt16[] data);
        static Windows.AI.MachineLearning.TensorUInt16Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <UInt16>  data);
        Windows.Foundation.Collections.IVectorView <UInt16>  GetAsVectorView();
    }




    [dualapipartition(0xa000006)]
    [marshaling_behavior(agile)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [static_name("Windows.AI.MachineLearning.ITensorInt16BitStatics", 98646293-266e-4b1a-821f-e60d70898b91)]
    [interface_name("Windows.AI.MachineLearning.ITensorInt16Bit", 98a32d39-e6d6-44af-8afa-baebc44dc020)]
    [threading(both)]
    runtimeclass TensorInt16Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {
        [method_name("Create")] static Windows.AI.MachineLearning.TensorInt16Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorInt16Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorInt16Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Int16[] data);
        static Windows.AI.MachineLearning.TensorInt16Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Int16>  data);

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorInt16BitStatics2", 0cd70cf4-696c-5e5f-95d8-5ebf9670148b)]
        {
            static Windows.AI.MachineLearning.TensorInt16Bit CreateFromShapeArrayAndDataArray(Int64[] shape, Int16[] data);
            static Windows.AI.MachineLearning.TensorInt16Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        Windows.Foundation.Collections.IVectorView <Int16>  GetAsVectorView();
    }




    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [static_name("Windows.AI.MachineLearning.ITensorUInt32BitStatics", 417c3837-e773-4378-8e7f-0cc33dbea697)]
    [interface_name("Windows.AI.MachineLearning.ITensorUInt32Bit", d8c9c2ff-7511-45a3-bfac-c38f370d2237)]
    [threading(both)]
    runtimeclass TensorUInt32Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorUInt32BitStatics2", ef1a1f1c-314e-569d-b496-5c8447d20cd2)]
        {
            static Windows.AI.MachineLearning.TensorUInt32Bit CreateFromShapeArrayAndDataArray(Int64[] shape, UInt32[] data);
            static Windows.AI.MachineLearning.TensorUInt32Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorUInt32Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorUInt32Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorUInt32Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, UInt32[] data);
        static Windows.AI.MachineLearning.TensorUInt32Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <UInt32>  data);
        Windows.Foundation.Collections.IVectorView <UInt32>  GetAsVectorView();
    }




    [feature(Velocity_AlwaysAlwaysEnabled)]
    [dualapipartition(0xa000006)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.ITensorInt32BitStatics", 6539864b-52fa-4e35-907c-834cac417b50)]
    [interface_name("Windows.AI.MachineLearning.ITensorInt32Bit", 2c0c28d3-207c-4486-a7d2-884522c5e589)]
    [threading(both)]
    runtimeclass TensorInt32Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {
        [method_name("Create")] static Windows.AI.MachineLearning.TensorInt32Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorInt32Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorInt32Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Int32[] data);
        static Windows.AI.MachineLearning.TensorInt32Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Int32>  data);

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorInt32BitStatics2", 7c4b079a-e956-5ce0-a3bd-157d9d79b5ec)]
        {
            static Windows.AI.MachineLearning.TensorInt32Bit CreateFromShapeArrayAndDataArray(Int64[] shape, Int32[] data);
            static Windows.AI.MachineLearning.TensorInt32Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        Windows.Foundation.Collections.IVectorView <Int32>  GetAsVectorView();
    }




    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [static_name("Windows.AI.MachineLearning.ITensorUInt64BitStatics", 7a7e20eb-242f-47cb-a9c6-f602ecfbfee4)]
    [interface_name("Windows.AI.MachineLearning.ITensorUInt64Bit", 2e70ffad-04bf-4825-839a-82baef8c7886)]
    [threading(both)]
    runtimeclass TensorUInt64Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorUInt64BitStatics2", 085a687d-67e1-5b1e-b232-4fabe9ca20b3)]
        {
            static Windows.AI.MachineLearning.TensorUInt64Bit CreateFromShapeArrayAndDataArray(Int64[] shape, UInt64[] data);
            static Windows.AI.MachineLearning.TensorUInt64Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorUInt64Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorUInt64Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorUInt64Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, UInt64[] data);
        static Windows.AI.MachineLearning.TensorUInt64Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <UInt64>  data);
        Windows.Foundation.Collections.IVectorView <UInt64>  GetAsVectorView();
    }




    [dualapipartition(0xa000006)]
    [marshaling_behavior(agile)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [static_name("Windows.AI.MachineLearning.ITensorInt64BitStatics", 9648ad9d-1198-4d74-9517-783ab62b9cc2)]
    [interface_name("Windows.AI.MachineLearning.ITensorInt64Bit", 499665ba-1fa2-45ad-af25-a0bd9bda4c87)]
    [threading(both)]
    runtimeclass TensorInt64Bit
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorInt64BitStatics2", 6d3d9dcb-ff40-5ec2-89fe-084e2b6bc6db)]
        {
            static Windows.AI.MachineLearning.TensorInt64Bit CreateFromShapeArrayAndDataArray(Int64[] shape, Int64[] data);
            static Windows.AI.MachineLearning.TensorInt64Bit CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorInt64Bit Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorInt64Bit Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorInt64Bit CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Int64[] data);
        static Windows.AI.MachineLearning.TensorInt64Bit CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Int64>  data);
        Windows.Foundation.Collections.IVectorView <Int64>  GetAsVectorView();
    }




    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [static_name("Windows.AI.MachineLearning.ITensorBooleanStatics", 2796862c-2357-49a7-b476-d0aa3dfe6866)]
    [interface_name("Windows.AI.MachineLearning.ITensorBoolean", 50f311ed-29e9-4a5c-a44d-8fc512584eed)]
    [threading(both)]
    runtimeclass TensorBoolean
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorBooleanStatics2", a3a4a501-6a2d-52d7-b04b-c435baee0115)]
        {
            static Windows.AI.MachineLearning.TensorBoolean CreateFromShapeArrayAndDataArray(Int64[] shape, Boolean[] data);
            static Windows.AI.MachineLearning.TensorBoolean CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorBoolean Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorBoolean Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorBoolean CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Boolean[] data);
        static Windows.AI.MachineLearning.TensorBoolean CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Boolean>  data);
        Windows.Foundation.Collections.IVectorView <Boolean>  GetAsVectorView();
    }




    [dualapipartition(0xa000006)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.ITensorDoubleStatics", a86693c5-9538-44e7-a3ca-5df374a5a70c)]
    [interface_name("Windows.AI.MachineLearning.ITensorDouble", 91e41252-7a8f-4f0e-a28f-9637ffc8a3d0)]
    [threading(both)]
    runtimeclass TensorDouble
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorDoubleStatics2", 93a570de-5e9a-5094-85c8-592c655e68ac)]
        {
            static Windows.AI.MachineLearning.TensorDouble CreateFromShapeArrayAndDataArray(Int64[] shape, Double[] data);
            static Windows.AI.MachineLearning.TensorDouble CreateFromBuffer(Int64[] shape, Windows.Storage.Streams.IBuffer buffer);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorDouble Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorDouble Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorDouble CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, Double[] data);
        static Windows.AI.MachineLearning.TensorDouble CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <Double>  data);
        Windows.Foundation.Collections.IVectorView <Double>  GetAsVectorView();
    }




    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.ITensorStringStatics", 83623324-cf26-4f17-a2d4-20ef8d097d53)]
    [interface_name("Windows.AI.MachineLearning.ITensorString", 582335c8-bdb1-4610-bc75-35e9cbf009b7)]
    [threading(both)]
    runtimeclass TensorString
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ITensor
        , Windows.AI.MachineLearning.ILearningModelFeatureValue
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IMemoryBuffer
        , [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        Windows.Foundation.IClosable
    {

        [contract(Windows.AI.MachineLearning.MachineLearningContract, 2)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.AI.MachineLearning.ITensorStringStatics2", 9e355ed0-c8e2-5254-9137-0193a3668fd8)]
        {
            static Windows.AI.MachineLearning.TensorString CreateFromShapeArrayAndDataArray(Int64[] shape, String[] data);
        }
        [method_name("Create")] static Windows.AI.MachineLearning.TensorString Create();
        [method_name("Create2")] static Windows.AI.MachineLearning.TensorString Create(Windows.Foundation.Collections.IIterable <Int64>  shape);
        static Windows.AI.MachineLearning.TensorString CreateFromArray(Windows.Foundation.Collections.IIterable <Int64>  shape, String[] data);
        static Windows.AI.MachineLearning.TensorString CreateFromIterable(Windows.Foundation.Collections.IIterable <Int64>  shape, Windows.Foundation.Collections.IIterable <String>  data);
        Windows.Foundation.Collections.IVectorView <String>  GetAsVectorView();
    }




    [contract(Windows.AI.MachineLearning.MachineLearningContract, 1)]
    [dualapipartition(0xa000006)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [static_name("Windows.AI.MachineLearning.IImageFeatureValueStatics", 1bc317fd-23cb-4610-b085-c8e1c87ebaa0)]
    [interface_name("Windows.AI.MachineLearning.IImageFeatureValue", f0414fd9-c9aa-4405-b7fb-94f87c8a3037)]
    [threading(both)]
    runtimeclass ImageFeatureValue
        : [feature(Velocity_AlwaysAlwaysEnabled)]
        Windows.AI.MachineLearning.ILearningModelFeatureValue
    {
        static Windows.AI.MachineLearning.ImageFeatureValue CreateFromVideoFrame(Windows.Media.VideoFrame image);
        Windows.Media.VideoFrame VideoFrame{ get; };
    }

}
