










namespace Windows.Internal.StateRepository
{
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [static_name("Windows.Internal.StateRepository.IApplicationPropertyStatics", 7fe36c7d-c0d2-4ed2-970c-95f671367f20)]
    [interface_name("Windows.Internal.StateRepository.IApplicationProperty", 98945040-9374-4e98-a1ce-0ad51d7a1db7)]
    [threading(both)]
    runtimeclass ApplicationProperty
    {
        static Boolean Exists(Int64 applicationPropertyID);
        static Boolean ExistsByApplication(Application Application);
        static Boolean ExistsByApplicationAndIndex(Application Application, Int32 Index);
        static Boolean ExistsByApplicationAndName(Application Application, String Name);
        static Boolean ExistsByName(String Name);
        static Windows.Internal.StateRepository.ApplicationProperty Get(Int64 applicationPropertyID);
        static Windows.Internal.StateRepository.ApplicationProperty TryGet(Int64 applicationPropertyID);
        static Windows.Internal.StateRepository.ApplicationProperty GetByApplicationAndIndex(Application Application, Int32 Index);
        static Windows.Internal.StateRepository.ApplicationProperty TryGetByApplicationAndIndex(Application Application, Int32 Index);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationProperty>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationProperty>  FindByApplication(Application Application);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationProperty>  FindByApplicationAndName(Application Application, String Name);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationProperty>  FindByName(String Name);
        static Boolean ExistsByUserAndName(User user, String name);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationProperty>  FindByUserAndName(User user, String name);
        ApplicationProperty();
        Int64 _ApplicationPropertyID{ get; };
        Int64 _ApplicationPropertyID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Application{ get; };
        Int64 Application{ set; };
        Windows.Internal.StateRepository.Application GetApplication();
        void SetApplication(Application value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        String Name{ get; };
        String Name{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
