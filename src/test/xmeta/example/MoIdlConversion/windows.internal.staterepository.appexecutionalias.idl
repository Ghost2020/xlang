












namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IAppExecutionAliasStatics", a57a3292-5932-4672-b3f0-475a6e388a08)]
    [interface_name("Windows.Internal.StateRepository.IAppExecutionAlias", 61417514-733d-4ab2-be4c-c7f748d5280f)]
    [threading(both)]
    runtimeclass AppExecutionAlias
    {
        AppExecutionAlias();
        static Boolean Exists(Int64 appExecutionAliasID);
        static Boolean ExistsByAlias(String Alias);
        static Boolean ExistsByAliasAndExtension(String Alias, ApplicationExtension Extension);
        static Boolean ExistsByExtension(ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppExecutionAlias Get(Int64 appExecutionAliasID);
        static Windows.Internal.StateRepository.AppExecutionAlias TryGet(Int64 appExecutionAliasID);
        static Windows.Internal.StateRepository.AppExecutionAlias GetByAliasAndExtension(String Alias, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppExecutionAlias TryGetByAliasAndExtension(String Alias, ApplicationExtension Extension);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  FindByAlias(String Alias);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  FindByExtension(ApplicationExtension Extension);
        static Boolean ExistsByUserAndAlias(User User, String alias);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  FindByUserAndAlias(User User, String alias);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  FindByUserAndApplicationUserModelId(User User, String applicationUserModelId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppExecutionAlias>  FindByUserAndAliasAndNotDisabled_SortedByEnabledAndInstallTime(User User, String alias);
        Int64 _AppExecutionAliasID{ get; };
        Int64 _AppExecutionAliasID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        String Alias{ get; };
        String Alias{ set; };
        Windows.Storage.StorageFile GetAliasAsStorageFile();
        void SetAliasAsStorageFile(Windows.Storage.IStorageFile value);
        Int64 Extension{ get; };
        Int64 Extension{ set; };
        Windows.Internal.StateRepository.ApplicationExtension GetExtension();
        void SetExtension(ApplicationExtension value);
        Windows.Internal.StateRepository.AppExecutionAliasFlags Flags{ get; };
        Windows.Internal.StateRepository.AppExecutionAliasFlags Flags{ set; };
        Boolean AllowOverride{ get; };
        Boolean AllowOverride{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
