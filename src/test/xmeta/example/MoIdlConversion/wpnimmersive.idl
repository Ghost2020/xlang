












namespace Windows.UI.Notifications
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NotificationSetting
    {
        Enabled,
        DisabledForApplication,
        DisabledForUser,
        DisabledByGroupPolicy,
        DisabledByManifest,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ToastDismissalReason
    {
        UserCanceled,
        ApplicationHidden,
        TimedOut,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum BadgeTemplateType
    {
        BadgeGlyph,
        BadgeNumber,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum TileFlyoutTemplateType
    {
        TileFlyoutTemplate01,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum TileTemplateType
    {
        [deprecated("TileSquareImage may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Image.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareImage,
        [deprecated("TileSquareBlock may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Block.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareBlock,
        [deprecated("TileSquareText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Text01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareText01,
        [deprecated("TileSquareText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Text02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareText02,
        [deprecated("TileSquareText03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Text03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareText03,
        [deprecated("TileSquareText04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150Text04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquareText04,
        [deprecated("TileSquarePeekImageAndText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150PeekImageAndText01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquarePeekImageAndText01,
        [deprecated("TileSquarePeekImageAndText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150PeekImageAndText02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquarePeekImageAndText02,
        [deprecated("TileSquarePeekImageAndText03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150PeekImageAndText03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquarePeekImageAndText03,
        [deprecated("TileSquarePeekImageAndText04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileSquare150x150PeekImageAndText04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileSquarePeekImageAndText04,
        [deprecated("TileWideImage may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Image.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideImage,
        [deprecated("TileWideImageCollection may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150ImageCollection.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideImageCollection,
        [deprecated("TileWideImageAndText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150ImageAndText01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideImageAndText01,
        [deprecated("TileWideImageAndText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150ImageAndText02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideImageAndText02,
        [deprecated("TileWideBlockAndText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150BlockAndText01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideBlockAndText01,
        [deprecated("TileWideBlockAndText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150BlockAndText02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideBlockAndText02,
        [deprecated("TileWidePeekImageCollection01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection01,
        [deprecated("TileWidePeekImageCollection02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection02,
        [deprecated("TileWidePeekImageCollection03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection03,
        [deprecated("TileWidePeekImageCollection04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection04,
        [deprecated("TileWidePeekImageCollection05 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection05.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection05,
        [deprecated("TileWidePeekImageCollection06 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageCollection06.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageCollection06,
        [deprecated("TileWidePeekImageAndText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageAndText01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageAndText01,
        [deprecated("TileWidePeekImageAndText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImageAndText02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImageAndText02,
        [deprecated("TileWidePeekImage01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage01,
        [deprecated("TileWidePeekImage02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage02,
        [deprecated("TileWidePeekImage03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage03,
        [deprecated("TileWidePeekImage04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage04,
        [deprecated("TileWidePeekImage05 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage05.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage05,
        [deprecated("TileWidePeekImage06 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150PeekImage06.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWidePeekImage06,
        [deprecated("TileWideSmallImageAndText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150SmallImageAndText01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideSmallImageAndText01,
        [deprecated("TileWideSmallImageAndText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150SmallImageAndText02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideSmallImageAndText02,
        [deprecated("TileWideSmallImageAndText03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150SmallImageAndText03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideSmallImageAndText03,
        [deprecated("TileWideSmallImageAndText04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150SmallImageAndText04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideSmallImageAndText04,
        [deprecated("TileWideSmallImageAndText05 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150SmallImageAndText05.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideSmallImageAndText05,
        [deprecated("TileWideText01 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text01.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText01,
        [deprecated("TileWideText02 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text02.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText02,
        [deprecated("TileWideText03 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text03.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText03,
        [deprecated("TileWideText04 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text04.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText04,
        [deprecated("TileWideText05 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text05.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText05,
        [deprecated("TileWideText06 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text06.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText06,
        [deprecated("TileWideText07 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text07.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText07,
        [deprecated("TileWideText08 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text08.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText08,
        [deprecated("TileWideText09 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text09.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText09,
        [deprecated("TileWideText10 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text10.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText10,
        [deprecated("TileWideText11 may be altered or unavailable for releases after Windows 8.1. Instead, use TileWide310x150Text11.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        TileWideText11,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Image = 0,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Block,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Text01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Text02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Text03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150Text04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150PeekImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150PeekImageAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150PeekImageAndText03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150PeekImageAndText04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Image,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150ImageCollection,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150ImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150ImageAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150BlockAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150BlockAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageCollection06,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImageAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150PeekImage06,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150SmallImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150SmallImageAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150SmallImageAndText03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150SmallImageAndText04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150SmallImageAndText05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text06,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text07,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text08,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text09,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text10,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150Text11,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310BlockAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310BlockAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Image,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageAndTextOverlay01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageAndTextOverlay02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageAndTextOverlay03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageCollectionAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageCollectionAndText02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310ImageCollection,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImagesAndTextList01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImagesAndTextList02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImagesAndTextList03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImagesAndTextList04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text04,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text06,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text07,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text08,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310TextList01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310TextList02,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310TextList03,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImageAndText01,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310SmallImagesAndTextList05,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare310x310Text09,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare71x71IconWithBadge,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare150x150IconWithBadge,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileWide310x150IconWithBadgeAndText,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileSquare71x71Image,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        TileTall150x310Image,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ToastTemplateType
    {
        ToastImageAndText01,
        ToastImageAndText02,
        ToastImageAndText03,
        ToastImageAndText04,
        ToastText01,
        ToastText02,
        ToastText03,
        ToastText04,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PeriodicUpdateRecurrence
    {
        HalfHour,
        Hour,
        SixHours,
        TwelveHours,
        Daily,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ToastHistoryChangedType
    {
        Cleared,
        Removed,
        Expired,
        Added,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum AdaptiveNotificationContentKind
    {
        Text,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum NotificationMirroring
    {
        Allowed,
        Disabled,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum NotificationKinds
    {
        Unknown,
        Toast,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum UserNotificationChangedKind
    {
        Added,
        Removed,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum NotificationUpdateResult
    {
        Succeeded,
        Failed,
        NotificationNotFound,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum ToastNotificationPriority
    {
        Default,
        High,
    };

}
namespace Windows.UI.Notifications.Internal
{
    [contractversion(1)]
    [internal]
    apicontract WpnInternalContract{};

    [uuid(5fe5cea6-f3a6-4907-9ee8-0644180a206b)]
    [contract(Windows.UI.Notifications.Internal.WpnInternalContract, 1)]
    interface IPostNotification
    {
        void PostWithId(String appId, Windows.System.User user);
    };

    [uuid(08db8818-c4aa-5080-abae-64410d690f75)]
    [contract(Windows.UI.Notifications.Internal.WpnInternalContract, 1)]
    interface IToastNotificationInternal
    {
        void HideInternalWithId(String appId, Windows.System.User user);
        String CorrelationVector{ get; };
    };

    [uuid(80e31acc-b92b-51b8-910a-ca29f70a4c4a)]
    [contract(Windows.UI.Notifications.Internal.WpnInternalContract, 1)]
    interface ITileUpdaterInternal
    {
        String AppUserModelId{ get; };
    };


}
namespace Windows.UI.Notifications
{
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.INotificationVisual", 68835b8e-aa56-4e11-86d3-5f9a6957bc5b)]
    runtimeclass NotificationVisual
    {
        String Language{ get; };
        String Language{ set; };
        Windows.Foundation.Collections.IVector <Windows.UI.Notifications.NotificationBinding>  Bindings{ get; };
        Windows.UI.Notifications.NotificationBinding GetBinding(String templateName);
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.INotification", 108037fe-eb76-4f82-97bc-da07530a2e20)]
    [threading(both)]
    runtimeclass Notification
    {
        Notification();
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.UI.Notifications.NotificationVisual Visual{ get; };
        Windows.UI.Notifications.NotificationVisual Visual{ set; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.IAdaptiveNotificationText", 46d4a3be-609a-4326-a40b-bfde872034a3)]
    [threading(both)]
    runtimeclass AdaptiveNotificationText
        : Windows.UI.Notifications.IAdaptiveNotificationContent
    {
        AdaptiveNotificationText();
        String Text{ get; };
        String Text{ set; };
        String Language{ get; };
        String Language{ set; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.UI.Notifications.INotificationBinding", f29e4b85-0370-4ad3-b4ea-da9e35e7eabf)]
    runtimeclass NotificationBinding
    {
        String Template{ get; };
        String Template{ set; };
        String Language{ get; };
        String Language{ set; };
        Windows.Foundation.Collections.IMap <String, String>  Hints{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.AdaptiveNotificationText>  GetTextElements();
    }

    [uuid(eb0dbe66-7448-448d-9db8-d78acd2abba9)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    interface IAdaptiveNotificationContent
    {
        Windows.UI.Notifications.AdaptiveNotificationContentKind Kind{ get; };
        Windows.Foundation.Collections.IMap <String, String>  Hints{ get; };
    };



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.Notifications.ITileNotificationFactory", c6abdd6e-4928-46c8-bdbf-81a047dea0d4)]
    [interface_name("Windows.UI.Notifications.ITileNotification", ebaec8fa-50ec-4c18-b4d0-3af02e5540ab)]
    [threading(mta)]
    runtimeclass TileNotification
    {
        [method_name( "CreateTileNotification" )] TileNotification(Windows.Data.Xml.Dom.XmlDocument content);
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
        String Tag{ set; };
        String Tag{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.UI.Notifications.IScheduledTileNotificationFactory", 3383138a-98c0-4c3b-bbd6-4a633c7cfc29)]
    [interface_name("Windows.UI.Notifications.IScheduledTileNotification", 0abca6d5-99dc-4c78-a11c-c9e7f86d7ef7)]
    [threading(mta)]
    runtimeclass ScheduledTileNotification
    {
        [method_name( "CreateScheduledTileNotification" )] ScheduledTileNotification(Windows.Data.Xml.Dom.XmlDocument content, Windows.Foundation.DateTime deliveryTime);
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.DateTime DeliveryTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
        String Tag{ set; };
        String Tag{ get; };
        String Id{ set; };
        String Id{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.ITileUpdater", 0942a48b-1d91-44ec-9243-c1e821c29a20)]
    runtimeclass TileUpdater
    {
        void Update(TileNotification notification);
        void Clear();
        void EnableNotificationQueue(Boolean enable);
        Windows.UI.Notifications.NotificationSetting Setting{ get; };
        void AddToSchedule(ScheduledTileNotification scheduledTile);
        void RemoveFromSchedule(ScheduledTileNotification scheduledTile);
        Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.ScheduledTileNotification>  GetScheduledTileNotifications();
        [method_name("StartPeriodicUpdate")] void StartPeriodicUpdate(Windows.Foundation.Uri tileContent, PeriodicUpdateRecurrence requestedInterval);
        [method_name("StartPeriodicUpdateAtTime")] void StartPeriodicUpdate(Windows.Foundation.Uri tileContent, Windows.Foundation.DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
        void StopPeriodicUpdate();
        [method_name("StartPeriodicUpdateBatch")] void StartPeriodicUpdateBatch(Windows.Foundation.Collections.IIterable <Windows.Foundation.Uri>  tileContents, PeriodicUpdateRecurrence requestedInterval);
        [method_name("StartPeriodicUpdateBatchAtTime")] void StartPeriodicUpdateBatch(Windows.Foundation.Collections.IIterable <Windows.Foundation.Uri>  tileContents, Windows.Foundation.DateTime startTime, PeriodicUpdateRecurrence requestedInterval);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.Notifications.ITileUpdater2", a2266e12-15ee-43ed-83f5-65b352bb1a84)]
        {
            void EnableNotificationQueueForSquare150x150(Boolean enable);
            void EnableNotificationQueueForWide310x150(Boolean enable);
            void EnableNotificationQueueForSquare310x310(Boolean enable);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.UI.Notifications.ITileUpdateManagerForUser", 55141348-2ee2-4e2d-9cc1-216a20decc9f)]
    runtimeclass TileUpdateManagerForUser
    {
        [method_name("CreateTileUpdaterForApplication")] Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplicationForUser();
        [method_name("CreateTileUpdaterForApplicationWithId")] Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplication(String applicationId);
        Windows.UI.Notifications.TileUpdater CreateTileUpdaterForSecondaryTile(String tileId);
        Windows.System.User User{ get; };
    }






    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.UI.Notifications.ITileFlyoutNotificationFactory", ef556ff5-5226-4f2b-b278-88a35dfe569f)]
    [interface_name("Windows.UI.Notifications.ITileFlyoutNotification", 9a53b261-c70c-42be-b2f3-f42aa97d34e5)]
    [threading(mta)]
    runtimeclass TileFlyoutNotification
    {
        [method_name( "CreateTileFlyoutNotification" )] TileFlyoutNotification(Windows.Data.Xml.Dom.XmlDocument content);
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
    }

    [marshaling_behavior(standard)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.UI.Notifications.ITileFlyoutUpdater", 8d40c76a-c465-4052-a740-5c2654c1a089)]
    runtimeclass TileFlyoutUpdater
    {
        void Update(TileFlyoutNotification notification);
        void Clear();
        [method_name("StartPeriodicUpdate")] void StartPeriodicUpdate(Windows.Foundation.Uri tileFlyoutContent, PeriodicUpdateRecurrence requestedInterval);
        [method_name("StartPeriodicUpdateAtTime")] void StartPeriodicUpdate(Windows.Foundation.Uri tileFlyoutContent, Windows.Foundation.DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
        void StopPeriodicUpdate();
        Windows.UI.Notifications.NotificationSetting Setting{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.Notifications.IBadgeNotificationFactory", edf255ce-0618-4d59-948a-5a61040c52f9)]
    [interface_name("Windows.UI.Notifications.IBadgeNotification", 075cb4ca-d08a-4e2f-9233-7e289c1f7722)]
    [threading(mta)]
    runtimeclass BadgeNotification
    {
        [method_name( "CreateBadgeNotification" )] BadgeNotification(Windows.Data.Xml.Dom.XmlDocument content);
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.UI.Notifications.IBadgeUpdater", b5fa1fd4-7562-4f6c-bfa3-1b6ed2e57f2f)]
    runtimeclass BadgeUpdater
    {
        void Update(BadgeNotification notification);
        void Clear();
        [method_name("StartPeriodicUpdate")] void StartPeriodicUpdate(Windows.Foundation.Uri badgeContent, PeriodicUpdateRecurrence requestedInterval);
        [method_name("StartPeriodicUpdateAtTime")] void StartPeriodicUpdate(Windows.Foundation.Uri badgeContent, Windows.Foundation.DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
        void StopPeriodicUpdate();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.UI.Notifications.IBadgeUpdateManagerForUser", 996b21bc-0386-44e5-ba8d-0c1077a62e92)]
    runtimeclass BadgeUpdateManagerForUser
    {
        [method_name("CreateBadgeUpdaterForApplication")] Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForApplication();
        [method_name("CreateBadgeUpdaterForApplicationWithId")] Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForApplication(String applicationId);
        Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String tileId);
        Windows.System.User User{ get; };
    }




    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.Notifications.IToastNotificationFactory", 04124b20-82c6-4229-b109-fd9ed4662b53)]
    [interface_name("Windows.UI.Notifications.IToastNotification", 997e2675-059e-4e60-8b06-1760917c8b80)]
    [threading(mta)]
    runtimeclass ToastNotification
    {
        [method_name( "CreateToastNotification" )] ToastNotification(Windows.Data.Xml.Dom.XmlDocument content);

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [feature(Velocity_SometimesAlwaysDisabled)]
        [static_name("Windows.UI.Notifications.IToastNotificationDefaultConstructorStatics", bf9a73bc-f94d-4d64-b19c-29ccbd191fa0)]
        {
            [method_name("DefaultToastNotificationConstructor")] static Windows.UI.Notifications.ToastNotification DefaultToastNotificationConstructor();
        }
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.UI.Notifications.ToastNotification, Windows.UI.Notifications.ToastDismissedEventArgs>  Dismissed;
        event Windows.Foundation.TypedEventHandler <Windows.UI.Notifications.ToastNotification, Object>  Activated;
        event Windows.Foundation.TypedEventHandler <Windows.UI.Notifications.ToastNotification, Windows.UI.Notifications.ToastFailedEventArgs>  Failed;

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.Notifications.IToastNotification2", 9dfb9fd1-143a-490e-90bf-b9fba7132de7)]
        {
            String Tag{ set; };
            String Tag{ get; };
            String Group{ set; };
            String Group{ get; };
            Boolean SuppressPopup{ set; };
            Boolean SuppressPopup{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.UI.Notifications.IToastNotification3", 31e8aed8-8141-4f99-bc0a-c4ed21297d77)]
        {
            Windows.UI.Notifications.NotificationMirroring NotificationMirroring{ get; };
            Windows.UI.Notifications.NotificationMirroring NotificationMirroring{ set; };
            String RemoteId{ get; };
            String RemoteId{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.Notifications.IToastNotification4", 15154935-28ea-4727-88e9-c58680e2d118)]
        {
            Windows.UI.Notifications.NotificationData Data{ get; };
            Windows.UI.Notifications.NotificationData Data{ set; };
            Windows.UI.Notifications.ToastNotificationPriority Priority{ get; };
            Windows.UI.Notifications.ToastNotificationPriority Priority{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [feature(Velocity_SometimesAlwaysDisabled)]
        [interface_name("Windows.UI.Notifications.IToastNotification5", c206e4b8-64c1-4b97-96e0-12654451c97f)]
        {
            Windows.UI.Shell.IAdaptiveCard AdaptiveCard{ set; };
            Windows.UI.Shell.IAdaptiveCard AdaptiveCard{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.UI.Notifications.IToastNotification6", 43ebfe53-89ae-5c1e-a279-3aecfe9b6f54)]
        {
            Boolean ExpiresOnReboot{ get; };
            Boolean ExpiresOnReboot{ set; };
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.UI.Notifications.IScheduledToastNotificationFactory", e7bed191-0bb9-4189-8394-31761b476fd7)]
    [interface_name("Windows.UI.Notifications.IScheduledToastNotification", 79f577f8-0de7-48cd-9740-9b370490c838)]
    [threading(mta)]
    runtimeclass ScheduledToastNotification
    {

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [feature(Velocity_SometimesAlwaysDisabled)]
        [constructor_name("Windows.UI.Notifications.IScheduledToastNotificationFactory2", ec8f567d-ffbf-4db6-aeb0-32832215070c)]
        {
            [method_name( "CreateWithDeliveryTime" )] ScheduledToastNotification(Windows.Foundation.DateTime deliveryTime);
        }
        [method_name( "CreateScheduledToastNotification" )] ScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument content, Windows.Foundation.DateTime deliveryTime);
        [method_name( "CreateScheduledToastNotificationRecurring" )] ScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument content, Windows.Foundation.DateTime deliveryTime, Windows.Foundation.TimeSpan snoozeInterval, UInt32 maximumSnoozeCount);
        Windows.Data.Xml.Dom.XmlDocument Content{ get; };
        Windows.Foundation.DateTime DeliveryTime{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  SnoozeInterval{ get; };
        UInt32 MaximumSnoozeCount{ get; };
        String Id{ set; };
        String Id{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.Notifications.IScheduledToastNotification2", a66ea09c-31b4-43b0-b5dd-7a40e85363b1)]
        {
            String Tag{ set; };
            String Tag{ get; };
            String Group{ set; };
            String Group{ get; };
            Boolean SuppressPopup{ set; };
            Boolean SuppressPopup{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.UI.Notifications.IScheduledToastNotification3", 98429e8b-bd32-4a3b-9d15-22aea49462a1)]
        {
            Windows.UI.Notifications.NotificationMirroring NotificationMirroring{ get; };
            Windows.UI.Notifications.NotificationMirroring NotificationMirroring{ set; };
            String RemoteId{ get; };
            String RemoteId{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.UI.Notifications.IScheduledToastNotification4", 1d4761fd-bdef-4e4a-96be-0101369b58d2)]
        {
            Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ get; };
            Windows.Foundation.IReference <Windows.Foundation.DateTime>  ExpirationTime{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [feature(Velocity_SometimesAlwaysDisabled)]
        [interface_name("Windows.UI.Notifications.IScheduledToastNotification5", d84479e3-1070-486e-bc62-02077587d14c)]
        {
            Windows.UI.Shell.IAdaptiveCard AdaptiveCard{ set; };
            Windows.UI.Shell.IAdaptiveCard AdaptiveCard{ get; };
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [constructor_name("Windows.UI.Notifications.INotificationDataFactory", 23c1e33a-1c10-46fb-8040-dec384621cf8)]
    [interface_name("Windows.UI.Notifications.INotificationData", 9ffd2312-9d6a-4aaf-b6ac-ff17f0c1f280)]
    [threading(both)]
    runtimeclass NotificationData
    {
        [method_name("CreateNotificationDataWithValuesAndSequenceNumber")] [overload( "CreateNotificationData" )] NotificationData(Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <String, String> >  initialValues, UInt32 sequenceNumber);
        [method_name("CreateNotificationDataWithValues")] [overload( "CreateNotificationData" )] NotificationData(Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <String, String> >  initialValues);
        NotificationData();
        Windows.Foundation.Collections.IMap <String, String>  Values{ get; };
        UInt32 SequenceNumber{ get; };
        UInt32 SequenceNumber{ set; };
    }


    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.IToastNotifier", 75927b93-03f3-41ec-91d3-6e5bac1b38e7)]
    runtimeclass ToastNotifier
    {
        void Show(ToastNotification notification);
        void Hide(ToastNotification notification);
        Windows.UI.Notifications.NotificationSetting Setting{ get; };
        void AddToSchedule(ScheduledToastNotification scheduledToast);
        void RemoveFromSchedule(ScheduledToastNotification scheduledToast);
        Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.ScheduledToastNotification>  GetScheduledToastNotifications();

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.Notifications.IToastNotifier2", 354389c6-7c01-4bd5-9c20-604340cd2b74)]
        {
            [method_name("UpdateWithTagAndGroup")] Windows.UI.Notifications.NotificationUpdateResult Update(NotificationData data, String tag, String group);
            [method_name("UpdateWithTag")] Windows.UI.Notifications.NotificationUpdateResult Update(NotificationData data, String tag);
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.UI.Notifications.IToastNotifier3", ae75a04a-3b0c-51ad-b7e8-b08ab6052549)]
        {
            event Windows.Foundation.TypedEventHandler <Windows.UI.Notifications.ToastNotifier, Windows.UI.Notifications.ScheduledToastNotificationShowingEventArgs>  ScheduledToastNotificationShowing;
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.UI.Notifications.IScheduledToastNotificationShowingEventArgs", 6173f6b4-412a-5e2c-a6ed-a0209aef9a09)]
    runtimeclass ScheduledToastNotificationShowingEventArgs
    {
        Boolean Cancel{ get; };
        Boolean Cancel{ set; };
        Windows.UI.Notifications.ScheduledToastNotification ScheduledToastNotification{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }



    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.IToastDismissedEventArgs", 3f89d935-d9cb-4538-a0f0-ffe7659938f8)]
    runtimeclass ToastDismissedEventArgs
    {
        Windows.UI.Notifications.ToastDismissalReason Reason{ get; };
    }

    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.UI.Notifications.IToastFailedEventArgs", 35176862-cfd4-44f8-ad64-f500fd896c3b)]
    runtimeclass ToastFailedEventArgs
    {
        HRESULT ErrorCode{ get; };
    }



















    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.Notifications.IToastCollectionFactory", 164dd3d7-73c4-44f7-b4ff-fb6d4bf1f4c6)]
    [interface_name("Windows.UI.Notifications.IToastCollection", 0a8bc3b0-e0be-4858-bc2a-89dfe0b32863)]
    [threading(mta)]
    runtimeclass ToastCollection
    {
        [method_name( "CreateInstance" )] ToastCollection(String collectionId, String displayName, String launchArgs, Windows.Foundation.Uri iconUri);
        String Id{ get; };
        String DisplayName{ get; };
        String DisplayName{ set; };
        String LaunchArgs{ get; };
        String LaunchArgs{ set; };
        Windows.Foundation.Uri Icon{ get; };
        Windows.Foundation.Uri Icon{ set; };
    }






    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    runtimeclass ToastNotificationHistory
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.Notifications.IToastNotificationHistory2", 3bc3d253-2f31-4092-9129-8ad5abf067da)]
        {
            [method_name("GetHistory")] Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.ToastNotification>  GetHistory();
            [method_name("GetHistoryWithId")] Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.ToastNotification>  GetHistory(String applicationId);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.UI.Notifications.IToastNotificationHistory", 5caddc63-01d3-4c97-986f-0533483fee14)]
        {
            [method_name("RemoveGroup")] void RemoveGroup(String group);
            [method_name("RemoveGroupWithId")] void RemoveGroup(String group, String applicationId);
            [method_name("RemoveGroupedTagWithId")] void Remove(String tag, String group, String applicationId);
            [method_name("RemoveGroupedTag")] void Remove(String tag, String group);
            [method_name("Remove")] void Remove(String tag);
            [method_name("Clear")] void Clear();
            [method_name("ClearWithId")] void Clear(String applicationId);
        }
    }



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [interface_name("Windows.UI.Notifications.IToastCollectionManager", 2a1821fe-179d-49bc-b79d-a527920d3665)]
    runtimeclass ToastCollectionManager
    {
        Windows.Foundation.IAsyncAction SaveToastCollectionAsync(ToastCollection collection);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.ToastCollection> >  FindAllToastCollectionsAsync();
        Windows.Foundation.IAsyncOperation <Windows.UI.Notifications.ToastCollection>  GetToastCollectionAsync(String collectionId);
        Windows.Foundation.IAsyncAction RemoveToastCollectionAsync(String collectionId);
        Windows.Foundation.IAsyncAction RemoveAllToastCollectionsAsync();
        Windows.System.User User{ get; };
        String AppId{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.UI.Notifications.IToastNotificationManagerForUser", 79ab57f6-43fe-487b-8a7f-99567200ae94)]
    runtimeclass ToastNotificationManagerForUser
    {
        [method_name("CreateToastNotifier")] Windows.UI.Notifications.ToastNotifier CreateToastNotifier();
        [method_name("CreateToastNotifierWithId")] Windows.UI.Notifications.ToastNotifier CreateToastNotifier(String applicationId);
        Windows.UI.Notifications.ToastNotificationHistory History{ get; };
        Windows.System.User User{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.Notifications.IToastNotificationManagerForUser2", 679c64b7-81ab-42c2-8819-c958767753f4)]
        {
            Windows.Foundation.IAsyncOperation <Windows.UI.Notifications.ToastNotifier>  GetToastNotifierForToastCollectionIdAsync(String collectionId);
            Windows.Foundation.IAsyncOperation <Windows.UI.Notifications.ToastNotificationHistory>  GetHistoryForToastCollectionIdAsync(String collectionId);
            [method_name("GetToastCollectionManager")] Windows.UI.Notifications.ToastCollectionManager GetToastCollectionManager();
            [method_name("GetToastCollectionManagerWithAppId")] Windows.UI.Notifications.ToastCollectionManager GetToastCollectionManager(String appId);
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.IUserNotificationChangedEventArgs", b6bd6839-79cf-4b25-82c0-0ce1eef81f8c)]
    runtimeclass UserNotificationChangedEventArgs
    {
        Windows.UI.Notifications.UserNotificationChangedKind ChangeKind{ get; };
        UInt32 UserNotificationId{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Notifications.IUserNotification", adf7e52f-4e53-42d5-9c33-eb5ea515b23e)]
    runtimeclass UserNotification
    {
        Windows.UI.Notifications.Notification Notification{ get; };
        Windows.ApplicationModel.AppInfo AppInfo{ get; };
        UInt32 Id{ get; };
        Windows.Foundation.DateTime CreationTime{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.UI.Notifications.IKnownAdaptiveNotificationHintsStatics", 06206598-d496-497d-8692-4f7d7c2770df)]
    [threading(both)]
    runtimeclass KnownAdaptiveNotificationHints
    {
        static String Style{ get; };
        static String Wrap{ get; };
        static String MaxLines{ get; };
        static String MinLines{ get; };
        static String TextStacking{ get; };
        static String Align{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.UI.Notifications.IKnownNotificationBindingsStatics", 79427bae-a8b7-4d58-89ea-76a7b7bccded)]
    [threading(both)]
    runtimeclass KnownNotificationBindings
    {
        static String ToastGeneric{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.UI.Notifications.IKnownAdaptiveNotificationTextStylesStatics", 202192d7-8996-45aa-8ba1-d461d72c2a1b)]
    [threading(both)]
    runtimeclass KnownAdaptiveNotificationTextStyles
    {
        static String Caption{ get; };
        static String Body{ get; };
        static String Base{ get; };
        static String Subtitle{ get; };
        static String Title{ get; };
        static String Subheader{ get; };
        static String Header{ get; };
        static String TitleNumeral{ get; };
        static String SubheaderNumeral{ get; };
        static String HeaderNumeral{ get; };
        static String CaptionSubtle{ get; };
        static String BodySubtle{ get; };
        static String BaseSubtle{ get; };
        static String SubtitleSubtle{ get; };
        static String TitleSubtle{ get; };
        static String SubheaderSubtle{ get; };
        static String SubheaderNumeralSubtle{ get; };
        static String HeaderSubtle{ get; };
        static String HeaderNumeralSubtle{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.Notifications.ITileUpdateManagerStatics", da159e5d-3ea9-4986-8d84-b09d5e12276d)]
    [threading(mta)]
    runtimeclass TileUpdateManager
    {

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.UI.Notifications.ITileUpdateManagerStatics2", 731c1ddc-8e14-4b7c-a34b-9d22de76c84d)]
        {
            static Windows.UI.Notifications.TileUpdateManagerForUser GetForUser(Windows.System.User user);
        }
        [method_name("CreateTileUpdaterForApplication")] static Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplication();
        [method_name("CreateTileUpdaterForApplicationWithId")] static Windows.UI.Notifications.TileUpdater CreateTileUpdaterForApplication(String applicationId);
        static Windows.UI.Notifications.TileUpdater CreateTileUpdaterForSecondaryTile(String tileId);
        static Windows.Data.Xml.Dom.XmlDocument GetTemplateContent(TileTemplateType type);
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.UI.Notifications.IBadgeUpdateManagerStatics", 33400faa-6dd5-4105-aebc-9b50fca492da)]
    [threading(mta)]
    runtimeclass BadgeUpdateManager
    {

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.UI.Notifications.IBadgeUpdateManagerStatics2", 979a35ce-f940-48bf-94e8-ca244d400b41)]
        {
            static Windows.UI.Notifications.BadgeUpdateManagerForUser GetForUser(Windows.System.User user);
        }
        [method_name("CreateBadgeUpdaterForApplication")] static Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForApplication();
        [method_name("CreateBadgeUpdaterForApplicationWithId")] static Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForApplication(String applicationId);
        static Windows.UI.Notifications.BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String tileId);
        static Windows.Data.Xml.Dom.XmlDocument GetTemplateContent(BadgeTemplateType type);
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.Notifications.ITileFlyoutUpdateManagerStatics", 04363b0b-1ac0-4b99-88e7-ada83e953d48)]
    [threading(mta)]
    runtimeclass TileFlyoutUpdateManager
    {
        [method_name("CreateTileFlyoutUpdaterForApplication")] static Windows.UI.Notifications.TileFlyoutUpdater CreateTileFlyoutUpdaterForApplication();
        [method_name("CreateTileFlyoutUpdaterForApplicationWithId")] static Windows.UI.Notifications.TileFlyoutUpdater CreateTileFlyoutUpdaterForApplication(String applicationId);
        static Windows.UI.Notifications.TileFlyoutUpdater CreateTileFlyoutUpdaterForSecondaryTile(String tileId);
        static Windows.Data.Xml.Dom.XmlDocument GetTemplateContent(TileFlyoutTemplateType type);
    }





    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.UI.Notifications.IToastNotificationManagerStatics", 50ac103f-d235-4598-bbef-98fe4d1a3ad4)]
    [threading(mta)]
    runtimeclass ToastNotificationManager
    {
        [method_name("CreateToastNotifier")] static Windows.UI.Notifications.ToastNotifier CreateToastNotifier();
        [method_name("CreateToastNotifierWithId")] static Windows.UI.Notifications.ToastNotifier CreateToastNotifier(String applicationId);
        static Windows.Data.Xml.Dom.XmlDocument GetTemplateContent(ToastTemplateType type);

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.UI.Notifications.IToastNotificationManagerStatics5", d6f5f569-d40d-407c-8989-88cab42cfd14)]
        {
            static Windows.UI.Notifications.ToastNotificationManagerForUser GetDefault();
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.UI.Notifications.IToastNotificationManagerStatics4", 8f993fd3-e516-45fb-8130-398e93fa52c3)]
        {
            static Windows.UI.Notifications.ToastNotificationManagerForUser GetForUser(Windows.System.User user);
            static void ConfigureNotificationMirroring(NotificationMirroring value);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.UI.Notifications.IToastNotificationManagerStatics2", 7ab93c52-0e48-4750-ba9d-1a4113981847)]
        {
            static Windows.UI.Notifications.ToastNotificationHistory History{ get; };
        }
    }



    [marshaling_behavior(standard)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.UI.Notifications.IToastActivatedEventArgs", e3bf92f3-c197-436f-8265-0625824f8dac)]
    runtimeclass ToastActivatedEventArgs
    {
        String Arguments{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.UI.Notifications.IToastActivatedEventArgs2", ab7da512-cc61-568e-81be-304ac31038fa)]
        {
            Windows.Foundation.Collections.ValueSet UserInput{ get; };
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    runtimeclass ToastNotificationHistoryChangedTriggerDetail
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.UI.Notifications.IToastNotificationHistoryChangedTriggerDetail", db037ffa-0068-412c-9c83-267c37f65670)]
        {
            Windows.UI.Notifications.ToastHistoryChangedType ChangeType{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.Notifications.IToastNotificationHistoryChangedTriggerDetail2", 0b36e982-c871-49fb-babb-25bdbc4cc45b)]
        {
            String CollectionId{ get; };
        }
    }


    [marshaling_behavior(standard)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass ToastNotificationActionTriggerDetail
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.Notifications.IToastNotificationActionTriggerDetail", 9445135a-38f3-42f6-96aa-7955b0f03da2)]
        {
            String Argument{ get; };
            Windows.Foundation.Collections.ValueSet UserInput{ get; };
        }
    }


}
namespace Windows.ApplicationModel.Background
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [threading(mta)]
    runtimeclass ToastNotificationHistoryChangedTrigger
        : [default]Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        ToastNotificationHistoryChangedTrigger();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.ApplicationModel.Background.IToastNotificationHistoryChangedTriggerFactory", 81c6faad-8797-4785-81b4-b0cccb73d1d9)]
        {
            [method_name( "Create" )] ToastNotificationHistoryChangedTrigger(String applicationId);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [threading(mta)]
    runtimeclass ToastNotificationActionTrigger
        : [default]Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        ToastNotificationActionTrigger();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.ApplicationModel.Background.IToastNotificationActionTriggerFactory", b09dfc27-6480-4349-8125-97b3efaa0a3a)]
        {
            [method_name( "Create" )] ToastNotificationActionTrigger(String applicationId);
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.ApplicationModel.Background.IUserNotificationChangedTriggerFactory", cad4436c-69ab-4e18-a48a-5ed2ac435957)]
    [threading(mta)]
    runtimeclass UserNotificationChangedTrigger
        : [default]Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        [method_name( "Create" )] UserNotificationChangedTrigger(Windows.UI.Notifications.NotificationKinds notificationKinds);
    }

}
namespace Windows.UI.Notifications.Management
{
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum UserNotificationListenerAccessStatus
    {
        Unspecified,
        Allowed,
        Denied,
    };


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.Notifications.Management.IUserNotificationListenerStatics", ff6123cf-4386-4aa3-b73d-b804e5b63b23)]
    [interface_name("Windows.UI.Notifications.Management.IUserNotificationListener", 62553e41-8a06-4cef-8215-6033a5be4b03)]
    [threading(mta)]
    runtimeclass UserNotificationListener
    {
        static Windows.UI.Notifications.Management.UserNotificationListener Current{ get; };
        Windows.Foundation.IAsyncOperation <Windows.UI.Notifications.Management.UserNotificationListenerAccessStatus>  RequestAccessAsync();
        Windows.UI.Notifications.Management.UserNotificationListenerAccessStatus GetAccessStatus();
        event Windows.Foundation.TypedEventHandler <Windows.UI.Notifications.Management.UserNotificationListener, Windows.UI.Notifications.UserNotificationChangedEventArgs>  NotificationChanged;
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.UI.Notifications.UserNotification> >  GetNotificationsAsync(Windows.UI.Notifications.NotificationKinds kinds);
        Windows.UI.Notifications.UserNotification GetNotification(UInt32 notificationId);
        void ClearNotifications();
        void RemoveNotification(UInt32 notificationId);
    }


}
