








namespace Microsoft.PPI.Appointments
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    [uuid(2ce0bb2f-3895-4183-bc41-5f0286c90b1e)]
    interface IAppointmentItem
    {
        Boolean AllDay{ get; };
        Windows.ApplicationModel.Appointments.AppointmentBusyStatus BusyStatus{ get; };
        String CalendarId{ get; };
        Boolean Canceled{ get; };
        Boolean CurrentAppointment{ get; };
        Boolean CurrentAppointment{ set; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Foundation.DateTime EndTime{ get; };
        Boolean Impending{ get; };
        Boolean InProgress{ get; };
        String LocalId{ get; };
        String Location{ get; };
        String OnlineMeetingLink{ get; };
        String OrganizerAddress{ get; };
        String OrganizerDisplayName{ get; };
        Windows.Foundation.DateTime OriginalStartTime{ get; };
        String RoamingId{ get; };
        Windows.ApplicationModel.Appointments.AppointmentSensitivity Sensitivity{ get; };
        Windows.Foundation.DateTime StartTime{ get; };
        String Subject{ get; };
        Boolean Upcoming{ get; };
        Windows.ApplicationModel.Appointments.AppointmentParticipantResponse UserResponse{ get; };
    };

    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    [uuid(0f350a92-7ebb-45ce-b3a7-33ea2a05f820)]
    interface IAppointmentItem2
    {
        Boolean HasInvitees{ get; };
        Windows.Foundation.Collections.IVector <Windows.ApplicationModel.Appointments.AppointmentInvitee>  Invitees{ get; };
    };


    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    [static_name("Microsoft.PPI.Appointments.IAppointmentItemStatics", 2257b5cb-8178-4237-8da6-3b8b2c1581d9)]
    runtimeclass AppointmentItem
        : [default]Microsoft.PPI.Appointments.IAppointmentItem
        , Microsoft.PPI.Appointments.IAppointmentItem2
    {
        static Microsoft.PPI.Appointments.AppointmentItem Create(String roamingId, Windows.Foundation.DateTime startTime, Windows.Foundation.TimeSpan duration);
        static Microsoft.PPI.Appointments.AppointmentItem CreateWithSpecifics(String roamingId, Windows.Foundation.DateTime startTime, Windows.Foundation.TimeSpan duration, String calendarId, String localId, String subject, String location, String organizerDisplayName, String organizerAddress, String onlineMeetingLink, Boolean allDay, Boolean canceled, Boolean currentAppointment, Windows.ApplicationModel.Appointments.AppointmentBusyStatus busyStatus, Windows.ApplicationModel.Appointments.AppointmentParticipantResponse userResponse, Windows.ApplicationModel.Appointments.AppointmentSensitivity sensitivity);
        static Microsoft.PPI.Appointments.AppointmentItem CreateFromAppointment(Windows.ApplicationModel.Appointments.Appointment appointment);
    }

    [uuid(fd222886-25cd-4e77-80d2-94cb4b4c391a)]
    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    interface IAppointmentList
    {
        Windows.Foundation.IAsyncOperation <Boolean>  WaitForInitializationAsync();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Microsoft.PPI.Appointments.IAppointmentItem> >  GetAppointmentsAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.TimeSpan duration, UInt32 count);
        Windows.ApplicationModel.Appointments.AppointmentStore ReadWriteAppointmentStore{ get; };
        Microsoft.PPI.Appointments.IAppointmentItem ResumableMeeting{ get; };
    };

    [uuid(2aea2f5d-c10f-46c8-aa89-f9b98af8196b)]
    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    interface IAppointmentList2
    {
        Windows.Foundation.IAsyncOperation <Microsoft.PPI.Appointments.IAppointmentItem>  GetCurrentMeetingAsync();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.UI.ApplicationSettings.BubbleHeadData> >  GetBubbleHeadDataAsync();
    };


    [contract(Microsoft.PPI.Appointments.InternalContract, 1)]
    [static_name("Microsoft.PPI.Appointments.IAppointmentListStatics", 6e2bd97f-48fa-46a8-9044-ae9ac46d0c2f)]
    runtimeclass AppointmentList
        : [default]Microsoft.PPI.Appointments.IAppointmentList
        , Microsoft.PPI.Appointments.IAppointmentList2
    {
        AppointmentList();
        static Boolean AreAppointmentsConcurrent(IAppointmentItem appointment1, IAppointmentItem appointment2);
        static Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  FilterAppointmentsWithSpecialTypes(Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  pAppointments);
        static String GetExchangeUPN();
        static Boolean IsTimeSpanImpending(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime currentTime, Windows.Foundation.TimeSpan impendingDelta);
        static Boolean IsTimeSpanInProgress(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime, Windows.Foundation.DateTime currentTime);
        static Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  ReorderAppointments(Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  pAppointments, String exchangeUPN);
        static Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  SetCurrentAppointments(Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  pAppointments, Windows.Foundation.DateTime currentTime, Windows.Foundation.TimeSpan impendingDelta);
        static Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  TruncateAppointments(Windows.Foundation.Collections.IVector <Microsoft.PPI.Appointments.IAppointmentItem>  pAppointments, UInt32 count);
    }

}
