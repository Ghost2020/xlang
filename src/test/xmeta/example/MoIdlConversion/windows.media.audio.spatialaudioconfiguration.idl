






namespace Windows.Media.Audio
{
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum MixedRealitySpatialAudioFormatPolicy
    {
        UseMixedRealityDefaultSpatialAudioFormat,
        UseDeviceConfigurationDefaultSpatialAudioFormat,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum SetDefaultSpatialAudioFormatStatus
    {
        Succeeded,
        AccessDenied,
        LicenseExpired,
        LicenseNotValidForAudioEndpoint,
        NotSupportedOnAudioEndpoint,
        UnknownError,
    };


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [dualapipartition(0x1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Media.Audio.ISpatialAudioFormatSubtypeStatics", b3de8a47-83ee-4266-a945-bedf507afeed)]
    [threading(both)]
    runtimeclass SpatialAudioFormatSubtype
    {
        static String WindowsSonic{ get; };
        static String DolbyAtmosForHeadphones{ get; };
        static String DolbyAtmosForHomeTheater{ get; };
        static String DolbyAtmosForSpeakers{ get; };
        static String DTSHeadphoneX{ get; };
        static String DTSXUltra{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [interface_name("Windows.Media.Audio.ISetDefaultSpatialAudioFormatResult", 1c2aa511-1400-5e70-9ea9-ae151241e8ea)]
    runtimeclass SetDefaultSpatialAudioFormatResult
    {
        Windows.Media.Audio.SetDefaultSpatialAudioFormatStatus Status{ get; };
    }



    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Media.Audio.ISpatialAudioFormatConfigurationStatics", 2b5fef71-67c9-4e5f-a35b-41680711f8c7)]
    [interface_name("Windows.Media.Audio.ISpatialAudioFormatConfiguration", 32df09a8-50f0-5395-9923-7d44ca71ed6d)]
    [threading(both)]
    runtimeclass SpatialAudioFormatConfiguration
    {
        static Windows.Media.Audio.SpatialAudioFormatConfiguration GetDefault();
        Windows.Foundation.IAsyncAction ReportLicenseChangedAsync(String subtype);
        Windows.Foundation.IAsyncAction ReportConfigurationChangedAsync(String subtype);
        Windows.Media.Audio.MixedRealitySpatialAudioFormatPolicy MixedRealityExclusiveModePolicy{ get; };
        Windows.Media.Audio.MixedRealitySpatialAudioFormatPolicy MixedRealityExclusiveModePolicy{ set; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [static_name("Windows.Media.Audio.ISpatialAudioDeviceConfigurationStatics", 3ec37f7b-936d-4e04-9728-2827d9f758c4)]
    [interface_name("Windows.Media.Audio.ISpatialAudioDeviceConfiguration", ee830034-61cf-5749-9da4-10f0fe028199)]
    [threading(both)]
    runtimeclass SpatialAudioDeviceConfiguration
    {
        static Windows.Media.Audio.SpatialAudioDeviceConfiguration GetForDeviceId(String deviceId);
        String DeviceId{ get; };
        Boolean IsSpatialAudioSupported{ get; };
        Boolean IsSpatialAudioFormatSupported(String subtype);
        String ActiveSpatialAudioFormat{ get; };
        String DefaultSpatialAudioFormat{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Media.Audio.SetDefaultSpatialAudioFormatResult>  SetDefaultSpatialAudioFormatAsync(String subtype);
        event Windows.Foundation.TypedEventHandler <Windows.Media.Audio.SpatialAudioDeviceConfiguration, Object>  ConfigurationChanged;
    }


}
