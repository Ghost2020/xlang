









namespace Windows.Services.Maps
{
    [contractversion(3)]
    apicontract GuidanceContract{};


}
namespace Windows.Services.Maps.Guidance
{
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceRoadSignpost", f1a728b6-f77a-4742-8312-53300f9845f0)]
    runtimeclass GuidanceRoadSignpost
    {
        String ExitNumber{ get; };
        String Exit{ get; };
        Windows.UI.Color BackgroundColor{ get; };
        Windows.UI.Color ForegroundColor{ get; };
        Windows.Foundation.Collections.IVectorView <String>  ExitDirections{ get; };
    }

    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    enum GuidanceManeuverKind
    {
        None,
        GoStraight,
        UTurnRight,
        UTurnLeft,
        TurnKeepRight,
        TurnLightRight,
        TurnRight,
        TurnHardRight,
        KeepMiddle,
        TurnKeepLeft,
        TurnLightLeft,
        TurnLeft,
        TurnHardLeft,
        FreewayEnterRight,
        FreewayEnterLeft,
        FreewayLeaveRight,
        FreewayLeaveLeft,
        FreewayKeepRight,
        FreewayKeepLeft,
        TrafficCircleRight1,
        TrafficCircleRight2,
        TrafficCircleRight3,
        TrafficCircleRight4,
        TrafficCircleRight5,
        TrafficCircleRight6,
        TrafficCircleRight7,
        TrafficCircleRight8,
        TrafficCircleRight9,
        TrafficCircleRight10,
        TrafficCircleRight11,
        TrafficCircleRight12,
        TrafficCircleLeft1,
        TrafficCircleLeft2,
        TrafficCircleLeft3,
        TrafficCircleLeft4,
        TrafficCircleLeft5,
        TrafficCircleLeft6,
        TrafficCircleLeft7,
        TrafficCircleLeft8,
        TrafficCircleLeft9,
        TrafficCircleLeft10,
        TrafficCircleLeft11,
        TrafficCircleLeft12,
        Start,
        End,
        TakeFerry,
        PassTransitStation,
        LeaveTransitStation,
    };

    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [webhosthidden]
    enum GuidanceMode
    {
        None,
        Simulation,
        Navigation,
        Tracking,
    };

    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    enum GuidanceAudioMeasurementSystem
    {
        Meters,
        MilesAndYards,
        MilesAndFeet,
    };

    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [flags]
    enum GuidanceAudioNotifications
    {
        None,
        Maneuver,
        Route,
        Gps = 4,
        SpeedLimit = 8,
        Traffic = 16,
        TrafficCamera = 32,
    };

    [contract(Windows.Services.Maps.GuidanceContract, 2)]
    [webhosthidden]
    enum GuidanceAudioNotificationKind
    {
        Maneuver,
        Route,
        Gps,
        SpeedLimit,
        Traffic,
        TrafficCamera,
    };

    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [flags]
    enum GuidanceLaneMarkers
    {
        None,
        LightRight,
        Right,
        HardRight = 4,
        Straight = 8,
        UTurnLeft = 16,
        HardLeft = 32,
        Left = 64,
        LightLeft = 128,
        UTurnRight = 256,
        Unknown = -1,
    };


    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceManeuver", fc09326c-ecc9-4928-a2a1-7232b99b94a1)]
    runtimeclass GuidanceManeuver
    {
        Windows.Devices.Geolocation.Geopoint StartLocation{ get; };
        Int32 DistanceFromRouteStart{ get; };
        Int32 DistanceFromPreviousManeuver{ get; };
        String DepartureRoadName{ get; };
        String NextRoadName{ get; };
        String DepartureShortRoadName{ get; };
        String NextShortRoadName{ get; };
        Windows.Services.Maps.Guidance.GuidanceManeuverKind Kind{ get; };
        Int32 StartAngle{ get; };
        Int32 EndAngle{ get; };
        Windows.Services.Maps.Guidance.GuidanceRoadSignpost RoadSignpost{ get; };
        String InstructionText{ get; };
    }


    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [static_name("Windows.Services.Maps.Guidance.IGuidanceRouteStatics", f56d926a-55ed-49c1-b09c-4b8223b50db3)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceRoute", 3a14545d-801a-40bd-a286-afb2010cce6c)]
    [threading(both)]
    runtimeclass GuidanceRoute
    {
        static Boolean CanCreateFromMapRoute(Windows.Services.Maps.MapRoute mapRoute);
        static Windows.Services.Maps.Guidance.GuidanceRoute TryCreateFromMapRoute(Windows.Services.Maps.MapRoute mapRoute);
        Windows.Foundation.TimeSpan Duration{ get; };
        Int32 Distance{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Services.Maps.Guidance.GuidanceManeuver>  Maneuvers{ get; };
        Windows.Devices.Geolocation.GeoboundingBox BoundingBox{ get; };
        Windows.Devices.Geolocation.Geopath Path{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Services.Maps.Guidance.GuidanceRoadSegment>  RoadSegments{ get; };
        Windows.Services.Maps.MapRoute ConvertToMapRoute();
    }

    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceMapMatchedCoordinate", b7acb168-2912-4a99-aff1-798609b981fe)]
    runtimeclass GuidanceMapMatchedCoordinate
    {
        Windows.Devices.Geolocation.Geopoint Location{ get; };
        Double CurrentHeading{ get; };
        Double CurrentSpeed{ get; };
        Boolean IsOnStreet{ get; };
        Windows.Services.Maps.Guidance.GuidanceRoadSegment Road{ get; };
    }

    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceLaneInfo", 8404d114-6581-43b7-ac15-c9079bf90df1)]
    runtimeclass GuidanceLaneInfo
    {
        Windows.Services.Maps.Guidance.GuidanceLaneMarkers LaneMarkers{ get; };
        Boolean IsOnRoute{ get; };
    }

    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceUpdatedEventArgs", fdac160b-9e8d-4de3-a9fa-b06321d18db9)]
    runtimeclass GuidanceUpdatedEventArgs
    {
        Windows.Services.Maps.Guidance.GuidanceMode Mode{ get; };
        Windows.Services.Maps.Guidance.GuidanceManeuver NextManeuver{ get; };
        Int32 NextManeuverDistance{ get; };
        Windows.Services.Maps.Guidance.GuidanceManeuver AfterNextManeuver{ get; };
        Int32 AfterNextManeuverDistance{ get; };
        Int32 DistanceToDestination{ get; };
        Int32 ElapsedDistance{ get; };
        Windows.Foundation.TimeSpan ElapsedTime{ get; };
        Windows.Foundation.TimeSpan TimeToDestination{ get; };
        String RoadName{ get; };
        Windows.Services.Maps.Guidance.GuidanceRoute Route{ get; };
        Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate CurrentLocation{ get; };
        Boolean IsNewManeuver{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Services.Maps.Guidance.GuidanceLaneInfo>  LaneInfo{ get; };
    }


    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceReroutedEventArgs", 115d4008-d528-454e-bb94-a50341d2c9f1)]
    runtimeclass GuidanceReroutedEventArgs
    {
        Windows.Services.Maps.Guidance.GuidanceRoute Route{ get; };
    }


    [contract(Windows.Services.Maps.GuidanceContract, 2)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceAudioNotificationRequestedEventArgs", ca2aa24a-c7c2-4d4c-9d7c-499576bceddb)]
    runtimeclass GuidanceAudioNotificationRequestedEventArgs
    {
        Windows.Services.Maps.Guidance.GuidanceAudioNotificationKind AudioNotification{ get; };
        Windows.Foundation.Collections.IVectorView <String>  AudioFilePaths{ get; };
        String AudioText{ get; };
    }


    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [static_name("Windows.Services.Maps.Guidance.IGuidanceNavigatorStatics", 00fd9513-4456-4e66-a143-3add6be08426)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceNavigator", 08f17ef7-8e3f-4d9a-be8a-108f9a012c67)]
    [threading(both)]
    runtimeclass GuidanceNavigator
    {

        [contract(Windows.Services.Maps.GuidanceContract, 2)]
        [static_name("Windows.Services.Maps.Guidance.IGuidanceNavigatorStatics2", 54c5c3e2-7784-4c85-8c95-d0c6efb43965)]
        {
            static Boolean UseAppProvidedVoice{ get; };
        }
        static Windows.Services.Maps.Guidance.GuidanceNavigator GetCurrent();
        void StartNavigating(GuidanceRoute route);
        void StartSimulating(GuidanceRoute route, Int32 speedInMetersPerSecond);
        void StartTracking();
        void Pause();
        void Resume();
        void Stop();
        void RepeatLastAudioNotification();
        Windows.Services.Maps.Guidance.GuidanceAudioMeasurementSystem AudioMeasurementSystem{ get; };
        Windows.Services.Maps.Guidance.GuidanceAudioMeasurementSystem AudioMeasurementSystem{ set; };
        Windows.Services.Maps.Guidance.GuidanceAudioNotifications AudioNotifications{ get; };
        Windows.Services.Maps.Guidance.GuidanceAudioNotifications AudioNotifications{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs>  GuidanceUpdated;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Object>  DestinationReached;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Object>  Rerouting;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Windows.Services.Maps.Guidance.GuidanceReroutedEventArgs>  Rerouted;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Object>  RerouteFailed;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Object>  UserLocationLost;
        event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Object>  UserLocationRestored;
        void SetGuidanceVoice(Int32 voiceId, String voiceFolder);
        [method_name("UpdateUserLocation")] void UpdateUserLocation(Windows.Devices.Geolocation.Geocoordinate userLocation);
        [method_name("UpdateUserLocationWithPositionOverride")] void UpdateUserLocation(Windows.Devices.Geolocation.Geocoordinate userLocation, Windows.Devices.Geolocation.BasicGeoposition positionOverride);

        [contract(Windows.Services.Maps.GuidanceContract, 2)]
        [interface_name("Windows.Services.Maps.Guidance.IGuidanceNavigator2", 6cdc50d1-041c-4bf3-b633-a101fc2f6b57)]
        {
            event Windows.Foundation.TypedEventHandler <Windows.Services.Maps.Guidance.GuidanceNavigator, Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs>  AudioNotificationRequested;
            Boolean IsGuidanceAudioMuted{ get; };
            Boolean IsGuidanceAudioMuted{ set; };
        }
    }






    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceRoadSegment", b32758a6-be78-4c63-afe7-6c2957479b3e)]
    runtimeclass GuidanceRoadSegment
    {
        String RoadName{ get; };
        String ShortRoadName{ get; };
        Double SpeedLimit{ get; };
        Windows.Foundation.TimeSpan TravelTime{ get; };
        Windows.Devices.Geolocation.Geopath Path{ get; };
        String Id{ get; };
        Boolean IsHighway{ get; };
        Boolean IsTunnel{ get; };
        Boolean IsTollRoad{ get; };

        [contract(Windows.Services.Maps.GuidanceContract, 3)]
        [interface_name("Windows.Services.Maps.Guidance.IGuidanceRoadSegment2", 2474a61d-1723-49f1-895b-47a2c4aa9c55)]
        {
            Boolean IsScenic{ get; };
        }
    }



    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Windows.Services.Maps.GuidanceContract, 1)]
    [static_name("Windows.Services.Maps.Guidance.IGuidanceTelemetryCollectorStatics", 36532047-f160-44fb-b578-94577ca05990)]
    [interface_name("Windows.Services.Maps.Guidance.IGuidanceTelemetryCollector", db1f8da5-b878-4d92-98dd-347d23d38262)]
    [threading(both)]
    runtimeclass GuidanceTelemetryCollector
    {
        static Windows.Services.Maps.Guidance.GuidanceTelemetryCollector GetCurrent();
        Boolean Enabled{ get; };
        Boolean Enabled{ set; };
        void ClearLocalData();
        Double SpeedTrigger{ get; };
        Double SpeedTrigger{ set; };
        Int32 UploadFrequency{ get; };
        Int32 UploadFrequency{ set; };
    }





}
