








namespace Windows.Gaming.Input.Custom
{
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum GipFirmwareUpdateStatus
    {
        Completed,
        UpToDate,
        Failed,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum GipMessageClass
    {
        Command,
        LowLatency,
        StandardLatency,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [webhosthidden]
    enum XusbDeviceType
    {
        Unknown,
        Gamepad,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [webhosthidden]
    enum XusbDeviceSubtype
    {
        Unknown,
        Gamepad,
        ArcadePad,
        ArcadeStick,
        FlightStick,
        Wheel,
        Guitar,
        GuitarAlternate,
        GuitarBass,
        DrumKit,
        DancePad,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    struct GameControllerVersionInfo
    {
        UInt16 Major;
        UInt16 Minor;
        UInt16 Build;
        UInt16 Revision;
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    struct GipFirmwareUpdateProgress
    {
        Double PercentCompleted;
        UInt32 CurrentComponentId;
    };

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [uuid(1ff6f922-c640-4c78-a820-9a715c558bcb)]
    interface IGameControllerInputSink
    {
        void OnInputResumed(UInt64 timestamp);
        void OnInputSuspended(UInt64 timestamp);
    };

    [uuid(a2108abf-09f1-43bc-a140-80f899ec36fb)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    interface IGipGameControllerInputSink requires Windows.Gaming.Input.Custom.IGameControllerInputSink
    {
        void OnKeyReceived(UInt64 timestamp, UInt8 keyCode, Boolean isPressed);
        void OnMessageReceived(UInt64 timestamp, GipMessageClass messageClass, UInt8 messageId, UInt8 sequenceId, UInt8[] messageBuffer);
    };

    [uuid(f754c322-182d-40e4-a126-fcee4ffa1e31)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [webhosthidden]
    interface IHidGameControllerInputSink requires Windows.Gaming.Input.Custom.IGameControllerInputSink
    {
        void OnInputReportReceived(UInt64 timestamp, UInt8 reportId, UInt8[] reportBuffer);
    };

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [uuid(b2ac1d95-6ecb-42b3-8aab-025401ca4712)]
    interface IXusbGameControllerInputSink requires Windows.Gaming.Input.Custom.IGameControllerInputSink
    {
        void OnInputReceived(UInt64 timestamp, UInt8 reportId, UInt8[] inputBuffer);
    };


    [uuid(e6d73982-2996-4559-b16c-3e57d46e58d6)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    interface IGameControllerProvider
    {
        Windows.Gaming.Input.Custom.GameControllerVersionInfo FirmwareVersionInfo{ get; };
        UInt16 HardwareProductId{ get; };
        UInt16 HardwareVendorId{ get; };
        Windows.Gaming.Input.Custom.GameControllerVersionInfo HardwareVersionInfo{ get; };
        Boolean IsConnected{ get; };
    };


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000002)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.Gaming.Input.Custom.IGipFirmwareUpdateResult", 6b794d32-8553-4292-8e03-e16651a2f8bc)]
    runtimeclass GipFirmwareUpdateResult
    {
        UInt32 ExtendedErrorCode{ get; };
        UInt32 FinalComponentId{ get; };
        Windows.Gaming.Input.Custom.GipFirmwareUpdateStatus Status{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [uuid(69a0ae5e-758e-4cbe-ace6-62155fe9126f)]
    [webhosthidden]
    interface ICustomGameControllerFactory
    {
        Object CreateGameController(IGameControllerProvider provider);
        void OnGameControllerAdded(Windows.Gaming.Input.IGameController value);
        void OnGameControllerRemoved(Windows.Gaming.Input.IGameController value);
    };



    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000002)]
    [interface_name("Windows.Gaming.Input.Custom.IGipGameControllerProvider", dbcf1e19-1af5-45a8-bf02-a0ee50c823fc)]
    runtimeclass GipGameControllerProvider
        : Windows.Gaming.Input.Custom.IGameControllerProvider
    {
        void SendMessage(GipMessageClass messageClass, UInt8 messageId, UInt8[] messageBuffer);
        void SendReceiveMessage(GipMessageClass messageClass, UInt8 messageId, UInt8[] requestMessageBuffer, ref UInt8[] responseMessageBuffer);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Gaming.Input.Custom.GipFirmwareUpdateResult, Windows.Gaming.Input.Custom.GipFirmwareUpdateProgress>  UpdateFirmwareAsync(Windows.Storage.Streams.IInputStream firmwareImage);
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [interface_name("Windows.Gaming.Input.Custom.IHidGameControllerProvider", 95ce3af4-abf0-4b68-a081-3b7de73ff0e7)]
    runtimeclass HidGameControllerProvider
        : Windows.Gaming.Input.Custom.IGameControllerProvider
    {
        UInt16 UsageId{ get; };
        UInt16 UsagePage{ get; };
        void GetFeatureReport(UInt8 reportId, ref UInt8[] reportBuffer);
        void SendFeatureReport(UInt8 reportId, UInt8[] reportBuffer);
        void SendOutputReport(UInt8 reportId, UInt8[] reportBuffer);
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [dualapipartition(0xa000002)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Gaming.Input.Custom.IXusbGameControllerProvider", 6e2971eb-0efb-48b4-808b-837643b2f216)]
    runtimeclass XusbGameControllerProvider
        : Windows.Gaming.Input.Custom.IGameControllerProvider
    {
        void SetVibration(Double lowFrequencyMotorSpeed, Double highFrequencyMotorSpeed);
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    [dualapipartition(0xa000002)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics", 36cb66e3-d0a1-4986-a24c-40b137deba9e)]
    [threading(both)]
    runtimeclass GameControllerFactoryManager
    {
        static void RegisterCustomFactoryForGipInterface(ICustomGameControllerFactory factory, Guid interfaceId);
        static void RegisterCustomFactoryForHardwareId(ICustomGameControllerFactory factory, UInt16 hardwareVendorId, UInt16 hardwareProductId);
        static void RegisterCustomFactoryForXusbType(ICustomGameControllerFactory factory, XusbDeviceType xusbType, XusbDeviceSubtype xusbSubtype);

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Gaming.Input.Custom.IGameControllerFactoryManagerStatics2", eace5644-19df-4115-b32a-2793e2aea3bb)]
        {
            static Windows.Gaming.Input.IGameController TryGetFactoryControllerFromGameController(ICustomGameControllerFactory factory, Windows.Gaming.Input.IGameController gameController);
        }
    }

}
