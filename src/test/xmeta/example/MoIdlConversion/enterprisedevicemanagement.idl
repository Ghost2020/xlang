







namespace EnterpriseDeviceManagement.Enrollment
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum DMLoggingEvent
    {
        Enrollment,
        WebAuth,
        WebAuthHttp,
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum ReflectedMDMAuthPolicy
    {
        MDMAuthPolicyOnPremise,
        MDMAuthPolicyFederated,
        MDMAuthPolicyCertificate,
        MDMAuthPolicyMax,
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum MDMProgressMode
    {
        TargetDevice,
        TargetUser,
        TargetDeviceAndUser,
    };


    [marshaling_behavior(agile)]
    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.IFindDiscoveryResults", ea03163e-5836-4ffd-84af-9dfe0e58e7f9)]
    [threading(both)]
    runtimeclass FindDiscoveryResults
    {
        FindDiscoveryResults();
        String DiscoveryServiceFullURL{ get; };
        Boolean DiscoveryServiceInsecureRedirect{ get; };
    }


    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.IDiscoverEndpointsResults", c7eba020-af80-4b6b-b2dc-329f13a8b101)]
    [threading(both)]
    runtimeclass DiscoverEndpointsResults
    {
        DiscoverEndpointsResults();
        UInt32 EnrollmentFlags{ get; };
        EnterpriseDeviceManagement.Enrollment.ReflectedMDMAuthPolicy AuthPolicy{ get; };
        String PolicyServiceFullURL{ get; };
        String EnrollmentServiceFullURL{ get; };
        String FederatedAuthenticationService{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.IExpectedAndCurrentResourceAmount", ad0c42a7-551f-459b-b0f2-e7bc313bedbe)]
    [threading(both)]
    runtimeclass ExpectedAndCurrentResourceAmount
    {
        ExpectedAndCurrentResourceAmount();
        UInt32 CurrentProgress{ get; };
        UInt32 ExpectedEndValue{ get; };
        Boolean BlockedByRequiredReboot{ get; };
    }

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    struct ExpectedAndCurrentResourceProgress
    {
        Int32 CurrentProgress;
        Int32 ExpectedEndValue;
        Boolean BlockedByRequiredReboot;
    };


    [marshaling_behavior(agile)]
    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.IReflectedEnrollmentResult", fd0d03ba-0aee-4ff7-8990-689afbf63a20)]
    [threading(both)]
    runtimeclass ReflectedEnrollmentResult
    {
        ReflectedEnrollmentResult();
        Guid EnrollmentGUID{ get; };
        String EnrollmentGUIDAsString{ get; };
        HRESULT EnrollmentErrorCode{ get; };
        String EnrollmentErrorString{ get; };
        HRESULT EnrollmentInternalError{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.ICustomAllDonePageResults", c5466834-857e-45bf-920d-0e9c1e8ca703)]
    [threading(both)]
    runtimeclass CustomAllDonePageResults
    {
        CustomAllDonePageResults();
        String CustomAllDonePageTitle{ get; };
        String CustomAllDonePageBody{ get; };
        String CustomAllDonePageHyperlinkHref{ get; };
        String CustomAllDonePageHyperlinkText{ get; };
    }

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum DeviceManagementEnrollmentType
    {
        EnrollmentEnrollTypeMAM = 5,
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum ResourceToTrack
    {
        Policy,
        Networking,
        Applications,
        Certificates,
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    struct RefectedDeviceManagementUnenrollInformation
    {
        String EnrollmentId;
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    enum ReflectedJoinType
    {
        DeviceJoin,
        UserJoin,
        MAMWithDiscovery,
        MAMWithoutDiscovery,
        BulkDeviceJoin,
        DeviceJoinForDomainJoin,
        DeviceJoinFromUX,
        UserJoinFromUX,
        PlugAndForget,
        WhiteGlove,
        WhiteGloveHybridJoin,
    };

    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    struct ReflectedDeviceManagementDeviceEnrollmentInformation
    {
        String UPN;
        String DiscoveryServiceFullUrl;
        String TokenForMDM;
        String TermsOfUseArtifact;
        ReflectedJoinType Join;
        String AccountID;
        String AadResourceUrl;
        String OpaqueID;
    };


    [marshaling_behavior(agile)]
    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [interface_name("EnterpriseDeviceManagement.Enrollment.IReflectedEnrollment", 3490f9c9-9703-46d0-b778-1ec23b82f926)]
    [threading(both)]
    runtimeclass ReflectedEnroller
    {
        ReflectedEnroller();
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.FindDiscoveryResults>  FindDiscoveryServiceAsync(String upn, Boolean ignoreInsecureRedirect);
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.DiscoverEndpointsResults>  DiscoverEndpointsAsync(String discoveryServiceFullUrl, String upn, Boolean ignoreUnknownCA);
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.ReflectedEnrollmentResult>  EnrollAsync(String upn, String discoveryServiceFullUrl, String secret, ReflectedMDMAuthPolicy authPolicy, String domainUsername, String policyServiceFullUrl, String enrollmentServiceFullUrl, String correlationVector, UInt32 enrollmentFlags, String sid);
        void AllowAuthUri(Windows.Foundation.Uri authUri);
        void RemoveAuthUriAllowList();
        void EventWriteForEnrollment(DMLoggingEvent loggingEvent, HRESULT errorCode);
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.CustomAllDonePageResults>  RetrieveCustomAllDonePageAsync();
        Windows.Foundation.IAsyncAction SetEnrollmentAsDormant(String enrollmentID, Int32 Dormant, Int32 TriggerMerge);
        Windows.Foundation.IAsyncAction CompleteMAMToMDMUpgrade(String MDMEnrollmentID, String MAMEnrollmentID, Int32 RolledBack);
        Windows.Foundation.IAsyncOperation <String>  GetEnrollment(DeviceManagementEnrollmentType Type);
        Windows.Foundation.IAsyncOperation <String>  CreateCorrelationVector();
        Windows.Foundation.IAsyncAction CheckForDomainControllerConnectivity(UInt32 Timeout);
        Windows.Foundation.IAsyncOperation <Int32>  ShowMdmSyncStatusPageAsync(Int32 isOOBE);
        Windows.Foundation.IAsyncOperationWithProgress <EnterpriseDeviceManagement.Enrollment.ExpectedAndCurrentResourceAmount, EnterpriseDeviceManagement.Enrollment.ExpectedAndCurrentResourceProgress>  PollForExpectedPoliciesAndResources(ResourceToTrack trackedResource, Int32 launchedFromUX, MDMProgressMode targetContext);
        void UpdateServerWithResult(Int32 wasSuccessfullyProvisioned, Int32 isOOBE);
        void StartPollingTask();
        void ClearAutoLoginData();
        void SetWasContinuedAnyway(Int32 isOOBE);
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.MDMProgressMode>  CheckMDMProgressModeAsync();
        Windows.Foundation.IAsyncOperation <Int32>  CheckBlockingValueAsync();
        Windows.Foundation.IAsyncOperation <Int32>  ShouldShowCollectLogsAsync(Int32 isOOBE);
        Windows.Foundation.IAsyncAction CollectLogs(String folderPath);
        void ResetProgressTimeout(MDMProgressMode targetContext);
        Windows.Foundation.IAsyncOperation <String>  RetrieveCustomErrorText(Int32 isOOBE);
        Windows.Foundation.IAsyncOperation <EnterpriseDeviceManagement.Enrollment.ReflectedEnrollmentResult>  AADEnrollAsync(String UPN, String DiscoveryServiceFullUrl, String TokenForMDM, String TermsOfUseArtifact, UInt32 Join, String AccountID, String AadResourceUrl, String OpaqueID);
        Windows.Foundation.IAsyncAction UnenrollAsync(String EnrollmentID);
        Windows.Foundation.IAsyncOperation <String>  DsrGetCxhScenarioInfoWrapperAsync();
        Windows.Foundation.IAsyncAction AADCredentialsEnrollAsync(Int32 shouldPrompt);
        void PrepForFirstSignin();
        Windows.Foundation.IAsyncOperation <Boolean>  CheckRebootRequiredAsync();
        Windows.Foundation.IAsyncAction RebuildSchedulesAndSyncWithServerAsync();
        Windows.Foundation.IAsyncAction RecreateEnrollmentTasksAsync();
        Windows.Foundation.IAsyncAction ForceRunDeviceRegistrationScheduledTaskAsync();
        Windows.Foundation.IAsyncAction CollectLogsEx(String areaName, String outputFilePath);
        Windows.Foundation.IAsyncAction AADUnregisterAsync();
        Windows.Foundation.IAsyncAction CollectOneTrace(String outputFolderPath);
    }


    [contract(EnterpriseDeviceManagement.Enrollment.InternalContract, 1)]
    [static_name("EnterpriseDeviceManagement.Enrollment.IReflectedEnrollmentStatics", f19ed21a-c881-4ff2-9e89-a851605d0e15)]
    [threading(both)]
    runtimeclass ReflectedEnrollmentStatics
    {
        static Boolean ShouldSkip{ get; };
    }

}
