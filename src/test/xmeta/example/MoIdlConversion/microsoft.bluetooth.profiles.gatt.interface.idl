









namespace Microsoft.Bluetooth.Profiles.Gatt.Interface
{
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattConnectionMode
    {
        Passive,
        Active,
        Proactive,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattCacheOption
    {
        CacheOnly,
        CachePreferred,
        Uncached,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattCommunicationStatus
    {
        Success,
        Unreachable,
        ProtocolError,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattServiceType
    {
        Primary,
        Secondary,
        Unknown,
    };

    [flags]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattCharacteristicProperties
    {
        None,
        Broadcast,
        Read,
        WriteWithoutResponse = 4,
        Write = 8,
        Notify = 16,
        Indicate = 32,
        AuthenticatedSignedWrites = 64,
        ExtendedProperties = 128,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattDescriptorType
    {
        Custom,
        CharacteristicExtendedProperties = 10496,
        CharacteristicUserDescription,
        ClientCharacteristicConfiguration,
        ServerCharacteristicConfiguration,
        CharacteristicPresentationFormat,
        CharacteristicAggregateFormat,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattClientSharingOptions
    {
        Disabled,
        Shared,
        Exclusive,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattClientServiceSessionStatus
    {
        Disconnected,
        Connected,
        Removed,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattWriteOption
    {
        WithResponse,
        WithoutResponse,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattAttributeType
    {
        Characteristic,
        Descriptor,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [flags]
    enum GattServerServiceStatus
    {
        None,
        Enabled,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [flags]
    enum GattSecurityFlags
    {
        Plain,
        EncryptionRequired,
        AuthenticationRequired,
        EncryptionAndAuthenticationRequired,
        NoAccess = 65535,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattServerRequestStatus
    {
        Pending,
        Completed,
        Aborted,
        Timeout,
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattAttributeHandle
    {
        UInt16 handle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattSecurityOptions
    {
        GattSecurityFlags ReadSecurity;
        GattSecurityFlags WriteSecurity;
        UInt32 MinimumEncryptionKeySize;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattClientServiceInfo
    {
        GattAttributeHandle startHandle;
        GattAttributeHandle endHandle;
        Guid serviceUuid;
        GattServiceType type;
        GattAttributeHandle attributeHandle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattClientCharacteristicInfo
    {
        GattAttributeHandle startHandle;
        GattAttributeHandle endHandle;
        Guid characteristicUuid;
        GattCharacteristicProperties characteristicProperties;
        GattAttributeHandle attributeHandle;
        GattAttributeHandle valueAttributeHandle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattClientDescriptorInfo
    {
        Guid descriptorUuid;
        GattDescriptorType type;
        GattAttributeHandle attributeHandle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattServerCharacteristicInfo
    {
        GattAttributeHandle startHandle;
        GattAttributeHandle endHandle;
        Guid characteristicUuid;
        GattCharacteristicProperties characteristicProperties;
        GattSecurityOptions securityOptions;
        GattAttributeHandle attributeHandle;
        GattAttributeHandle valueAttributeHandle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattServerDescriptorInfo
    {
        Guid descriptorUuid;
        GattDescriptorType type;
        GattSecurityOptions securityOptions;
        GattAttributeHandle attributeHandle;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattProtocolError
    {
        UInt8 errorCode;
        GattAttributeHandle attributeHandleInError;
    };

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    struct GattClientServiceSharingOptions
    {
        GattClientSharingOptions readOptions;
        GattClientSharingOptions writeOptions;
    };


    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [static_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattSessionStatics", 93d28c7d-1c0f-43d1-9181-56a0990c9b7e)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattSession", 71684276-58da-4a5d-8f49-cc9e795d94fe)]
    [threading(both)]
    runtimeclass GattSession
        : Windows.Foundation.IClosable
    {
        [remote_sync]static Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession>  CreateForAdapterAsync(UInt64 localAddress, Microsoft.Bluetooth.Core.Interface.GapRemoteAddress remoteAddress);
        void SetConnectionMode(GattConnectionMode mode);
        void SetConnectionModeWithFlags(GattConnectionMode mode, GattConnectionModeFlags flags);
        Boolean Connected{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSessionConnectedChangedArgs>  ConnectedChanged;
        UInt32 Mtu{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession, Object>  MtuChanged;
        Microsoft.Bluetooth.Core.Interface.GapRemoteAddress RemoteAddress{ get; };
        UInt64 LocalAddress{ get; };
        Microsoft.Bluetooth.Core.Interface.GapTransports Transport{ get; };
    }

    [flags]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    enum GattConnectionModeFlags
    {
        None,
        IncludeUndiscoveredDevices,
    };


    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattSessionConnectedChangedArgs", 8e8ad2b3-4b36-4ac1-b85e-86976da1bceb)]
    runtimeclass GattSessionConnectedChangedArgs
    {
        Boolean Connected{ get; };
        HRESULT Reason{ get; };
    }



    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [static_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientDeviceStatics", f5f25357-c382-41af-9715-4c9db8b0b984)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientDevice", a377e574-1d41-43a5-89ea-b2b531d3f0f9)]
    [threading(both)]
    runtimeclass GattClientDevice
        : Windows.Foundation.IClosable
    {
        [method_name("CreateAsync")] [remote_sync]static Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDevice>  CreateAsync(Microsoft.Bluetooth.Core.Interface.GapRemoteAddress remoteAddress, GattConnectionMode connectionMode, String userSid, String packageFamilyName, UInt32 processId);
        [method_name("CreateForAdapterAsync")] [remote_sync]static Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDevice>  CreateAsync(UInt64 localAddress, Microsoft.Bluetooth.Core.Interface.GapRemoteAddress remoteAddress, GattConnectionMode connectionMode, String userSid, String packageFamilyName, UInt32 processId);
        static event Windows.Foundation.EventHandler <Microsoft.Bluetooth.Core.Interface.GapRemoteAddress>  CachedServicesChanged;
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattConnectionMode ConnectionMode{ set; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattConnectionMode ConnectionMode{ get; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServicesResult>  GetPrimaryServicesAsync(GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServicesResult>  GetPrimaryServicesByUuidAsync(Guid serviceUuid, GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServicesResult>  GetPrimaryServicesInRangeAsync(GattAttributeHandle startingHandle, GattAttributeHandle endingHandle, GattCacheOption cacheOption);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServiceDiscovery GetServiceDiscovery(GattClientServiceInfo service);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientService CreateClientService(GattClientServiceInfo serviceInfo, GattClientServiceSharingOptions sharingOptions, GattConnectionMode connectionMode);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientWriteTransaction CreateWriteTransaction();
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDevice, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServicesChangedEventArgs>  ServicesChanged;
    }


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientServicesResult", 18b7875f-1b0d-4487-ba90-50c213d3771a)]
    runtimeclass GattClientServicesResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Boolean IsResultComplete{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
        Windows.Foundation.Collections.IVectorView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServiceInfo>  Services{ get; };
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientServiceDiscovery", 4fb08ebc-6146-499b-bd64-9f209c788eec)]
    runtimeclass GattClientServiceDiscovery
    {
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServicesResult>  GetIncludedServicesAsync(GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServicesResult>  GetIncludedServicesByUuidAsync(Guid serviceUuid, GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristicsResult>  GetCharacteristicsAsync(GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristicsResult>  GetCharacteristicsByUuidAsync(Guid characteristicUuid, GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDescriptorsResult>  GetDescriptorsAsync(GattClientCharacteristicInfo parent, GattCacheOption cacheOption);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDescriptorsResult>  GetDescriptorsByUuidAsync(GattClientCharacteristicInfo parent, Guid descriptorUuid, GattCacheOption cacheOption);
    }

    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientService", c856b23b-8168-4833-b9b0-18bbc6de7b61)]
    runtimeclass GattClientService
        : Windows.Foundation.IClosable
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServiceSessionStatus Status{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattConnectionMode ConnectionMode{ set; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattConnectionMode ConnectionMode{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientServiceDiscovery GetServiceDiscovery();
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristic GetCharacteristic(GattClientCharacteristicInfo characteristicInfo);
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientService, Object>  ServiceStatusChanged;
    }

    [marshaling_behavior(agile)]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientWriteTransaction", c5adb5ff-ca22-4c32-9d96-46e9fcf06f9f)]
    runtimeclass GattClientWriteTransaction
        : Windows.Foundation.IClosable
    {
        void WriteCharacteristicValue(GattClientCharacteristic characteristic, GattSecurityFlags securityMode, Windows.Storage.Streams.IBuffer value);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientWriteResult>  CommitAsync();
    }

    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServicesChangedEventArgs", d2101d4f-a89a-42d7-91be-28b94f08d792)]
    runtimeclass GattServicesChangedEventArgs
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle StartingHandle{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle EndingHandle{ get; };
    }


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientCharacteristic", 588e027c-5a66-4c7a-8db4-294047369c53)]
    runtimeclass GattClientCharacteristic
    {
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientReadResult>  ReadCharacteristicValueAsync(GattCacheOption cacheOption, GattSecurityFlags securityMode);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientWriteResult>  WriteCharacteristicValueAsync(GattWriteOption writeOption, GattSecurityFlags securityMode, Windows.Storage.Streams.IBuffer value);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientReadResult>  ReadDescriptorValueAsync(GattClientDescriptorInfo descriptor, GattCacheOption cacheOption, GattSecurityFlags securityMode);
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientWriteResult>  WriteDescriptorValueAsync(GattClientDescriptorInfo descriptor, GattSecurityFlags securityMode, Windows.Storage.Streams.IBuffer value);
        event Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristicValueChangedEventHandler CharacteristicValueChanged;
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristicInfo CharacteristicInfo{ get; };
    }

    [uuid(13dee2ca-047e-4d42-85d5-ed83d725a6b8)]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    delegate void GattClientCharacteristicValueChangedEventHandler(GattClientCharacteristic sender, Windows.Storage.Streams.IBuffer value, Windows.Foundation.DateTime timestamp);


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientReadResult", b659f2f9-e326-4eeb-bc74-42a3cfe9c922)]
    runtimeclass GattClientReadResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
        Windows.Storage.Streams.IBuffer Value{ get; };
    }

    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientWriteResult", e41a68e6-00cc-4c1a-8665-e4a0583ff49a)]
    runtimeclass GattClientWriteResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
    }


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientCharacteristicsResult", 43b50a68-ab05-4ca2-b8b4-0f1c81dc0321)]
    runtimeclass GattClientCharacteristicsResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Boolean IsResultComplete{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
        Windows.Foundation.Collections.IVectorView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientCharacteristicInfo>  Characteristics{ get; };
    }

    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientDescriptorsResult", 9569642b-441f-418b-a6d7-64ba6d45d46d)]
    runtimeclass GattClientDescriptorsResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Boolean IsResultComplete{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
        Windows.Foundation.Collections.IVectorView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattClientDescriptorInfo>  Descriptors{ get; };
    }





    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattClientReadByUuidResult", 7a8d1e92-af12-4006-8970-782c72228748)]
    runtimeclass GattClientReadByUuidResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
        Windows.Foundation.Collections.IMapView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle, Windows.Storage.Streams.IBuffer>  Values{ get; };
    }






    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [static_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerRegistrarStatics", aa2b193d-707d-4227-80a0-42030af0f406)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerRegistrar", 878d14e7-b928-4b22-a5a8-6cfe7fb1aa46)]
    [threading(both)]
    runtimeclass GattServerRegistrar
    {
        [method_name("GetInstanceForAdapter")] static Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRegistrar GetInstance(UInt64 localAdapter);
        UInt64 LocalAdapter{ get; };
        [method_name("CreateNewService")] Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService CreateNewService(Guid serviceUuid, GattServiceType serviceType, Microsoft.Bluetooth.Core.Interface.GapTransports transports, UInt16 numHandles);
        [method_name("CreateNewServiceAtHandle")] Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService CreateNewService(Guid serviceUuid, GattServiceType serviceType, Microsoft.Bluetooth.Core.Interface.GapTransports transports, GattAttributeHandle startHandle, UInt16 numHandles);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService CreateNewServiceFromStaticReservation(Guid serviceUuid, GattServiceType serviceType, Microsoft.Bluetooth.Core.Interface.GapTransports transports, Guid staticReservationId);
        void RegisterPersistedService(Guid id);
        void UnregisterPersistedService(Guid id);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService RestorePersistedService(Guid id, String userSid, String packageFamilyName);
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService LookupServiceById(Guid id);
        Windows.Foundation.Collections.IMapView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService>  AllServices{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRegistrar, Object>  AllServicesChanged;
    }


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerService", 3f07f2fb-1f31-4f2c-b2bd-3a2e8de48b2c)]
    runtimeclass GattServerService
    {
        Guid Id{ get; };
        UInt64 LocalAdapter{ get; };
        Microsoft.Bluetooth.Core.Interface.GapTransports Transports{ get; };
        String PackageId{ get; };
        String UserSecurityId{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle StartingHandle{ get; };
        UInt16 HandleCount{ get; };
        Guid ServiceUuid{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServiceType ServiceType{ get; };
        void Enable();
        void Disable();
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerServiceStatus Status{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerServiceStatusChangedArgs>  StatusChanged;
        void AddIncludedService(GattAttributeHandle attributeHandle, GattServerService includedService);
        Windows.Foundation.Collections.IVectorView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService>  GetIncludedServices();
        void CreateCharacteristic(Guid characteristicUuid, GattCharacteristicProperties characteristicProperties, GattSecurityOptions securityOptions, GattAttributeHandle startingAttributeHandle, UInt16 handleCount);
        Windows.Foundation.Collections.IMapView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerCharacteristicInfo>  GetCharacteristics();
        void UpdateCharacteristicStaticValue(GattAttributeHandle characteristicAttributeHandle, Windows.Storage.Streams.IBuffer value);
        Windows.Storage.Streams.IBuffer GetCharacteristicStaticValue(GattAttributeHandle characteristicAttributeHandle);
        Windows.Foundation.Collections.IVectorView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRemoteCharacteristicClient>  GetSubscribedClientsForCharacteristic(GattAttributeHandle characteristicAttributeHandle);
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle>  SubscribedClientsForCharacteristicChanged;
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerNotificationResult>  NotifyCharacteristicValueToClientAsync(GattAttributeHandle characteristicAttributeHandle, Windows.Storage.Streams.IBuffer value, GattServerRemoteCharacteristicClient client);
        void CreateDescriptorForCharacteristic(GattAttributeHandle characteristicAttributeHandle, Guid descriptorUuid, GattSecurityOptions securityOptions, GattAttributeHandle descriptorAttributeHandle);
        void CreateCccdForCharacteristic(GattAttributeHandle characteristicAttributeHandle, GattSecurityOptions securityOptions, GattAttributeHandle descriptorAttributeHandle, Boolean activeCccd);
        Windows.Foundation.Collections.IMapView <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerDescriptorInfo>  GetDescriptorsFromCharacteristic(GattAttributeHandle characteristicAttributeHandle);
        void UpdateDescriptorStaticValue(GattAttributeHandle descriptorAttributeHandle, Windows.Storage.Streams.IBuffer value);
        Windows.Storage.Streams.IBuffer GetDescriptorStaticValue(GattAttributeHandle descriptorAttributeHandle);
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerReadRequestArgs>  ReadRequest;
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerService, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerWriteRequestArgs>  WriteRequest;
    }


    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerServiceStatusChangedArgs", 468f3b69-12f4-44f2-b093-8367b2bcd238)]
    runtimeclass GattServerServiceStatusChangedArgs
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerServiceStatus Status{ get; };
        HRESULT Reason{ get; };
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerRemoteCharacteristicClient", 345e09cb-ebd8-4059-9bea-45084992cb7a)]
    runtimeclass GattServerRemoteCharacteristicClient
    {
        Guid Id{ get; };
        Boolean Notifiable{ get; };
        Boolean Indicatable{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle AttibuteHandle{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession Session{ get; };
    }

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerNotificationResult", f2d976c5-2219-4d22-884c-55bfd9df581a)]
    runtimeclass GattServerNotificationResult
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRemoteCharacteristicClient Client{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattCommunicationStatus CommunicationStatus{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattProtocolError ProtocolError{ get; };
    }

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerReadRequestArgs", 94b77b10-1368-4435-a6d4-477b7886ece8)]
    runtimeclass GattServerReadRequestArgs
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession Session{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle AttributeHandle{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeType AttributeType{ get; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerReadRequest>  GetRequestAsync();
    }

    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerWriteRequestArgs", 4b012d99-d107-41fa-8a34-d75d57501c9a)]
    runtimeclass GattServerWriteRequestArgs
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattSession Session{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeHandle AttributeHandle{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattAttributeType AttributeType{ get; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerWriteRequest>  GetRequestAsync();
    }





    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerReadRequest", cf53564a-996b-4a5b-9ba7-069ab8edb11e)]
    runtimeclass GattServerReadRequest
    {
        UInt32 Offset{ get; };
        UInt32 Length{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRequestStatus Status{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerReadRequest, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRequestUpdatedArgs>  RequestUpdated;
        [default_overload]
        [method_name("SendResponse")] void SendResponse(Windows.Storage.Streams.IBuffer value);
        [method_name("SendErrorResponse")] void SendResponse(UInt8 protocolStatus);
    }


    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerRequestUpdatedArgs", 500d0bf7-032a-475c-b21f-41e4aa87b8f8)]
    runtimeclass GattServerRequestUpdatedArgs
    {
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRequestStatus Status{ get; };
        HRESULT Reason{ get; };
    }


    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerWriteRequest", b56434ae-f0d0-4750-854b-86b545958337)]
    runtimeclass GattServerWriteRequest
    {
        UInt32 Offset{ get; };
        Windows.Storage.Streams.IBuffer Value{ get; };
        Boolean ResponseRequired{ get; };
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRequestStatus Status{ get; };
        event Windows.Foundation.TypedEventHandler <Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerWriteRequest, Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerRequestUpdatedArgs>  RequestUpdated;
        [default_overload]
        [method_name("SendResponse")] void SendResponse();
        [method_name("SendErrorResponse")] void SendResponse(UInt8 protocolStatus);
    }




    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerFirewallSession", 4efac8b9-5127-4b64-94c7-f6e7c7068a7e)]
    runtimeclass GattServerFirewallSession
        : Windows.Foundation.IClosable
    {
    }

    [webhosthidden]
    [contract(Microsoft.Bluetooth.Interface.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Microsoft.Bluetooth.Profiles.Gatt.Interface.IGattServerFirewall", 064e1511-b4ae-41fa-8af6-989ba4c52466)]
    [threading(both)]
    runtimeclass GattServerFirewall
    {
        GattServerFirewall();
        Microsoft.Bluetooth.Profiles.Gatt.Interface.GattServerFirewallSession OpenForSession(GattSession gattSession, String userSid, String packageName);
    }


}
