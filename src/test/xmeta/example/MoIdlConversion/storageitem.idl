














namespace Windows.Storage.Provider
{
    [contractversion(3)]
    apicontract CloudFilesContract{};

}
namespace Windows.Storage.FileProperties
{
    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PropertyPrefetchOptions
    {
        None,
        MusicProperties,
        VideoProperties,
        ImageProperties = 4,
        DocumentProperties = 8,
        BasicProperties = 16,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ThumbnailType
    {
        Image,
        Icon,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass StorageItemThumbnail
        : [default]Windows.Storage.Streams.IRandomAccessStreamWithContentType
        , Windows.Storage.Streams.IContentTypeProvider
        , Windows.Storage.Streams.IRandomAccessStream
        , Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
        , Windows.Storage.Streams.IInputStream
    {

        [interface_name("Windows.Storage.FileProperties.IThumbnailProperties", 693dd42f-dbe7-49b5-b3b3-2893ac5d3423)]
        {
            UInt32 OriginalWidth{ get; };
            UInt32 OriginalHeight{ get; };
            Boolean ReturnedSmallerCachedSize{ get; };
            Windows.Storage.FileProperties.ThumbnailType Type{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ThumbnailMode
    {
        PicturesView,
        VideosView,
        MusicView,
        DocumentsView,
        ListView,
        SingleItem,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [flags]
    enum ThumbnailOptions
    {
        None,
        ReturnOnlyIfCached,
        ResizeThumbnail,
        UseCurrentScale = 4,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PhotoOrientation
    {
        Unspecified,
        Normal,
        FlipHorizontal,
        Rotate180,
        FlipVertical,
        Transpose,
        Rotate270,
        Transverse,
        Rotate90,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum VideoOrientation
    {
        Normal,
        Rotate90 = 90,
        Rotate180 = 180,
        Rotate270 = 270,
    };

    [uuid(c54361b2-54cd-432b-bdbc-4b19c4b470d7)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IStorageItemExtraProperties
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IMap <String, Object> >  RetrievePropertiesAsync(Windows.Foundation.Collections.IIterable <String>  propertiesToRetrieve);
        [method_name("SavePropertiesAsync")] [remote_sync]Windows.Foundation.IAsyncAction SavePropertiesAsync([hasvariant]Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <String, Object> >  propertiesToSave);
        [method_name("SavePropertiesAsyncOverloadDefault")] Windows.Foundation.IAsyncAction SavePropertiesAsync();
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IMusicProperties", bc8aab62-66ec-419a-bc5d-ca65a4cb46da)]
    runtimeclass MusicProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        String Album{ get; };
        String Album{ set; };
        String Artist{ get; };
        String Artist{ set; };
        Windows.Foundation.Collections.IVector <String>  Genre{ get; };
        UInt32 TrackNumber{ get; };
        UInt32 TrackNumber{ set; };
        String Title{ get; };
        String Title{ set; };
        UInt32 Rating{ get; };
        UInt32 Rating{ set; };
        Windows.Foundation.TimeSpan Duration{ get; };
        UInt32 Bitrate{ get; };
        String AlbumArtist{ get; };
        String AlbumArtist{ set; };
        Windows.Foundation.Collections.IVector <String>  Composers{ get; };
        Windows.Foundation.Collections.IVector <String>  Conductors{ get; };
        String Subtitle{ get; };
        String Subtitle{ set; };
        Windows.Foundation.Collections.IVector <String>  Producers{ get; };
        String Publisher{ get; };
        String Publisher{ set; };
        Windows.Foundation.Collections.IVector <String>  Writers{ get; };
        UInt32 Year{ get; };
        UInt32 Year{ set; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IVideoProperties", 719ae507-68de-4db8-97de-49998c059f2f)]
    runtimeclass VideoProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        UInt32 Rating{ get; };
        UInt32 Rating{ set; };
        Windows.Foundation.Collections.IVector <String>  Keywords{ get; };
        UInt32 Width{ get; };
        UInt32 Height{ get; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Foundation.IReference <Double>  Latitude{ get; };
        Windows.Foundation.IReference <Double>  Longitude{ get; };
        String Title{ get; };
        String Title{ set; };
        String Subtitle{ get; };
        String Subtitle{ set; };
        Windows.Foundation.Collections.IVector <String>  Producers{ get; };
        String Publisher{ get; };
        String Publisher{ set; };
        Windows.Foundation.Collections.IVector <String>  Writers{ get; };
        UInt32 Year{ get; };
        UInt32 Year{ set; };
        UInt32 Bitrate{ get; };
        Windows.Foundation.Collections.IVector <String>  Directors{ get; };
        Windows.Storage.FileProperties.VideoOrientation Orientation{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IImageProperties", 523c9424-fcff-4275-afee-ecdb9ab47973)]
    runtimeclass ImageProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        UInt32 Rating{ get; };
        UInt32 Rating{ set; };
        Windows.Foundation.Collections.IVector <String>  Keywords{ get; };
        Windows.Foundation.DateTime DateTaken{ get; };
        Windows.Foundation.DateTime DateTaken{ set; };
        UInt32 Width{ get; };
        UInt32 Height{ get; };
        String Title{ get; };
        String Title{ set; };
        Windows.Foundation.IReference <Double>  Latitude{ get; };
        Windows.Foundation.IReference <Double>  Longitude{ get; };
        String CameraManufacturer{ get; };
        String CameraManufacturer{ set; };
        String CameraModel{ get; };
        String CameraModel{ set; };
        Windows.Storage.FileProperties.PhotoOrientation Orientation{ get; };
        Windows.Foundation.Collections.IVectorView <String>  PeopleNames{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IDocumentProperties", 7eab19bc-1821-4923-b4a9-0aea404d0070)]
    runtimeclass DocumentProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        Windows.Foundation.Collections.IVector <String>  Author{ get; };
        String Title{ get; };
        String Title{ set; };
        Windows.Foundation.Collections.IVector <String>  Keywords{ get; };
        String Comment{ get; };
        String Comment{ set; };
    }






    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IStorageItemContentProperties", 05294bad-bc38-48bf-85d7-770e0e2ae0ba)]
    runtimeclass StorageItemContentProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.MusicProperties>  GetMusicPropertiesAsync();
        Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.VideoProperties>  GetVideoPropertiesAsync();
        Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.ImageProperties>  GetImagePropertiesAsync();
        Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.DocumentProperties>  GetDocumentPropertiesAsync();
    }

    [muse(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.FileProperties.IBasicProperties", d05d55db-785e-4a66-be02-9beec58aea81)]
    runtimeclass BasicProperties
        : Windows.Storage.FileProperties.IStorageItemExtraProperties
    {
        UInt64 Size{ get; };
        Windows.Foundation.DateTime DateModified{ get; };
        Windows.Foundation.DateTime ItemDate{ get; };
    }

}
namespace Windows.Storage
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum KnownLibraryId
    {
        Music,
        Pictures,
        Videos,
        Documents,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.IStorageLibraryStatics", 4208a6db-684a-49c6-9e59-90121ee050d6)]
    [interface_name("Windows.Storage.IStorageLibrary", 1edd7103-0e5e-4d6c-b5e8-9318983d6a03)]
    runtimeclass StorageLibrary
    {

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [static_name("Windows.Storage.IStorageLibraryStatics2", ffb08ddc-fa75-4695-b9d1-7f81f97832e3)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageLibrary>  GetLibraryForUserAsync(Windows.System.User user, KnownLibraryId libraryId);
        }
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageLibrary>  GetLibraryAsync(KnownLibraryId libraryId);
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  RequestAddFolderAsync();
        [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  RequestRemoveFolderAsync(StorageFolder folder);
        Windows.Foundation.Collections.IObservableVector <Windows.Storage.StorageFolder>  Folders{ get; };
        Windows.Storage.StorageFolder SaveFolder{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Storage.StorageLibrary, Object>  DefinitionChanged;

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Storage.IStorageLibrary2", 5b0ce348-fcb3-4031-afb0-a68d7bd44534)]
        {
            Windows.Storage.StorageLibraryChangeTracker ChangeTracker{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.Storage.IStorageLibrary3", 8a281291-2154-4201-8113-d2c05ce1ad23)]
        {
            Windows.Foundation.IAsyncOperation <Boolean>  AreFolderSuggestionsAvailableAsync();
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.IStorageFolderStatics", 08f327ff-85d5-48b9-aee9-28511e339f9f)]
    runtimeclass StorageFolder
        : [default]Windows.Storage.IStorageFolder
        , Windows.Storage.IStorageItem
        , Windows.Storage.Search.IStorageFolderQueryOperations
        , Windows.Storage.IStorageItemProperties
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemProperties2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItem2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFolder2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemPropertiesWithProvider
    {
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetFolderFromPathAsync(String path);

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Storage.IStorageFolder3", 9f617899-bde1-4124-aeb3-b06ad96f98d4)]
        {
            Windows.Storage.StorageLibraryChangeTracker TryGetChangeTracker();
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.IStorageLibraryChangeTracker", 9e157316-6073-44f6-9681-7492d1286c90)]
    runtimeclass StorageLibraryChangeTracker
    {
        Windows.Storage.StorageLibraryChangeReader GetChangeReader();
        void Enable();
        void Reset();
    }


    [contract(Windows.Foundation.UniversalApiContract, 2)]
    enum KnownFolderId
    {
        AppCaptures,
        CameraRoll,
        DocumentsLibrary,
        HomeGroup,
        MediaServerDevices,
        MusicLibrary,
        Objects3D,
        PicturesLibrary,
        Playlists,
        RecordedCalls,
        RemovableDevices,
        SavedPictures,
        Screenshots,
        VideosLibrary,
        [contract(Windows.Foundation.UniversalApiContract, 4)]
        AllAppMods,
        [contract(Windows.Foundation.UniversalApiContract, 4)]
        CurrentAppMods,
    };







    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.IKnownFoldersSavedPicturesStatics", 055c93ea-253d-467c-b6ca-a97da1e9a18d)]
    runtimeclass KnownFolders
    {
        static Windows.Storage.StorageFolder SavedPictures{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Storage.IKnownFoldersStatics", 5a2a7520-4802-452d-9ad9-4351ada7ec35)]
        {
            static Windows.Storage.StorageFolder MusicLibrary{ get; };
            static Windows.Storage.StorageFolder PicturesLibrary{ get; };
            static Windows.Storage.StorageFolder VideosLibrary{ get; };
            static Windows.Storage.StorageFolder DocumentsLibrary{ get; };
            static Windows.Storage.StorageFolder HomeGroup{ get; };
            static Windows.Storage.StorageFolder RemovableDevices{ get; };
            static Windows.Storage.StorageFolder MediaServerDevices{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Storage.IKnownFoldersCameraRollStatics", 5d115e66-27e8-492f-b8e5-2f90896cd4cd)]
        {
            static Windows.Storage.StorageFolder CameraRoll{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Storage.IKnownFoldersPlaylistsStatics", dad5ecd6-306f-4d6a-b496-46ba8eb106ce)]
        {
            static Windows.Storage.StorageFolder Playlists{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Storage.IKnownFoldersStatics2", 194bd0cd-cf6e-4d07-9d53-e9163a2536e9)]
        {
            static Windows.Storage.StorageFolder Objects3D{ get; };
            static Windows.Storage.StorageFolder AppCaptures{ get; };
            static Windows.Storage.StorageFolder RecordedCalls{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [static_name("Windows.Storage.IKnownFoldersStatics3", c5194341-9742-4ed5-823d-fc1401148764)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetFolderForUserAsync(Windows.System.User user, KnownFolderId folderId);
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 5)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Storage.IUserDataPathsStatics", 01b29def-e062-48a1-8b0c-f2c7a9ca56c0)]
    [interface_name("Windows.Storage.IUserDataPaths", f9c53912-abc4-46ff-8a2b-dc9d7fa6e52f)]
    [threading(both)]
    runtimeclass UserDataPaths
    {
        static Windows.Storage.UserDataPaths GetForUser(Windows.System.User user);
        static Windows.Storage.UserDataPaths GetDefault();
        String CameraRoll{ get; };
        String Cookies{ get; };
        String Desktop{ get; };
        String Documents{ get; };
        String Downloads{ get; };
        String Favorites{ get; };
        String History{ get; };
        String InternetCache{ get; };
        String LocalAppData{ get; };
        String LocalAppDataLow{ get; };
        String Music{ get; };
        String Pictures{ get; };
        String Profile{ get; };
        String Recent{ get; };
        String RoamingAppData{ get; };
        String SavedPictures{ get; };
        String Screenshots{ get; };
        String Templates{ get; };
        String Videos{ get; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 5)]
    [static_name("Windows.Storage.IAppDataPathsStatics", d8eb2afe-a9d9-4b14-b999-e3921379d903)]
    [interface_name("Windows.Storage.IAppDataPaths", 7301d60a-79a2-48c9-9ec0-3fda092f79e1)]
    [threading(both)]
    runtimeclass AppDataPaths
    {
        static Windows.Storage.AppDataPaths GetForUser(Windows.System.User user);
        static Windows.Storage.AppDataPaths GetDefault();
        String Cookies{ get; };
        String Desktop{ get; };
        String Documents{ get; };
        String Favorites{ get; };
        String History{ get; };
        String InternetCache{ get; };
        String LocalAppData{ get; };
        String ProgramData{ get; };
        String RoamingAppData{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 5)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Storage.ISystemDataPathsStatics", e0f96fd0-9920-4bca-b379-f96fdf7caad8)]
    [interface_name("Windows.Storage.ISystemDataPaths", e32abf70-d8fa-45ec-a942-d2e26fb60ba5)]
    [threading(both)]
    runtimeclass SystemDataPaths
    {
        static Windows.Storage.SystemDataPaths GetDefault();
        String Fonts{ get; };
        String ProgramData{ get; };
        String Public{ get; };
        String PublicDesktop{ get; };
        String PublicDocuments{ get; };
        String PublicDownloads{ get; };
        String PublicMusic{ get; };
        String PublicPictures{ get; };
        String PublicVideos{ get; };
        String System{ get; };
        String SystemHost{ get; };
        String SystemX86{ get; };
        String SystemX64{ get; };
        String SystemArm{ get; };
        String UserProfiles{ get; };
        String Windows{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CreationCollisionOption
    {
        GenerateUniqueName,
        ReplaceExisting,
        FailIfExists,
        OpenIfExists,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [muse(0x6020000)]
    [static_name("Windows.Storage.IStorageFileStatics", 5984c710-daf2-43c8-8bb4-a4d3eacfd03f)]
    runtimeclass StorageFile
        : [default]Windows.Storage.IStorageFile
        , Windows.Storage.Streams.IInputStreamReference
        , Windows.Storage.Streams.IRandomAccessStreamReference
        , Windows.Storage.IStorageItem
        , Windows.Storage.IStorageItemProperties
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemProperties2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItem2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemPropertiesWithProvider
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFilePropertiesWithAvailability
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFile2
    {
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  GetFileFromPathAsync(String path);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  GetFileFromApplicationUriAsync(Windows.Foundation.Uri uri);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateStreamedFileAsync(String displayNameWithExtension, StreamedFileDataRequestedHandler dataRequested, Windows.Storage.Streams.IRandomAccessStreamReference thumbnail);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  ReplaceWithStreamedFileAsync(IStorageFile fileToReplace, StreamedFileDataRequestedHandler dataRequested, Windows.Storage.Streams.IRandomAccessStreamReference thumbnail);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateStreamedFileFromUriAsync(String displayNameWithExtension, Windows.Foundation.Uri uri, Windows.Storage.Streams.IRandomAccessStreamReference thumbnail);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  ReplaceWithStreamedFileFromUriAsync(IStorageFile fileToReplace, Windows.Foundation.Uri uri, Windows.Storage.Streams.IRandomAccessStreamReference thumbnail);
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.IDownloadsFolderStatics", 27862ed0-404e-47df-a1e2-e37308be7b37)]
    runtimeclass DownloadsFolder
    {

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [static_name("Windows.Storage.IDownloadsFolderStatics2", e93045bd-8ef8-4f8e-8d15-ac0e265f390d)]
        {
            [method_name("CreateFileForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileForUserAsync(Windows.System.User user, String desiredName);
            [method_name("CreateFolderForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderForUserAsync(Windows.System.User user, String desiredName);
            [method_name("CreateFileForUserWithCollisionOptionAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileForUserAsync(Windows.System.User user, String desiredName, CreationCollisionOption option);
            [method_name("CreateFolderForUserWithCollisionOptionAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderForUserAsync(Windows.System.User user, String desiredName, CreationCollisionOption option);
        }
        [method_name("CreateFileAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileAsync(String desiredName);
        [method_name("CreateFolderAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderAsync(String desiredName);
        [method_name("CreateFileWithCollisionOptionAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileAsync(String desiredName, CreationCollisionOption option);
        [method_name("CreateFolderWithCollisionOptionAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderAsync(String desiredName, CreationCollisionOption option);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NameCollisionOption
    {
        GenerateUniqueName,
        ReplaceExisting,
        FailIfExists,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum StorageDeleteOption
    {
        Default,
        PermanentDelete,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum StorageItemTypes
    {
        None,
        File,
        Folder,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FileAttributes
    {
        Normal,
        ReadOnly,
        Directory = 16,
        Archive = 32,
        Temporary = 256,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        LocallyIncomplete = 512,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FileAccessMode
    {
        Read,
        ReadWrite,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum StorageLibraryChangeType
    {
        Created,
        Deleted,
        MovedOrRenamed,
        ContentsChanged,
        MovedOutOfLibrary,
        MovedIntoLibrary,
        ContentsReplaced,
        IndexingStatusChanged,
        EncryptionChanged,
        ChangeTrackingLost,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(4207a996-ca2f-42f7-bde8-8b10457a7f30)]
    interface IStorageItem
    {
        [method_name("RenameAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncAction RenameAsync(String desiredName);
        [method_name("RenameAsync")] Windows.Foundation.IAsyncAction RenameAsync(String desiredName, NameCollisionOption option);
        [method_name("DeleteAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncAction DeleteAsync();
        [method_name("DeleteAsync")] Windows.Foundation.IAsyncAction DeleteAsync(StorageDeleteOption option);
        Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.BasicProperties>  GetBasicPropertiesAsync();
        String Name{ get; };
        String Path{ get; };
        Windows.Storage.FileAttributes Attributes{ get; };
        Windows.Foundation.DateTime DateCreated{ get; };
        Boolean IsOfType(StorageItemTypes type);
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.Storage.IStorageLibraryChange", 00980b23-2be2-4909-aa48-159f5203a51e)]
    runtimeclass StorageLibraryChange
    {
        Windows.Storage.StorageLibraryChangeType ChangeType{ get; };
        String Path{ get; };
        String PreviousPath{ get; };
        Boolean IsOfType(StorageItemTypes type);
        Windows.Foundation.IAsyncOperation <Windows.Storage.IStorageItem>  GetStorageItemAsync();
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.IStorageLibraryChangeReader", f205bc83-fca2-41f9-8954-ee2e991eb96f)]
    runtimeclass StorageLibraryChangeReader
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageLibraryChange> >  ReadBatchAsync();
        Windows.Foundation.IAsyncAction AcceptChangesAsync();
    }


}
namespace Windows.Storage.Search
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct SortEntry
    {
        String PropertyName;
        Boolean AscendingOrder;
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DateStackOption
    {
        None,
        Year,
        Month,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum IndexerOption
    {
        UseIndexerWhenAvailable,
        OnlyUseIndexer,
        DoNotUseIndexer,
        [contract(Windows.Foundation.UniversalApiContract, 5)]
        OnlyUseIndexerAndOptimizeForIndexedProperties,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FolderDepth
    {
        Shallow,
        Deep,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CommonFileQuery
    {
        DefaultQuery,
        OrderByName,
        OrderByTitle,
        OrderByMusicProperties,
        OrderBySearchRank,
        OrderByDate,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CommonFolderQuery
    {
        DefaultQuery,
        GroupByYear = 100,
        GroupByMonth,
        GroupByArtist,
        GroupByAlbum,
        GroupByAlbumArtist,
        GroupByComposer,
        GroupByGenre,
        GroupByPublishedYear,
        GroupByRating,
        GroupByTag,
        GroupByAuthor,
        GroupByType,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum IndexedState
    {
        Unknown,
        NotIndexed,
        PartiallyIndexed,
        FullyIndexed,
    };

}
namespace Windows.Storage
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum StreamedFileFailureMode
    {
        Failed,
        CurrentlyUnavailable,
        Incomplete,
    };

    [uuid(1673fcce-dabd-4d50-beee-180b8a8191b6)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IStreamedFileDataRequest
    {
        void FailAndClose(StreamedFileFailureMode failureMode);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass StreamedFileDataRequest
        : [default]Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
        , Windows.Storage.IStreamedFileDataRequest
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(fef6a824-2fe1-4d07-a35b-b77c50b5f4cc)]
    delegate void StreamedFileDataRequestedHandler(StreamedFileDataRequest stream);


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(fa3f6186-4214-428c-a64c-14c9ac7315ea)]
    interface IStorageFile requires Windows.Storage.IStorageItem, Windows.Storage.Streams.IRandomAccessStreamReference, Windows.Storage.Streams.IInputStreamReference
    {
        String FileType{ get; };
        String ContentType{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenAsync(FileAccessMode accessMode);
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteAsync();
        [method_name("CopyOverloadDefaultNameAndOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CopyAsync(IStorageFolder destinationFolder);
        [method_name("CopyOverloadDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CopyAsync(IStorageFolder destinationFolder, String desiredNewName);
        [method_name("CopyOverload")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CopyAsync(IStorageFolder destinationFolder, String desiredNewName, NameCollisionOption option);
        Windows.Foundation.IAsyncAction CopyAndReplaceAsync(IStorageFile fileToReplace);
        [method_name("MoveOverloadDefaultNameAndOptions")] Windows.Foundation.IAsyncAction MoveAsync(IStorageFolder destinationFolder);
        [method_name("MoveOverloadDefaultOptions")] Windows.Foundation.IAsyncAction MoveAsync(IStorageFolder destinationFolder, String desiredNewName);
        [method_name("MoveOverload")] Windows.Foundation.IAsyncAction MoveAsync(IStorageFolder destinationFolder, String desiredNewName, NameCollisionOption option);
        Windows.Foundation.IAsyncAction MoveAndReplaceAsync(IStorageFile fileToReplace);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.IStorageStreamTransaction", f67cf363-a53d-4d94-ae2c-67232d93acdd)]
    runtimeclass StorageStreamTransaction
        : Windows.Foundation.IClosable
    {
        Windows.Storage.Streams.IRandomAccessStream Stream{ get; };
        Windows.Foundation.IAsyncAction CommitAsync();
    }

    [uuid(72d1cb78-b3ef-4f75-a80b-6fd9dae2944b)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IStorageFolder requires Windows.Storage.IStorageItem
    {
        [method_name("CreateFileAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileAsync(String desiredName);
        [method_name("CreateFileAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CreateFileAsync(String desiredName, CreationCollisionOption options);
        [method_name("CreateFolderAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderAsync(String desiredName);
        [method_name("CreateFolderAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  CreateFolderAsync(String desiredName, CreationCollisionOption options);
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  GetFileAsync(String name);
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetFolderAsync(String name);
        Windows.Foundation.IAsyncOperation <Windows.Storage.IStorageItem>  GetItemAsync(String name);
        [method_name("GetFilesAsyncOverloadDefaultOptionsStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  GetFilesAsync();
        [method_name("GetFoldersAsyncOverloadDefaultOptionsStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFolder> >  GetFoldersAsync();
        [method_name("GetItemsAsyncOverloadDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem> >  GetItemsAsync();
    };

}
namespace Windows.Storage.Streams
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(43929d18-5ec9-4b5a-919c-4205b0c804b6)]
    interface IInputStreamReference
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IInputStream>  OpenSequentialReadAsync();
    };


}
namespace Windows.Storage
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(53f926d2-083c-4283-b45b-81c007237e44)]
    interface IStorageItem2 requires Windows.Storage.IStorageItem
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetParentAsync();
        Boolean IsEqual(IStorageItem item);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(86664478-8029-46fe-a789-1c2f3e2ffb5c)]
    interface IStorageItemProperties
    {
        [method_name("GetThumbnailAsyncOverloadDefaultSizeDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode);
        [method_name("GetThumbnailAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedSize);
        [method_name("GetThumbnailAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedSize, Windows.Storage.FileProperties.ThumbnailOptions options);
        String DisplayName{ get; };
        String DisplayType{ get; };
        String FolderRelativeId{ get; };
        Windows.Storage.FileProperties.StorageItemContentProperties Properties{ get; };
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(8e86a951-04b9-4bd2-929d-fef3f71621d0)]
    interface IStorageItemProperties2 requires Windows.Storage.IStorageItemProperties
    {
        [method_name("GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetScaledImageAsThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode);
        [method_name("GetScaledImageAsThumbnailAsyncOverloadDefaultOptions")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetScaledImageAsThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedSize);
        [method_name("GetScaledImageAsThumbnailAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.FileProperties.StorageItemThumbnail>  GetScaledImageAsThumbnailAsync(Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedSize, Windows.Storage.FileProperties.ThumbnailOptions options);
    };

    [uuid(861bf39b-6368-4dee-b40e-74684a5ce714)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IStorageItemPropertiesWithProvider requires Windows.Storage.IStorageItemProperties
    {
        Windows.Storage.StorageProvider Provider{ get; };
    };

    [muse(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    [interface_name("Windows.Storage.IStorageProvider", e705eed4-d478-47d6-ba46-1a8ebe114a20)]
    runtimeclass StorageProvider
    {
        String Id{ get; };
        String DisplayName{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.Storage.IStorageProvider2", 010d1917-3404-414b-9fd7-cd44472eaa39)]
        {
            Windows.Foundation.IAsyncOperation <Boolean>  IsPropertySupportedForPartialFileAsync(String propertyCanonicalName);
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(afcbbe9b-582b-4133-9648-e44ca46ee491)]
    interface IStorageFilePropertiesWithAvailability
    {
        Boolean IsAvailable{ get; };
    };






}
namespace Windows.Storage.Search
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Storage.Search.IQueryOptionsFactory", 032e1f8c-a9c1-4e71-8011-0dee9d4811a3)]
    [interface_name("Windows.Storage.Search.IQueryOptions", 1e5e46ee-0f45-4838-a8e9-d0479d446c30)]
    runtimeclass QueryOptions
    {
        [method_name( "CreateCommonFileQuery" )] QueryOptions(CommonFileQuery query, Windows.Foundation.Collections.IIterable <String>  fileTypeFilter);
        [method_name( "CreateCommonFolderQuery" )] QueryOptions(CommonFolderQuery query);
        QueryOptions();
        Windows.Foundation.Collections.IVector <String>  FileTypeFilter{ get; };
        Windows.Storage.Search.FolderDepth FolderDepth{ get; };
        Windows.Storage.Search.FolderDepth FolderDepth{ set; };
        String ApplicationSearchFilter{ get; };
        String ApplicationSearchFilter{ set; };
        String UserSearchFilter{ get; };
        String UserSearchFilter{ set; };
        String Language{ get; };
        String Language{ set; };
        Windows.Storage.Search.IndexerOption IndexerOption{ get; };
        Windows.Storage.Search.IndexerOption IndexerOption{ set; };
        Windows.Foundation.Collections.IVector <Windows.Storage.Search.SortEntry>  SortOrder{ get; };
        String GroupPropertyName{ get; };
        Windows.Storage.Search.DateStackOption DateStackOption{ get; };
        String SaveToString();
        void LoadFromString(String value);
        void SetThumbnailPrefetch(Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedSize, Windows.Storage.FileProperties.ThumbnailOptions options);
        void SetPropertyPrefetch(Windows.Storage.FileProperties.PropertyPrefetchOptions options, Windows.Foundation.Collections.IIterable <String>  propertiesToRetrieve);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Storage.Search.IQueryOptionsWithProviderFilter", 5b9d1026-15c4-44dd-b89a-47a59b7d7c4f)]
        {
            Windows.Foundation.Collections.IVector <String>  StorageProviderIdFilter{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(c297d70d-7353-47ab-ba58-8c61425dc54b)]
    interface IStorageQueryResultBase
    {
        Windows.Foundation.IAsyncOperation <UInt32>  GetItemCountAsync();
        Windows.Storage.StorageFolder Folder{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Search.IStorageQueryResultBase, Object>  ContentsChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Search.IStorageQueryResultBase, Object>  OptionsChanged;
        Windows.Foundation.IAsyncOperation <UInt32>  FindStartIndexAsync([variant]Object value);
        Windows.Storage.Search.QueryOptions GetCurrentQueryOptions();
        void ApplyNewQueryOptions(QueryOptions newQueryOptions);
    };





    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(cb43ccc9-446b-4a4f-be97-757771be5203)]
    interface IStorageFolderQueryOperations
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.Search.IndexedState>  GetIndexedStateAsync();
        [method_name("CreateFileQueryOverloadDefault")] Windows.Storage.Search.StorageFileQueryResult CreateFileQuery();
        [method_name("CreateFileQuery")] Windows.Storage.Search.StorageFileQueryResult CreateFileQuery(CommonFileQuery query);
        Windows.Storage.Search.StorageFileQueryResult CreateFileQueryWithOptions(QueryOptions queryOptions);
        [method_name("CreateFolderQueryOverloadDefault")] Windows.Storage.Search.StorageFolderQueryResult CreateFolderQuery();
        [method_name("CreateFolderQuery")] Windows.Storage.Search.StorageFolderQueryResult CreateFolderQuery(CommonFolderQuery query);
        Windows.Storage.Search.StorageFolderQueryResult CreateFolderQueryWithOptions(QueryOptions queryOptions);
        Windows.Storage.Search.StorageItemQueryResult CreateItemQuery();
        Windows.Storage.Search.StorageItemQueryResult CreateItemQueryWithOptions(QueryOptions queryOptions);
        [method_name("GetFilesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  GetFilesAsync(CommonFileQuery query, UInt32 startIndex, UInt32 maxItemsToRetrieve);
        [method_name("GetFilesAsyncOverloadDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  GetFilesAsync(CommonFileQuery query);
        [method_name("GetFoldersAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFolder> >  GetFoldersAsync(CommonFolderQuery query, UInt32 startIndex, UInt32 maxItemsToRetrieve);
        [method_name("GetFoldersAsyncOverloadDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFolder> >  GetFoldersAsync(CommonFolderQuery query);
        [method_name("GetItemsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem> >  GetItemsAsync(UInt32 startIndex, UInt32 maxItemsToRetrieve);
        Boolean AreQueryOptionsSupported(QueryOptions queryOptions);
        Boolean IsCommonFolderQuerySupported(CommonFolderQuery query);
        Boolean IsCommonFileQuerySupported(CommonFileQuery query);
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Search.IStorageFileQueryResult", 52fda447-2baa-412c-b29f-d4b1778efa1e)]
    runtimeclass StorageFileQueryResult
        : Windows.Storage.Search.IStorageQueryResultBase
    {
        [method_name("GetFilesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  GetFilesAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        [method_name("GetFilesAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  GetFilesAsync();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Storage.Search.IStorageFileQueryResult2", 4e5db9dd-7141-46c4-8be3-e9dc9e27275c)]
        {
            Windows.Foundation.Collections.IMap <String, Windows.Foundation.Collections.IVectorView <Windows.Data.Text.TextSegment> >  GetMatchingPropertiesWithRanges(Windows.Storage.StorageFile file);
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Search.IStorageFolderQueryResult", 6654c911-7d66-46fa-aecf-e4a4baa93ab8)]
    runtimeclass StorageFolderQueryResult
        : Windows.Storage.Search.IStorageQueryResultBase
    {
        [method_name("GetFoldersAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFolder> >  GetFoldersAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        [method_name("GetFoldersAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFolder> >  GetFoldersAsync();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Search.IStorageItemQueryResult", e8948079-9d58-47b8-b2b2-41b07f4795f9)]
    runtimeclass StorageItemQueryResult
        : Windows.Storage.Search.IStorageQueryResultBase
    {
        [method_name("GetItemsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem> >  GetItemsAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        [method_name("GetItemsAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem> >  GetItemsAsync();
    }

}
namespace Windows.Storage.Provider
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FileUpdateStatus
    {
        Incomplete,
        Complete,
        UserInputNeeded,
        CurrentlyUnavailable,
        Failed,
        CompleteAndRenamed,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CachedFileOptions
    {
        None,
        RequireUpdateOnAccess,
        UseCachedFileWhenOffline,
        DenyAccessWhenOffline = 4,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ReadActivationMode
    {
        NotNeeded,
        BeforeAccess,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WriteActivationMode
    {
        ReadOnly,
        NotNeeded,
        AfterWrite,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.Provider.ICachedFileUpdaterStatics", 9fc90920-7bcf-4888-a81e-102d7034d7ce)]
    runtimeclass CachedFileUpdater
    {
        static void SetUpdateInformation(Windows.Storage.IStorageFile file, String contentId, ReadActivationMode readMode, WriteActivationMode writeMode, CachedFileOptions options);
    }

    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    [uuid(658d2f0e-63b7-4567-acf9-51abe301dda5)]
    interface IStorageProviderPropertyCapabilities
    {
        Boolean IsPropertySupported(String propertyCanonicalName);
    };

}
namespace Windows.Storage
{
    [uuid(e827e8b9-08d9-4a8e-a0ac-fe5ed3cbbbd3)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IStorageFolder2
    {
        Windows.Foundation.IAsyncOperation <Windows.Storage.IStorageItem>  TryGetItemAsync(String name);
    };



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [flags]
    enum StorageOpenOptions
    {
        None,
        AllowOnlyReaders,
        [contract(Windows.Foundation.UniversalApiContract, 4)]
        AllowReadersAndWriters,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(954e4bcf-0a77-42fb-b777-c2ed58a52e44)]
    interface IStorageFile2
    {
        [method_name("OpenWithOptionsAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenAsync(FileAccessMode accessMode, StorageOpenOptions options);
        [method_name("OpenTransactedWriteWithOptionsAsync")] Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteAsync(StorageOpenOptions options);
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Storage.IFileIOStatics", 887411eb-7f54-4732-a5f0-5e43e3b8c2f5)]
    [threading(both)]
    runtimeclass FileIO
    {
        [method_name("ReadTextAsync")] static Windows.Foundation.IAsyncOperation <String>  ReadTextAsync(IStorageFile file);
        [method_name("ReadTextWithEncodingAsync")] static Windows.Foundation.IAsyncOperation <String>  ReadTextAsync(IStorageFile file, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("WriteTextAsync")] static Windows.Foundation.IAsyncAction WriteTextAsync(IStorageFile file, String contents);
        [method_name("WriteTextWithEncodingAsync")] static Windows.Foundation.IAsyncAction WriteTextAsync(IStorageFile file, String contents, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("AppendTextAsync")] static Windows.Foundation.IAsyncAction AppendTextAsync(IStorageFile file, String contents);
        [method_name("AppendTextWithEncodingAsync")] static Windows.Foundation.IAsyncAction AppendTextAsync(IStorageFile file, String contents, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("ReadLinesAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  ReadLinesAsync(IStorageFile file);
        [method_name("ReadLinesWithEncodingAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  ReadLinesAsync(IStorageFile file, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("WriteLinesAsync")] [remote_sync]static Windows.Foundation.IAsyncAction WriteLinesAsync(IStorageFile file, Windows.Foundation.Collections.IIterable <String>  lines);
        [method_name("WriteLinesWithEncodingAsync")] [remote_sync]static Windows.Foundation.IAsyncAction WriteLinesAsync(IStorageFile file, Windows.Foundation.Collections.IIterable <String>  lines, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("AppendLinesAsync")] [remote_sync]static Windows.Foundation.IAsyncAction AppendLinesAsync(IStorageFile file, Windows.Foundation.Collections.IIterable <String>  lines);
        [method_name("AppendLinesWithEncodingAsync")] [remote_sync]static Windows.Foundation.IAsyncAction AppendLinesAsync(IStorageFile file, Windows.Foundation.Collections.IIterable <String>  lines, Windows.Storage.Streams.UnicodeEncoding encoding);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IBuffer>  ReadBufferAsync(IStorageFile file);
        static Windows.Foundation.IAsyncAction WriteBufferAsync(IStorageFile file, Windows.Storage.Streams.IBuffer buffer);
        static Windows.Foundation.IAsyncAction WriteBytesAsync(IStorageFile file, UInt8[] buffer);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.IPathIOStatics", 0f2f3758-8ec7-4381-922b-8f6c07d288f3)]
    [threading(both)]
    runtimeclass PathIO
    {
        [method_name("ReadTextAsync")] static Windows.Foundation.IAsyncOperation <String>  ReadTextAsync(String absolutePath);
        [method_name("ReadTextWithEncodingAsync")] static Windows.Foundation.IAsyncOperation <String>  ReadTextAsync(String absolutePath, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("WriteTextAsync")] static Windows.Foundation.IAsyncAction WriteTextAsync(String absolutePath, String contents);
        [method_name("WriteTextWithEncodingAsync")] static Windows.Foundation.IAsyncAction WriteTextAsync(String absolutePath, String contents, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("AppendTextAsync")] static Windows.Foundation.IAsyncAction AppendTextAsync(String absolutePath, String contents);
        [method_name("AppendTextWithEncodingAsync")] static Windows.Foundation.IAsyncAction AppendTextAsync(String absolutePath, String contents, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("ReadLinesAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  ReadLinesAsync(String absolutePath);
        [method_name("ReadLinesWithEncodingAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  ReadLinesAsync(String absolutePath, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("WriteLinesAsync")] [remote_sync]static Windows.Foundation.IAsyncAction WriteLinesAsync(String absolutePath, Windows.Foundation.Collections.IIterable <String>  lines);
        [method_name("WriteLinesWithEncodingAsync")] [remote_sync]static Windows.Foundation.IAsyncAction WriteLinesAsync(String absolutePath, Windows.Foundation.Collections.IIterable <String>  lines, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name("AppendLinesAsync")] [remote_sync]static Windows.Foundation.IAsyncAction AppendLinesAsync(String absolutePath, Windows.Foundation.Collections.IIterable <String>  lines);
        [method_name("AppendLinesWithEncodingAsync")] [remote_sync]static Windows.Foundation.IAsyncAction AppendLinesAsync(String absolutePath, Windows.Foundation.Collections.IIterable <String>  lines, Windows.Storage.Streams.UnicodeEncoding encoding);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IBuffer>  ReadBufferAsync(String absolutePath);
        static Windows.Foundation.IAsyncAction WriteBufferAsync(String absolutePath, Windows.Storage.Streams.IBuffer buffer);
        static Windows.Foundation.IAsyncAction WriteBytesAsync(String absolutePath, UInt8[] buffer);
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Storage.ICachedFileManagerStatics", 8ffc224a-e782-495d-b614-654c4f0b2370)]
    runtimeclass CachedFileManager
    {
        static void DeferUpdates(IStorageFile file);
        [remote_sync]static Windows.Foundation.IAsyncOperation <Windows.Storage.Provider.FileUpdateStatus>  CompleteUpdatesAsync(IStorageFile file);
    }

}
namespace Windows.Storage.Search
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass SortEntryVector
        : [default]Windows.Foundation.Collections.IVector<Windows.Storage.Search.SortEntry>
        , Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry>
    {
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails", 2a371977-abbf-4e1d-8aa5-6385d8884799)]
    runtimeclass StorageLibraryContentChangedTriggerDetails
    {
        Windows.Storage.StorageFolder Folder{ get; };
        Windows.Storage.Search.StorageItemQueryResult CreateModifiedSinceQuery(Windows.Foundation.DateTime lastQueryTime);
    }


    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [interface_name("Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails", 1dc7a369-b7a3-4df2-9d61-eba85a0343d2)]
    runtimeclass StorageLibraryChangeTrackerTriggerDetails
    {
        Windows.Storage.StorageFolder Folder{ get; };
        Windows.Storage.StorageLibraryChangeTracker ChangeTracker{ get; };
    }

}
namespace Windows.Storage.AccessCache
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct AccessListEntry
    {
        String Token;
        String Metadata;
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AccessListEntryView
        : [default]Windows.Foundation.Collections.IVectorView<Windows.Storage.AccessCache.AccessListEntry>
        , Windows.Foundation.Collections.IIterable<Windows.Storage.AccessCache.AccessListEntry>
    {
    }

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AccessCacheOptions
    {
        None,
        DisallowUserInput,
        FastLocationsOnly,
        UseReadOnlyCachedCopy = 4,
        SuppressAccessTimeUpdate = 8,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(2caff6ad-de90-47f5-b2c3-dd36c9fdd453)]
    interface IStorageItemAccessList
    {
        [method_name("AddOverloadDefaultMetadata")] String Add(Windows.Storage.IStorageItem file);
        [method_name("Add")] String Add(Windows.Storage.IStorageItem file, String metadata);
        [method_name("AddOrReplaceOverloadDefaultMetadata")] void AddOrReplace(String token, Windows.Storage.IStorageItem file);
        [method_name("AddOrReplace")] void AddOrReplace(String token, Windows.Storage.IStorageItem file, String metadata);
        [method_name("GetItemAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.IStorageItem>  GetItemAsync(String token);
        [method_name("GetFileAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  GetFileAsync(String token);
        [method_name("GetFolderAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetFolderAsync(String token);
        [method_name("GetItemWithOptionsAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.IStorageItem>  GetItemAsync(String token, AccessCacheOptions options);
        [method_name("GetFileWithOptionsAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  GetFileAsync(String token, AccessCacheOptions options);
        [method_name("GetFolderWithOptionsAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  GetFolderAsync(String token, AccessCacheOptions options);
        void Remove(String token);
        Boolean ContainsItem(String token);
        void Clear();
        Boolean CheckAccess(Windows.Storage.IStorageItem file);
        Windows.Storage.AccessCache.AccessListEntryView Entries{ get; };
        UInt32 MaximumItemsAllowed{ get; };
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList", 016239d5-510d-411e-8cf1-c3d1effa4c33)]
    runtimeclass StorageItemMostRecentlyUsedList
        : Windows.Storage.AccessCache.IStorageItemAccessList
    {
        event Windows.Foundation.TypedEventHandler <Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList, Windows.Storage.AccessCache.ItemRemovedEventArgs>  ItemRemoved;

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Storage.AccessCache.IStorageItemMostRecentlyUsedList2", da481ea0-ed8d-4731-a1db-e44ee2204093)]
        {
            [method_name("AddWithMetadataAndVisibility")] String Add(Windows.Storage.IStorageItem file, String metadata, RecentStorageItemVisibility visibility);
            [method_name("AddOrReplaceWithMetadataAndVisibility")] void AddOrReplace(String token, Windows.Storage.IStorageItem file, String metadata, RecentStorageItemVisibility visibility);
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.AccessCache.IItemRemovedEventArgs", 59677e5c-55be-4c66-ba66-5eaea79d2631)]
    runtimeclass ItemRemovedEventArgs
    {
        Windows.Storage.AccessCache.AccessListEntry RemovedEntry{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum RecentStorageItemVisibility
    {
        AppOnly,
        AppAndSystem,
    };



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass StorageItemAccessList
        : [default]Windows.Storage.AccessCache.IStorageItemAccessList
    {
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics", 4391dfaa-d033-48f9-8060-3ec847d2e3f1)]
    runtimeclass StorageApplicationPermissions
    {
        static Windows.Storage.AccessCache.StorageItemAccessList FutureAccessList{ get; };
        static Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList MostRecentlyUsedList{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.Storage.AccessCache.IStorageApplicationPermissionsStatics2", 072716ec-aa05-4294-9a11-1a3d04519ad0)]
        {
            static Windows.Storage.AccessCache.StorageItemAccessList GetFutureAccessListForUser(Windows.System.User user);
            static Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList GetMostRecentlyUsedListForUser(Windows.System.User user);
        }
    }

}
namespace Windows.Storage.BulkAccess
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(87a5cb8b-8972-4f40-8de0-d86fb179d8fa)]
    interface IStorageItemInformation
    {
        Windows.Storage.FileProperties.MusicProperties MusicProperties{ get; };
        Windows.Storage.FileProperties.VideoProperties VideoProperties{ get; };
        Windows.Storage.FileProperties.ImageProperties ImageProperties{ get; };
        Windows.Storage.FileProperties.DocumentProperties DocumentProperties{ get; };
        Windows.Storage.FileProperties.BasicProperties BasicProperties{ get; };
        Windows.Storage.FileProperties.StorageItemThumbnail Thumbnail{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Storage.BulkAccess.IStorageItemInformation, Object>  ThumbnailUpdated;
        event Windows.Foundation.TypedEventHandler <Windows.Storage.BulkAccess.IStorageItemInformation, Object>  PropertiesUpdated;
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Storage.BulkAccess.IFileInformationFactoryFactory", 84ea0e7d-e4a2-4f00-8afa-af5e0f826bd5)]
    [interface_name("Windows.Storage.BulkAccess.IFileInformationFactory", 401d88be-960f-4d6d-a7d0-1a3861e76c83)]
    runtimeclass FileInformationFactory
    {
        [method_name( "CreateWithMode" )] FileInformationFactory(Windows.Storage.Search.IStorageQueryResultBase queryResult, Windows.Storage.FileProperties.ThumbnailMode mode);
        [method_name( "CreateWithModeAndSize" )] FileInformationFactory(Windows.Storage.Search.IStorageQueryResultBase queryResult, Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedThumbnailSize);
        [method_name( "CreateWithModeAndSizeAndOptions" )] FileInformationFactory(Windows.Storage.Search.IStorageQueryResultBase queryResult, Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedThumbnailSize, Windows.Storage.FileProperties.ThumbnailOptions thumbnailOptions);
        [method_name( "CreateWithModeAndSizeAndOptionsAndFlags" )] FileInformationFactory(Windows.Storage.Search.IStorageQueryResultBase queryResult, Windows.Storage.FileProperties.ThumbnailMode mode, UInt32 requestedThumbnailSize, Windows.Storage.FileProperties.ThumbnailOptions thumbnailOptions, Boolean delayLoad);
        [method_name("GetItemsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.IStorageItemInformation> >  GetItemsAsync(UInt32 startIndex, UInt32 maxItemsToRetrieve);
        [method_name("GetItemsAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.IStorageItemInformation> >  GetItemsAsync();
        [method_name("GetFilesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.FileInformation> >  GetFilesAsync(UInt32 startIndex, UInt32 maxItemsToRetrieve);
        [method_name("GetFilesAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.FileInformation> >  GetFilesAsync();
        [method_name("GetFoldersAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.FolderInformation> >  GetFoldersAsync(UInt32 startIndex, UInt32 maxItemsToRetrieve);
        [method_name("GetFoldersAsyncDefaultStartAndCount")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.BulkAccess.FolderInformation> >  GetFoldersAsync();
        Object GetVirtualizedItemsVector();
        Object GetVirtualizedFilesVector();
        Object GetVirtualizedFoldersVector();
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FileInformation
        : [default]Windows.Storage.BulkAccess.IStorageItemInformation
        , Windows.Storage.IStorageFile
        , Windows.Storage.Streams.IInputStreamReference
        , Windows.Storage.Streams.IRandomAccessStreamReference
        , Windows.Storage.IStorageItem
        , Windows.Storage.IStorageItemProperties
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItem2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemPropertiesWithProvider
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFilePropertiesWithAvailability
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFile2
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FolderInformation
        : [default]Windows.Storage.BulkAccess.IStorageItemInformation
        , Windows.Storage.IStorageFolder
        , Windows.Storage.IStorageItem
        , Windows.Storage.IStorageItemProperties
        , Windows.Storage.Search.IStorageFolderQueryOperations
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItem2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageFolder2
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Storage.IStorageItemPropertiesWithProvider
    {
    }


}
namespace Windows.Storage.Streams
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [muse(0x6020000)]
    [static_name("Windows.Storage.Streams.IRandomAccessStreamReferenceStatics", 857309dc-3fbf-4e7d-986f-ef3b1a07a964)]
    runtimeclass RandomAccessStreamReference
        : [default]Windows.Storage.Streams.IRandomAccessStreamReference
    {
        static Windows.Storage.Streams.RandomAccessStreamReference CreateFromFile(Windows.Storage.IStorageFile file);
        static Windows.Storage.Streams.RandomAccessStreamReference CreateFromUri(Windows.Foundation.Uri uri);
        static Windows.Storage.Streams.RandomAccessStreamReference CreateFromStream(IRandomAccessStream stream);
    }

    [contract(Windows.Foundation.UniversalApiContract, 5)]
    enum FileOpenDisposition
    {
        OpenExisting,
        OpenAlways,
        CreateNew,
        CreateAlways,
        TruncateExisting,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FileRandomAccessStream
        : [default]Windows.Storage.Streams.IRandomAccessStream
        , Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
        , Windows.Storage.Streams.IInputStream
    {

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [static_name("Windows.Storage.Streams.IFileRandomAccessStreamStatics", 73550107-3b57-4b5d-8345-554d2fc621f0)]
        {
            [method_name("OpenAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenAsync(String filePath, Windows.Storage.FileAccessMode accessMode);
            [method_name("OpenWithOptionsAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenAsync(String filePath, Windows.Storage.FileAccessMode accessMode, Windows.Storage.StorageOpenOptions sharingOptions, FileOpenDisposition openDisposition);
            [method_name("OpenTransactedWriteAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteAsync(String filePath);
            [method_name("OpenTransactedWriteWithOptionsAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteAsync(String filePath, Windows.Storage.StorageOpenOptions openOptions, FileOpenDisposition openDisposition);
            [method_name("OpenForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenForUserAsync(Windows.System.User user, String filePath, Windows.Storage.FileAccessMode accessMode);
            [method_name("OpenForUserWithOptionsAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  OpenForUserAsync(Windows.System.User user, String filePath, Windows.Storage.FileAccessMode accessMode, Windows.Storage.StorageOpenOptions sharingOptions, FileOpenDisposition openDisposition);
            [method_name("OpenTransactedWriteForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteForUserAsync(Windows.System.User user, String filePath);
            [method_name("OpenTransactedWriteForUserWithOptionsAsync")] static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageStreamTransaction>  OpenTransactedWriteForUserAsync(Windows.System.User user, String filePath, Windows.Storage.StorageOpenOptions openOptions, FileOpenDisposition openDisposition);
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FileInputStream
        : [default]Windows.Storage.Streams.IInputStream
        , Windows.Foundation.IClosable
    {
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FileOutputStream
        : [default]Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [muse(0x6030000)]
    runtimeclass RandomAccessStreamOverStream
        : [default]Windows.Storage.Streams.IRandomAccessStream
        , Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
        , Windows.Storage.Streams.IInputStream
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass InputStreamOverStream
        : [default]Windows.Storage.Streams.IInputStream
        , Windows.Foundation.IClosable
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass OutputStreamOverStream
        : [default]Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
    {
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [muse(0x6030000)]
    runtimeclass InMemoryRandomAccessStream
        : [default]Windows.Storage.Streams.IRandomAccessStream
        , Windows.Storage.Streams.IOutputStream
        , Windows.Foundation.IClosable
        , Windows.Storage.Streams.IInputStream
    {
        InMemoryRandomAccessStream();
    }

}
namespace Windows.Storage.Pickers
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PickerViewMode
    {
        List,
        Thumbnail,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PickerLocationId
    {
        DocumentsLibrary,
        ComputerFolder,
        Desktop,
        Downloads,
        HomeGroup,
        MusicLibrary,
        PicturesLibrary,
        VideosLibrary,
        Objects3D,
        Unspecified,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass FilePickerSelectedFilesArray
        : [default]Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>
        , Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFile>
    {
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FilePickerFileTypesOrderedMap
        : [default]Windows.Foundation.Collections.IMap<String, Windows.Foundation.Collections.IVector<String> >
        , Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVector<String> > >
    {
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass FileExtensionVector
        : [default]Windows.Foundation.Collections.IVector<String>
        , Windows.Foundation.Collections.IIterable<String>
    {
    }







    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Storage.Pickers.IFileOpenPickerStatics", 6821573b-2f02-4833-96d4-abbfad72b67b)]
    [interface_name("Windows.Storage.Pickers.IFileOpenPicker", 2ca8278a-12c5-4c5f-8977-94547793c241)]
    [threading(both)]
    runtimeclass FileOpenPicker
    {
        FileOpenPicker();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.Storage.Pickers.IFileOpenPickerStatics2", e8917415-eddd-5c98-b6f3-366fdfcad392)]
        {
            static Windows.Storage.Pickers.FileOpenPicker CreateForUser(Windows.System.User user);
        }
        [deprecated("Instead, use PickSingleFileAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  ResumePickSingleFileAsync();

        [interface_name("Windows.Storage.Pickers.IFileOpenPicker2", 8ceb6cd2-b446-46f7-b265-90f8e55ad650)]
        {
            [deprecated("Instead, use PickSingleFileAsync/PickMultipleFilesAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            Windows.Foundation.Collections.ValueSet ContinuationData{ get; };
            [deprecated("Instead, use PickSingleFileAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            void PickSingleFileAndContinue();
            [deprecated("Instead, use PickMultipleFilesAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            void PickMultipleFilesAndContinue();
        }

        [interface_name("Windows.Storage.Pickers.IFileOpenPickerWithOperationId", 3f57b569-2522-4ca5-aa73-a15509f1fcbf)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  PickSingleFileAsync(String pickerOperationId);
        }
        Windows.Storage.Pickers.PickerViewMode ViewMode{ get; };
        Windows.Storage.Pickers.PickerViewMode ViewMode{ set; };
        String SettingsIdentifier{ get; };
        String SettingsIdentifier{ set; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ get; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ set; };
        String CommitButtonText{ get; };
        String CommitButtonText{ set; };
        Windows.Foundation.Collections.IVector <String>  FileTypeFilter{ get; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  PickSingleFileAsync();
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Storage.StorageFile> >  PickMultipleFilesAsync();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.Storage.Pickers.IFileOpenPicker3", d9a5c5b3-c5dc-5b98-bd80-a8d0ca0584d8)]
        {
            Windows.System.User User{ get; };
        }
    }






    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.IFileSavePicker", 3286ffcb-617f-4cc5-af6a-b3fdf29ad145)]
    [threading(both)]
    runtimeclass FileSavePicker
    {
        FileSavePicker();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.Storage.Pickers.IFileSavePickerStatics", 28e3cf9e-961c-5e2c-aed7-e64737f4ce37)]
        {
            static Windows.Storage.Pickers.FileSavePicker CreateForUser(Windows.System.User user);
        }

        [interface_name("Windows.Storage.Pickers.IFileSavePicker2", 0ec313a2-d24b-449a-8197-e89104fd42cc)]
        {
            Windows.Foundation.Collections.ValueSet ContinuationData{ get; };
            [deprecated("Instead, use PickSaveFileAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            void PickSaveFileAndContinue();
        }

        [interface_name("Windows.Storage.Pickers.IFileSavePicker3", 698aec69-ba3c-4e51-bd90-4abcbbf4cfaf)]
        {
            String EnterpriseId{ get; };
            String EnterpriseId{ set; };
        }
        String SettingsIdentifier{ get; };
        String SettingsIdentifier{ set; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ get; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ set; };
        String CommitButtonText{ get; };
        String CommitButtonText{ set; };
        Windows.Foundation.Collections.IMap <String, Windows.Foundation.Collections.IVector <String> >  FileTypeChoices{ get; };
        String DefaultFileExtension{ get; };
        String DefaultFileExtension{ set; };
        Windows.Storage.StorageFile SuggestedSaveFile{ get; };
        Windows.Storage.StorageFile SuggestedSaveFile{ set; };
        String SuggestedFileName{ get; };
        String SuggestedFileName{ set; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  PickSaveFileAsync();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.Storage.Pickers.IFileSavePicker4", e7d83a5a-ddfa-5de0-8b70-c842c21988ec)]
        {
            Windows.System.User User{ get; };
        }
    }





    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.Pickers.IFolderPicker", 084f7799-f3fb-400a-99b1-7b4a772fd60d)]
    [threading(both)]
    runtimeclass FolderPicker
    {
        FolderPicker();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.Storage.Pickers.IFolderPickerStatics", 9be34740-7ca1-5942-a3c8-46f2551ecff3)]
        {
            static Windows.Storage.Pickers.FolderPicker CreateForUser(Windows.System.User user);
        }

        [interface_name("Windows.Storage.Pickers.IFolderPicker2", 8eb3ba97-dc85-4616-be94-9660881f2f5d)]
        {
            Windows.Foundation.Collections.ValueSet ContinuationData{ get; };
            [deprecated("Instead, use PickSingleFolderAsync", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            void PickFolderAndContinue();
        }
        Windows.Storage.Pickers.PickerViewMode ViewMode{ get; };
        Windows.Storage.Pickers.PickerViewMode ViewMode{ set; };
        String SettingsIdentifier{ get; };
        String SettingsIdentifier{ set; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ get; };
        Windows.Storage.Pickers.PickerLocationId SuggestedStartLocation{ set; };
        String CommitButtonText{ get; };
        String CommitButtonText{ set; };
        Windows.Foundation.Collections.IVector <String>  FileTypeFilter{ get; };
        [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFolder>  PickSingleFolderAsync();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.Storage.Pickers.IFolderPicker3", 673b1e29-d326-53c0-bd24-a25c714cee36)]
        {
            Windows.System.User User{ get; };
        }
    }


}
namespace Windows.ApplicationModel.DataTransfer
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.ApplicationModel.DataTransfer.ISharedStorageAccessManagerStatics", c6132ada-34b1-4849-bd5f-d09fee3158c5)]
    runtimeclass SharedStorageAccessManager
    {
        static String AddFile(Windows.Storage.IStorageFile file);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  RedeemTokenForFileAsync(String token);
        static void RemoveFile(String token);
    }



}
namespace Windows.ApplicationModel.Background
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.ApplicationModel.Background.IStorageLibraryContentChangedTriggerStatics", 7f9f1b39-5f90-4e12-914e-a7d8e0bbfb18)]
    [default_interface]
    [interface_name("Windows.ApplicationModel.Background.IStorageLibraryContentChangedTrigger", 1637e0a7-829c-45bc-929b-a1e7ea78d89b)]
    runtimeclass StorageLibraryContentChangedTrigger
        : Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        static Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger Create(Windows.Storage.StorageLibrary storageLibrary);
        static Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger CreateFromLibraries(Windows.Foundation.Collections.IIterable <Windows.Storage.StorageLibrary>  storageLibraries);
    }


    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.ApplicationModel.Background.IStorageLibraryChangeTrackerTriggerFactory", 1eb0ffd0-5a85-499e-a888-824607124f50)]
    [threading(both)]
    runtimeclass StorageLibraryChangeTrackerTrigger
        : [default]Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        [method_name( "Create" )] StorageLibraryChangeTrackerTrigger(Windows.Storage.StorageLibraryChangeTracker tracker);
    }

}
