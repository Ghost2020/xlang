





namespace Windows.Internal.ComposableShell.SessionManagement
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    enum SessionState
    {
        Undefined,
        Started,
        Ended,
    };

    [uuid(a3ddbadc-af79-4eae-9df7-9b21f9c92720)]
    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    interface ISessionInfo
    {
        UInt32 Id{ get; };
        Windows.Internal.ComposableShell.SessionManagement.SessionState State{ get; };
        void SetAttributeDWORD(String name, UInt32 value);
        UInt32 GetAttributeDWORD(String name);
        UInt32 GetAttributeDWORDWithDefault(String name, UInt32 fallback);
    };

    [uuid(e9af0779-4a69-4806-9c7d-925a6e5bde9b)]
    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    interface ISessionTransitionHandler
    {
        String Name{ get; };
        void ChangeState(UInt32 sessionId, SessionState fromState, SessionState toState);
    };

    [uuid(7967052c-b388-4e80-a46a-e329adf953f8)]
    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    interface ISessionTransitionManager
    {
        EventRegistrationToken AddTransitionHandler(ISessionTransitionHandler handler);
        void RemoveTransitionHandler(EventRegistrationToken token);
    };

    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    [uuid(788c26a0-757c-4e31-9134-864e5dda19dd)]
    interface ISessionStateNotifier
    {
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.SessionManagement.ISessionInfo, Object>  StateChanged;
    };

    [uuid(d4f7842f-1ffb-43d5-84cd-a1a720f2d436)]
    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    interface ISessionController
    {
        void Begin();
        void End();
    };

    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    [uuid(2858e82d-dfd2-492b-a058-a262170e1eae)]
    interface ISessionLocator
    {
        Windows.Internal.ComposableShell.SessionManagement.ISessionInfo Current{ get; };
    };


    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Internal.ComposableShell.SessionManagement.ISessionFactory", a237334b-5d2a-4adf-9af8-646a0b016d2f)]
    [threading(both)]
    runtimeclass GenericSession
        : [default]Windows.Internal.ComposableShell.SessionManagement.ISessionInfo
        , Windows.Internal.ComposableShell.SessionManagement.ISessionController
        , Windows.Internal.ComposableShell.SessionManagement.ISessionTransitionManager
        , Windows.Internal.ComposableShell.SessionManagement.ISessionStateNotifier
    {
        [method_name( "CreateInstance" )] GenericSession(String uniqueName);
    }

    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    enum SessionRecoverySignal
    {
        Nominal,
        Retrying,
        Rebooting,
        FatalError,
    };

    [contract(Windows.Internal.ComposableShell.SessionManagement.InternalContract, 1)]
    [uuid(de18c827-70fc-4856-b7e2-1de5f7a17489)]
    interface ISessionPolicy
    {
        Boolean IsSessionInUse{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.SessionManagement.ISessionPolicy, Boolean>  IsSessionInUseChanged;
        Boolean IsSessionAvailable{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.SessionManagement.ISessionPolicy, Boolean>  IsSessionAvailableChanged;
        Windows.Internal.ComposableShell.SessionManagement.SessionRecoverySignal SessionRecoveryStrategy{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.SessionManagement.ISessionPolicy, Windows.Internal.ComposableShell.SessionManagement.SessionRecoverySignal>  SessionRecoveryStrategyChanged;
    };

}
