










namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.StateRepository.ICustomInstallStatics", e435116d-5a8a-4642-a820-2c3f9854c0f6)]
    [interface_name("Windows.Internal.StateRepository.ICustomInstall", 8ff49ea2-b5c5-4a8e-bfd9-fe1ef2b4a921)]
    [threading(both)]
    runtimeclass CustomInstall
    {
        CustomInstall();
        static Boolean Exists(Int64 customInstallID);
        static Boolean ExistsByPackageExtension(PackageExtension PackageExtension);
        static Boolean ExistsByPackageExtensionAndVerb(PackageExtension PackageExtension, CustomInstallVerb Verb);
        static Windows.Internal.StateRepository.CustomInstall TryGet(Int64 customInstallID);
        static Windows.Internal.StateRepository.CustomInstall TryGetByPackageExtensionAndVerb(PackageExtension PackageExtension, CustomInstallVerb Verb);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.CustomInstall>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.CustomInstall>  FindByPackageExtension(PackageExtension PackageExtension);
        Int64 _CustomInstallID{ get; };
        Int64 _CustomInstallID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 PackageExtension{ get; };
        Int64 PackageExtension{ set; };
        Windows.Internal.StateRepository.PackageExtension GetPackageExtension();
        void SetPackageExtension(PackageExtension value);
        Windows.Internal.StateRepository.CustomInstallVerb Verb{ get; };
        Windows.Internal.StateRepository.CustomInstallVerb Verb{ set; };
        Windows.Internal.StateRepository.CustomInstallFlags Flags{ get; };
        Windows.Internal.StateRepository.CustomInstallFlags Flags{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
