






namespace Microsoft.Test.InputInjectionRT
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [flags]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum TouchMask
    {
        None,
        ContactArea,
        Orientation,
        Pressure = 4,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum InputPointerFlags
    {
        None,
        New,
        InRange,
        InContact = 4,
        FirstButton = 16,
        SecondButton = 32,
        Primary = 8192,
        Confidence = 16384,
        Canceled = 32768,
        FlagDown = 65536,
        Update = 131072,
        FlagUp = 262144,
        CaptureChanged = 2097152,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum InputPointerType
    {
        Pointer = 1,
        Touch,
        Pen,
        Mouse,
        Touchpad,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum InputButtonChangeType
    {
        None,
        FirstButtonDown,
        FirstButtonUp,
        SecondButtonDown,
        SecondButtonUp,
        ThirdButtonDown,
        ThirdButtonUp,
        FourthButtonDown,
        FourthButtonUp,
        FifthButtonDown,
        FifthButtonUp,
    };

    [flags]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum InputPenFlags
    {
        None,
        Barrel,
        Inverted,
        Eraser = 4,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum InputPenMask
    {
        None,
        Pressure,
        Rotation,
        TiltX = 4,
        TiltY = 8,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum MouseFlags
    {
        Absolute = 32768,
        HWheel = 4096,
        Move = 1,
        MoveNoCoalesce = 8192,
        LeftDown = 2,
        LeftUp = 4,
        RightDown = 8,
        RightUp = 16,
        MiddleDown = 32,
        MiddleUp = 64,
        VirtualDesk = 16384,
        Wheel = 2048,
        XDown = 128,
        XUp = 256,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum KeyFlags
    {
        None,
        ExtendedKey,
        KeyUp,
        ScanCode = 8,
        Unicode = 4,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum VisualMode
    {
        Unknown,
        DefaultFeedback,
        IndirectFeedback,
        NoFeedback,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct InputRectangle
    {
        Int32 left;
        Int32 top;
        Int32 bottom;
        Int32 right;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct InputPoint
    {
        Int32 x;
        Int32 y;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct InputPointerInfo
    {
        InputPointerType pointerType;
        UInt32 pointerId;
        UInt32 frameId;
        InputPointerFlags pointerFlags;
        InputPoint ptPixelLocation;
        UInt32 dwTime;
        UInt64 performanceCount;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct PointerTouchInfo
    {
        InputPointerInfo pointerInfo;
        TouchMask touchMask;
        InputRectangle contact;
        UInt32 orientation;
        UInt32 pressure;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct PointerPenInfo
    {
        InputPointerInfo pointerInfo;
        InputPenFlags penFlags;
        InputPenMask penMask;
        UInt32 pressure;
        UInt32 rotation;
        Int32 tiltX;
        Int32 tiltY;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct MouseInfo
    {
        Int32 dx;
        Int32 dy;
        UInt32 mouseData;
        MouseFlags mouseFlags;
        UInt32 time;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct KeyboardInfo
    {
        UInt16 virtualKey;
        UInt16 scanCode;
        KeyFlags keyFlags;
        UInt32 time;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct HidInfo
    {
        UInt16 page;
        UInt16 usage;
        Int32 value;
        UInt16 index;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct UsageProperties
    {
        UInt16 level;
        UInt16 page;
        UInt16 usage;
        Int32 logicalMinimum;
        Int32 logicalMaximum;
        UInt16 unit;
        UInt16 exponent;
        UInt8 count;
        Int32 physicalMinimum;
        Int32 physicalMaximum;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(f6be5baf-9056-48a2-8188-1843d9eca947)]
    interface IRIMInjector
    {
        void InjectKeyboardInput(KeyboardInfo[] input);
        void InjectMouseInput(MouseInfo[] input);
        void InitializeTouchInjection(UInt32 contactCount, UInt32 visualMode, out UInt64 touchHandle);
        void InjectTouchInput(UInt64 inputHandle, PointerTouchInfo[] input);
        void UninitializeTouchInjection(UInt64 touchHandle);
        void InitializePenInjection(UInt32 visualMode, out UInt64 penHandle);
        void InjectPenInput(UInt64 inputHandle, ref const PointerPenInfo input);
        void UninitializePenInjection(UInt64 penHandle);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass RIMInjector
        : [default]Microsoft.Test.InputInjectionRT.IRIMInjector
    {
        RIMInjector();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum KeyboardInjectionType
    {
        Scancode,
        VirtualKey,
        Unicode,
    };

    [uuid(8dce62fa-72a4-4884-b483-c38647ad0f7b)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IKeyboardInjector
    {
        void InjectKeyboardPress(UInt16[] input, KeyboardInjectionType type);
        void InjectKeyboardRelease(UInt16[] input, KeyboardInjectionType type);
        void InjectKeyboardTypingSequence(UInt16[] input, KeyboardInjectionType type);
        void InjectStringPress(String input);
        void InjectStringRelease(String input);
        void InjectStringTypingSequence(String input);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass KeyboardInjector
        : Microsoft.Test.InputInjectionRT.IKeyboardInjector
    {
        KeyboardInjector();
    }

}
namespace Microsoft.Test.InputInjectionRT.InputManagerInterop
{
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum APPLICATION_GESTURE
    {
        AG_ELLIPSE,
        AG_SQUARE,
        AG_STAR,
        AG_CHECK,
        AG_CURLICUE,
        AG_CHEVRON,
        AG_ARROW,
        AG_EXCLAMATION,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum INPUT_DEVICE
    {
        ID_MULTITOUCH,
        ID_SINGLE_TOUCH,
        ID_INTERNAL_PEN,
        ID_EXTERNAL_PEN,
        ID_MOUSE,
        ID_TPAD,
        ID_MOUSEPAD,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum INPUT_STATE
    {
        NONE,
        IS_MOVE = 0,
        IS_LDOWN,
        IS_LUP,
        IS_RDOWN = 4,
        IS_RUP = 8,
        IS_WHEEL = 16,
        IS_HWHEEL = 32,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [flags]
    enum KEY_STATE
    {
        NONE,
        CTRL_KEY_DOWN,
        CTRL_KEY_UP,
        SHIFT_KEY_DOWN = 4,
        SHIFT_KEY_UP = 8,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum COORD_UNIT
    {
        CU_DIGITIZER,
        CU_LOGICAL_SCREEN,
        CU_HIMETRIC,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum INJECTION_INPUT_MODE
    {
        IIM_Parallel,
        IIM_Hybrid,
        IIM_Serial,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum INJECTION_METHOD
    {
        IM_VHID,
        IM_DSF,
        IM_SWINJECTION,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum TP_TYPE
    {
        TP_TOUCHPAD,
        TP_PRESSUREPAD,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum TP_INPUT_SIZE
    {
        TP_SMALL,
        TP_MEDIUM,
        TP_LARGE,
        TP_CUSTOM,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct POINT
    {
        Int32 x;
        Int32 Y;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct RECT
    {
        Int32 left;
        Int32 top;
        Int32 bottom;
        Int32 right;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct tagMT_POINTPROPS
    {
        UInt32 uiTimeToPoint;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(bb8491e0-df4e-47fa-9176-cdc48c6eac13)]
    interface IInputManagerInterop
    {
        void IMInjectPress(POINT ptDig, UInt32 uiDuration, UInt32 uiTapCount, UInt32 uiTapDelta, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectPressAndDrag(POINT ptStartDig, POINT ptEndDig, UInt32 uiDurationInDrag, UInt32 uiDurationInHold, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectPressAndDragWithAcceleration(POINT ptStartDig, POINT ptEndDig, UInt32 uiDurationInHold, Single dbAcceleration, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectAppGesture(APPLICATION_GESTURE appGest, RECT rectGest, UInt32 uiRotationAngle, UInt32 dwExtraParam, UInt32 uiDuration, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectTriangle(POINT ptVertex1, POINT ptVertex2, POINT ptVertex3, UInt32 uiDuration, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMSetBoundingRectangle(UInt32 uiWidth, UInt32 uiHeight);
        void IMSetDeviceButton(Boolean uiButtonValue);
        void IMSetPressure(UInt32 uiPressureValue);
        void IMSetDisplayStretchOn(Boolean bDisplayStretchOn);
        void IMSetPhysicalSizeTouchPad(TP_INPUT_SIZE size, UInt32 width, UInt32 height);
        void IMSetIncludeDevices(UInt32 dw_devices);
        void IMSetDeviceEvents(Boolean bDeviceEventsOn);
        void IMSetInjectionEvents(Boolean bInjectionEventsOn);
        void IMSetPacketCoalescingOff(Boolean bPacketCoalescing);
        void IMInjectMTPan(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, Single dbDirection, UInt32 uiDistanceDig, UInt32 uiDuration, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTPanWithAcceleration(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, Single dbDirection, UInt32 uiDistanceDig, Single dbAcceleration, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTZoom(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, Single dbDirection, UInt32 uiDuration, UInt32 uiDistanceDig, Int32 fPivotZoom, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTRotate(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, Single dbRotationAngle, UInt32 uiDuration, Int32 fPivotRotate, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTTwoFingerTap(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, UInt32 uiDuration, UInt32 uiNumTaps, UInt32 uiDeltaBetweenTaps, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTPressAndTap(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, POINT ptEndFinger1Dig, UInt32 uiDeltaFinger2Down, UInt32 uiDeltaFinger2Up, UInt32 uiDeltaFinger1Up, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectMTFingersMove(POINT ptStartFinger1Dig, POINT ptStartFinger2Dig, POINT ptEndFinger1Dig, POINT ptEndFinger2Dig, UInt32 uiDurationFinger1, UInt32 uiDurationFinger2, UInt32 uiPacketDelta, UInt32 uiDigitizerId);
        void IMInjectDynamicPress(POINT ptTouchPoint, UInt32 dwWidth, UInt32 dwHeight, UInt32 uiContactId);
        void IMInjectDynamicRelease(UInt32 uiContactId);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass InputManagerInterop
        : [default]Microsoft.Test.InputInjectionRT.InputManagerInterop.IInputManagerInterop
    {
        InputManagerInterop();
    }

}
namespace Microsoft.Test.InputInjectionRT.ModernPointerInjector
{
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum PointerType
    {
        Undefined,
        Mouse,
        Pen,
        Touch,
        Hid,
        TouchPad,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum GestureType
    {
        Undefined,
        Custom,
        Path,
        Tap,
        Drag,
        Zoom,
        Rotate,
        PacketFrame,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum InjectionMethod
    {
        Unknown,
        Default,
        InProc,
        CrossProc,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    struct TouchPadButtonState
    {
        Int32 fDiscreteLeftButton;
        Int32 fDiscreteRightButton;
        Int32 fTouchPadButton;
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum ButtonStateTransition
    {
        Undefined,
        LButtonDown,
        TouchPadLeftDiscreteButtonDown = 1,
        LButtonUp,
        TouchPadLeftDiscreteButtonUp = 2,
        RButtonDown = 4,
        TouchPadRightDiscreteButtonDown = 4,
        RButtonUp = 8,
        TouchPadRightDiscreteButtonUp = 8,
        MButtonDown = 16,
        MButtonUp = 32,
        XButtonDown = 64,
        XButtonUp = 128,
        TouchPadButtonDown = 256,
        TouchPadButtonUp = 512,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum ContactFlagsTransition
    {
        Undefined,
        ConfidenceOn,
        ConfidenceOff,
        BarrelOn = 4,
        BarrelOff = 8,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    enum ScrollDirection
    {
        Undefined,
        Up,
        Down,
        Left,
        Right,
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(43fc513e-1705-4f3d-a63f-608b5bc2b48a)]
    interface IPath
    {
        void StartAt(Windows.Foundation.Point endPoint);
        void MoveTo(Windows.Foundation.Point endPoint, Windows.Foundation.TimeSpan duration);
        void Wait(Windows.Foundation.TimeSpan duration);
        void TransitionToDown(Windows.Foundation.TimeSpan duration);
        void TransitionToHover(Windows.Foundation.TimeSpan duration);
        void TransitionToUp(Windows.Foundation.TimeSpan duration);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(596ea5ad-3db3-4988-8c0b-c786ad336d57)]
    interface IPath2 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath
    {
        void AddPressureChangeToNextAction(Single pressure);
        void AddTiltChangeToNextAction(Single tiltX, Single tiltY);
        void AddTwistChangeToNextAction(Single degreesTwist);
    };

    [uuid(88b68e46-404e-462d-842b-91e0f142022d)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IPath3 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath2, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath
    {
        void TransitionToButtonState(ButtonStateTransition state);
        void TransitionToFlagState(ContactFlagsTransition flags);
        void ScrollMouseWheel(ScrollDirection direction, UInt32 tickResolution, UInt32 numTicks);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(5b1ab495-761f-40da-bb47-c4e6478953de)]
    interface IPacketBasedPath
    {
        void AppendTouchPackets(Microsoft.Test.InputInjectionRT.PointerTouchInfo[] packets);
        void AppendPenPackets(Microsoft.Test.InputInjectionRT.PointerPenInfo[] packets);
        void Clear();
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(3c777840-9183-4001-b1bf-23b79acf0c2e)]
    interface IExecutableInjection
    {
        void ExecuteInjections();
    };

    [uuid(3bbb4cbf-bc12-4ed1-81f7-2d5ec96dd031)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [internal]
    interface IGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    };

    [uuid(3586288a-48e8-4909-8738-f9a32b604dd8)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IGestureFactory
    {
        Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture CreateGesture(GestureType gestureType);
    };

    [uuid(afe8ed79-f511-480a-9ea1-ae5d3cc553d8)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface ICustomGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath CreateContactPath();
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(eebae0c1-315e-4202-8740-524e537b8cec)]
    interface ICustomGesture2 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.ICustomGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPacketBasedPath CreatePacketBasedContactPath();
    };

    [uuid(fc1f46ea-c25c-40d7-8700-775a530657ed)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [internal]
    interface IPathGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath
    {
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(bf0973e2-6465-42f8-91d2-e113977f8be1)]
    [internal]
    interface IPathGesture2 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPathGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath2
    {
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(6802d11c-1edc-4bc0-a0ae-252c914d634f)]
    [internal]
    interface IPathGesture3 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPathGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath3, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath2
    {
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(3df3ae88-68e9-4240-a109-153754d69b05)]
    interface ITapGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        void SetLocation(Windows.Foundation.Point pt);
        void SetTapCount(UInt32 nTaps);
        void SetDurationPerTap(Windows.Foundation.TimeSpan duration);
        void SetDurationBetweenTaps(Windows.Foundation.TimeSpan duration);
        void SetContactCount(UInt32 nContacts);
        void SetContactSeparation(Single radius, Single initialOffsetDegrees);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(9162ae8e-802f-40af-b4fd-75c3d1cc1288)]
    interface IDragGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        void SetLocationInitial(Windows.Foundation.Point pt);
        void SetLocationFinal(Windows.Foundation.Point pt);
        void SetDurationDrag(Windows.Foundation.TimeSpan duration);
        void SetDurationInitialPress(Windows.Foundation.TimeSpan duration);
        void SetDurationFinalRelease(Windows.Foundation.TimeSpan duration);
        void SetContactCount(UInt32 nContacts);
        void SetContactSeparation(Single radius, Single initialOffsetDegrees);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(ed485829-0d94-4dae-be22-57bebbd8cf75)]
    interface IZoomGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        void SetLocationCenter(Windows.Foundation.Point pt);
        void SetZoomRadiusInitial(Single radius);
        void SetZoomRadiusFinal(Single radius);
        void SetZoomAngle(Single degrees);
        void SetDuration(Windows.Foundation.TimeSpan duration);
        void SetContactCount(UInt32 nContacts);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(35d14766-bcc7-4549-9c0b-d75f2114088c)]
    interface IRotateGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        void SetLocationCenter(Windows.Foundation.Point pt);
        void SetRotationRadius(Single radius);
        void SetRotationDegreesInitial(Single degrees);
        void SetRotationDegreesFinal(Single degrees);
        void SetDuration(Windows.Foundation.TimeSpan duration);
        void SetContactCount(UInt32 nContacts);
    };

    [uuid(97730c52-efa8-49f1-a312-5fe75075b5f0)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IPacketFrameGesture requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
        void AppendTouchFrame(Microsoft.Test.InputInjectionRT.PointerTouchInfo[] packets);
        void AppendPenFrame(Microsoft.Test.InputInjectionRT.PointerPenInfo[] packets);
        void AppendHidFrame(Microsoft.Test.InputInjectionRT.HidInfo[] packets);
        void Clear();
    };

    [uuid(d2491e89-3615-463c-9cb1-295edf05f0f9)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IPointerInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void SetInjectionFrequency(UInt32 hz);
    };

    [uuid(9cf96280-ddb9-426e-acbf-199e2e8f5dc1)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface ITouchInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void InjectTouchInput(Microsoft.Test.InputInjectionRT.PointerTouchInfo[] input);
        void SetVisualMode(Microsoft.Test.InputInjectionRT.VisualMode mode);
        void SetMaxContactCount(UInt32 nContacts);
    };

    [uuid(095742e8-3a89-42e3-b00b-e22ba52a8309)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IPenInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void InjectPenInput(ref const Microsoft.Test.InputInjectionRT.PointerPenInfo input);
        void SetVisualMode(Microsoft.Test.InputInjectionRT.VisualMode mode);
    };

    [uuid(d2d9a8a5-4386-4887-a061-c9f26f761370)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IMouseInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void InjectMouseInput(Microsoft.Test.InputInjectionRT.MouseInfo[] input);
    };

    [uuid(5e910fea-f10e-4e72-8ddd-d73fa8eb0854)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IHidInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void InjectHidInput(Microsoft.Test.InputInjectionRT.HidInfo[] hidInfo);
        void SetVisualMode(Microsoft.Test.InputInjectionRT.VisualMode mode);
        void SetUsagePageAndUsages(UInt16 page, UInt16 caUsage, Microsoft.Test.InputInjectionRT.UsageProperties[] usages);
        void SetHMonitor(UInt64 monitor);
    };

    [uuid(f7fa9f7b-95cb-489b-ae1c-b3feb3495ce1)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface ITouchPadInjectionDevice requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice, Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        void InjectTouchPadInput(Microsoft.Test.InputInjectionRT.PointerTouchInfo[] input, TouchPadButtonState buttonState);
        void SetDimensions(UInt16 x, UInt16 y);
        void SetMaxContactCount(UInt32 nContacts);
    };

    [uuid(686404bc-c5f6-408c-a4b1-091b5586137d)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface IPointerInjectionDeviceFactory
    {
        Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice CreateInjectionDevice(PointerType type);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    [uuid(5ef2a369-ba88-4752-b96c-1156845f40bc)]
    interface IPointerInjectionDeviceFactory2 requires Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDeviceFactory
    {
        void SetInjectionMethod(InjectionMethod method);
    };

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass PointerInjectionDeviceFactory
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDeviceFactory
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDeviceFactory2
    {
        PointerInjectionDeviceFactory();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass TouchInjectionDevice
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.ITouchInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        TouchInjectionDevice();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass PenInjectionDevice
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPenInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        PenInjectionDevice();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass MouseInjectionDevice
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IMouseInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        MouseInjectionDevice();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass HidInjectionDevice
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IHidInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        HidInjectionDevice();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass TouchPadInjectionDevice
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.ITouchPadInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPointerInjectionDevice
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGestureFactory
    {
        TouchPadInjectionDevice();
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass Path
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath3
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath2
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass PacketBasedPath
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPacketBasedPath
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass CustomGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.ICustomGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.ICustomGesture2
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass PathGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPathGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPathGesture3
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath3
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPath2
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass TapGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.ITapGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass DragGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IDragGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass ZoomGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IZoomGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass RotateGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IRotateGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    }

    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    runtimeclass PacketFrameGesture
        : [default]Microsoft.Test.InputInjectionRT.ModernPointerInjector.IPacketFrameGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IGesture
        , Microsoft.Test.InputInjectionRT.ModernPointerInjector.IExecutableInjection
    {
    }

}
namespace Microsoft.Test.InputInjectionRT.TouchInjectorInterop
{
    [uuid(5a7e11f7-69b3-4f89-9832-cb0c55e5bbf5)]
    [contract(Microsoft.Test.InputInjectionRT.InternalContract, 1)]
    interface ITouchInjectorInterop
    {
        void InitializeInjection(UInt32 maxContacts, UInt64 feedbackSetting);
        void ChangeInjectionInterval(UInt64 durationInMs);
        void InsertTap(UInt32 pointerId, UInt64 x, UInt64 y, UInt64 durationInMs);
        void BeginPath(UInt32 pointerId, UInt64 x, UInt64 y, UInt64 delayInMs);
        void InsertPathPt(UInt32 pointerId, UInt64 x, UInt64 y, UInt64 durationInMs, UInt64 delayInMs);
        void EndPath(UInt32 pointerId, UInt64 delayInMs);
        void EndPathWithCancel(UInt32 pointerId, UInt64 delayInMs);
        void AddDelayBeforeNextGesture(UInt32 pointerId, UInt64 delayInMs);
        void AddInertiaToNextPathSegment(UInt32 pointerId, Double acceleration);
        void StartHover(UInt32 pointerId);
        void StopHover(UInt32 pointerId);
        void SetFingerRect(UInt32 pointerId, UInt64 leftOffset, UInt64 topOffset, UInt64 rightOffset, UInt64 bottomOffset);
        void SetFingerOrientation(UInt32 pointerId, UInt32 orientation);
        void SetFingerPressure(UInt32 pointerId, UInt32 pressure);
        void AddGeometryChangeToNextPathSegment(UInt32 pointerId, UInt64 startingLeftOffset, UInt64 startingTopOffset, UInt64 startingRightOffset, UInt64 startingBottomOffset, UInt64 endingLeftOffset, UInt64 endingTopOffset, UInt64 endingRightOffset, UInt64 endingBottomOffset);
        void AddOrientationChangeToNextPathSegment(UInt32 pointerId, UInt32 startingOrientation, UInt32 endingOrientation);
        void AddPressureChangeToNextPathSegment(UInt32 pointerId, UInt32 startingPressure, UInt32 endingPressure);
        void ExecuteInjections();
        void ExecuteInjectionsAsync();
        void ExecutePartialInjectionsAsync();
        void CancelAsyncInjections();
        void WaitForExecutionToFinish();
        Int16 IsExecutionComplete();
        void ClearState();
        void UseVhid();
        void UseVhidPen();
        void UseTouchInjection();
        void UseMouseInjection();
        void UseDsf();
        void UseDsfWithCustomContactCount(UInt32 nContacts);
        void SetTouchpadResolution(UInt32 x, UInt32 y);
        void UseDsfPen();
        void UseDsfTouchpad();
        void UseDsfTouchpadWithCustomContactCount(UInt32 nContacts);
    };

}
