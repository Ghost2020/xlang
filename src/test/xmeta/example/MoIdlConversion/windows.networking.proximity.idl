












namespace Windows.Networking.Proximity
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [interface_name("Windows.Networking.Proximity.IProximityMessage", efab0782-f6e1-4675-a045-d8e320c24808)]
    runtimeclass ProximityMessage
    {
        String MessageType{ get; };
        Int64 SubscriptionId{ get; };
        Windows.Storage.Streams.IBuffer Data{ get; };
        String DataAsString{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(efab0782-f6e2-4675-a045-d8e320c24808)]
    delegate void MessageReceivedHandler(ProximityDevice sender, ProximityMessage message);

    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Networking.Proximity.IProximityDeviceStatics", 914ba01d-f6e1-47c4-a14c-148a1903d0c6)]
    [interface_name("Windows.Networking.Proximity.IProximityDevice", efa8a552-f6e1-4329-a0fc-ab6b0fd28262)]
    [threading(both)]
    runtimeclass ProximityDevice
    {
        static String GetDeviceSelector();
        static Windows.Networking.Proximity.ProximityDevice GetDefault();
        static Windows.Networking.Proximity.ProximityDevice FromId(String deviceId);
        Int64 SubscribeForMessage(String messageType, MessageReceivedHandler messageReceivedHandler);
        [method_name("PublishMessage")] Int64 PublishMessage(String messageType, String message);
        [method_name("PublishMessageWithCallback")] Int64 PublishMessage(String messageType, String message, MessageTransmittedHandler messageTransmittedHandler);
        [method_name("PublishBinaryMessage")] Int64 PublishBinaryMessage(String messageType, Windows.Storage.Streams.IBuffer message);
        [method_name("PublishBinaryMessageWithCallback")] Int64 PublishBinaryMessage(String messageType, Windows.Storage.Streams.IBuffer message, MessageTransmittedHandler messageTransmittedHandler);
        [method_name("PublishUriMessage")] Int64 PublishUriMessage(Windows.Foundation.Uri message);
        [method_name("PublishUriMessageWithCallback")] Int64 PublishUriMessage(Windows.Foundation.Uri message, MessageTransmittedHandler messageTransmittedHandler);
        void StopSubscribingForMessage(Int64 subscriptionId);
        void StopPublishingMessage(Int64 messageId);
        event Windows.Networking.Proximity.DeviceArrivedEventHandler DeviceArrived;
        event Windows.Networking.Proximity.DeviceDepartedEventHandler DeviceDeparted;
        UInt32 MaxMessageBytes{ get; };
        UInt64 BitsPerSecond{ get; };
        String DeviceId{ get; };
    }

    [uuid(efaa0b4a-f6e2-4d7d-856c-78fc8efc021e)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void MessageTransmittedHandler(ProximityDevice sender, Int64 messageId);

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(efa9da69-f6e1-49c9-a49e-8e0fc58fb911)]
    delegate void DeviceArrivedEventHandler(ProximityDevice sender);

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(efa9da69-f6e2-49c9-a49e-8e0fc58fb911)]
    delegate void DeviceDepartedEventHandler(ProximityDevice sender);



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum TriggeredConnectState
    {
        PeerFound,
        Listening,
        Connecting,
        Completed,
        Canceled,
        Failed,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs", c6a780ad-f6e1-4d54-96e2-33f620bca88a)]
    runtimeclass TriggeredConnectionStateChangedEventArgs
    {
        Windows.Networking.Proximity.TriggeredConnectState State{ get; };
        UInt32 Id{ get; };
        Windows.Networking.Sockets.StreamSocket Socket{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Proximity.IPeerInformation", 20024f08-9fff-45f4-b6e9-408b2ebef373)]
    runtimeclass PeerInformation
    {
        String DisplayName{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Proximity.IPeerInformation3", b20f612a-dbd0-40f8-95bd-2d4209c7836f)]
        {
            String Id{ get; };
            Windows.Storage.Streams.IBuffer DiscoveryData{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Proximity.IPeerInformationWithHostAndService", ecc7ccad-1b70-4e8b-92db-bbe781419308)]
        {
            Windows.Networking.HostName HostName{ get; };
            String ServiceName{ get; };
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Proximity.IConnectionRequestedEventArgs", eb6891ae-4f1e-4c66-bd0d-46924a942e08)]
    runtimeclass ConnectionRequestedEventArgs
    {
        Windows.Networking.Proximity.PeerInformation PeerInformation{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PeerWatcherStatus
    {
        Created,
        Started,
        EnumerationCompleted,
        Stopping,
        Stopped,
        Aborted,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Proximity.IPeerWatcher", 3cee21f8-2fa6-4679-9691-03c94a420f34)]
    runtimeclass PeerWatcher
    {
        event Windows.Foundation.TypedEventHandler <Windows.Networking.Proximity.PeerWatcher, Windows.Networking.Proximity.PeerInformation>  Added;
        event Windows.Foundation.TypedEventHandler <Windows.Networking.Proximity.PeerWatcher, Windows.Networking.Proximity.PeerInformation>  Removed;
        event Windows.Foundation.TypedEventHandler <Windows.Networking.Proximity.PeerWatcher, Windows.Networking.Proximity.PeerInformation>  Updated;
        event Windows.Foundation.TypedEventHandler <Windows.Networking.Proximity.PeerWatcher, Object>  EnumerationCompleted;
        event Windows.Foundation.TypedEventHandler <Windows.Networking.Proximity.PeerWatcher, Object>  Stopped;
        Windows.Networking.Proximity.PeerWatcherStatus Status{ get; };
        void Start();
        void Stop();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [flags]
    enum PeerDiscoveryTypes
    {
        None,
        Browse,
        Triggered,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum PeerRole
    {
        Peer,
        Host,
        Client,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Networking.Proximity.IPeerFinderStatics", 914b3b61-f6e1-47c4-a14c-148a1903d0c6)]
    [threading(both)]
    runtimeclass PeerFinder
    {
        static Boolean AllowBluetooth{ get; };
        static Boolean AllowBluetooth{ set; };
        static Boolean AllowInfrastructure{ get; };
        static Boolean AllowInfrastructure{ set; };
        static Boolean AllowWiFiDirect{ get; };
        static Boolean AllowWiFiDirect{ set; };
        static String DisplayName{ get; };
        static String DisplayName{ set; };
        static Windows.Networking.Proximity.PeerDiscoveryTypes SupportedDiscoveryTypes{ get; };
        static Windows.Foundation.Collections.IMap <String, String>  AlternateIdentities{ get; };
        [method_name("Start")] static void Start();
        [method_name("StartWithMessage")] static void Start(String peerMessage);
        static void Stop();
        static event Windows.Foundation.TypedEventHandler <Object, Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs>  TriggeredConnectionStateChanged;
        static event Windows.Foundation.TypedEventHandler <Object, Windows.Networking.Proximity.ConnectionRequestedEventArgs>  ConnectionRequested;
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Proximity.PeerInformation> >  FindAllPeersAsync();
        static Windows.Foundation.IAsyncOperation <Windows.Networking.Sockets.StreamSocket>  ConnectAsync(PeerInformation peerInformation);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Networking.Proximity.IPeerFinderStatics2", d6e73c65-fdd0-4b0b-9312-866408935d82)]
        {
            static Windows.Networking.Proximity.PeerRole Role{ get; };
            static Windows.Networking.Proximity.PeerRole Role{ set; };
            static Windows.Storage.Streams.IBuffer DiscoveryData{ get; };
            static Windows.Storage.Streams.IBuffer DiscoveryData{ set; };
            static Windows.Networking.Proximity.PeerWatcher CreateWatcher();
        }
    }

}
