









namespace Windows.Devices.Pwm
{
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum PwmPulsePolarity
    {
        ActiveHigh,
        ActiveLow,
    };


    [dualapipartition(0xa000000)]
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Pwm.IPwmPin", 22972dc8-c6cf-4821-b7f9-c6454fb6af79)]
    runtimeclass PwmPin
        : Windows.Foundation.IClosable
    {
        Windows.Devices.Pwm.PwmController Controller{ get; };
        Double GetActiveDutyCyclePercentage();
        void SetActiveDutyCyclePercentage(Double dutyCyclePercentage);
        Windows.Devices.Pwm.PwmPulsePolarity Polarity{ get; };
        Windows.Devices.Pwm.PwmPulsePolarity Polarity{ set; };
        void Start();
        void Stop();
        Boolean IsStarted{ get; };
    }


    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Devices.Pwm.IPwmControllerStatics", 4263bda1-8946-4404-bd48-81dd124af4d9)]
    [interface_name("Windows.Devices.Pwm.IPwmController", c45f5c85-d2e8-42cf-9bd6-cf5ed029e6a7)]
    runtimeclass PwmController
    {

        [contract(Windows.Devices.DevicesLowLevelContract, 3)]
        [static_name("Windows.Devices.Pwm.IPwmControllerStatics3", b2581871-0229-4344-ae3f-9b7cd0e66b94)]
        {
            [method_name("GetDeviceSelector")] static String GetDeviceSelector();
            [method_name("GetDeviceSelectorFromFriendlyName")] static String GetDeviceSelector(String friendlyName);
            static Windows.Foundation.IAsyncOperation <Windows.Devices.Pwm.PwmController>  FromIdAsync(String deviceId);
        }

        [contract(Windows.Devices.DevicesLowLevelContract, 2)]
        [static_name("Windows.Devices.Pwm.IPwmControllerStatics2", 44fc5b1f-f119-4bdd-97ad-f76ef986736d)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Devices.Pwm.PwmController>  GetDefaultAsync();
        }
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.Pwm.PwmController> >  GetControllersAsync(Windows.Devices.Pwm.Provider.IPwmProvider provider);
        Int32 PinCount{ get; };
        Double ActualFrequency{ get; };
        Double SetDesiredFrequency(Double desiredFrequency);
        Double MinFrequency{ get; };
        Double MaxFrequency{ get; };
        Windows.Devices.Pwm.PwmPin OpenPin(Int32 pinNumber);
    }




}
