namespace PhoneInternal.Experiences.Sync
{
    [flags]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountQueryFilter
    {
        None,
        Email,
        Contacts,
        Calendar = 4,
        Tasks = 8,
        Photos = 16,
        Feeds = 32,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountStatus
    {
        Unknown,
        Idle,
        SyncPending,
        SyncStopping,
        Syncing,
        Disconnected,
        Throttled,
        AttentionRequired,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountChangeType
    {
        Created,
        Deleted,
        Modified,
        Status,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountType
    {
        InternetMail,
        ActiveSync,
        ApplicationSourced,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum PartnershipType
    {
        Invalid = 1,
        Unknown,
        ActiveSyncExchange,
        ActiveSyncGoogle,
        ActiveSyncMicrosoft,
        InternetMailPopImap,
        InternetGoogle,
        InternetIcloud,
        VisualVoiceMail,
        InternetYahoo,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum SyncErrorType
    {
        Unknown,
        NoError,
        UnClassified,
        PasswordError,
        ClientCertError,
        ServerCertError,
        ConnectivityError,
        PolicyError,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum ServerType
    {
        PrimaryServer,
        OutgoingMailServer,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountAuthType
    {
        Basic,
        OAuth,
        MSA,
        SSO,
        PPI,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum ProtocolType
    {
        Pop,
        Imap,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountSyncContentType
    {
        None,
        Contacts,
        Email,
        Calendar = 4,
        Tasks = 8,
        Feeds = 96,
        Photos = 384,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum ExchangeServerAuthType
    {
        Unknown,
        Basic,
        Bearer,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountSyncSchedule
    {
        Manual,
        Periodic15Min = 15,
        Periodic30Min = 30,
        Periodic60Min = 60,
        PeriodicTwoHour = 120,
        PeriodicDaily = 1440,
        BasedOnMyUsage = -1879048193,
        AsItemsArrive = -1,
    };

    [flags]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AutoConfigServerFeedBack
    {
        None,
        UploadIncomingServerSetting,
        UploadOutgoingServerSetting,
    };

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AgeFilterRange
    {
        All,
        OneDay,
        ThreeDays,
        OneWeek,
        TwoWeeks,
        OneMonth,
        ThreeMonths,
        SixMonths,
        ByIncompleteTask,
        OneYear,
        TwoYears,
    };

    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    enum AccountSyncContentFreshness
    {
        KeepPast1Days = 1,
        KeepPast3Days = 3,
        KeepPast7Days = 7,
        KeepPast14Days = 14,
        KeepPast30Days = 30,
        KeepPast90Days = 90,
        KeepAll = -1,
        DefaultFreshness = 7,
    };



    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IAccount", 69cdf7ef-80d4-457f-9ba7-e339c90b6735)]
    runtimeclass Account
    {
        Guid Id{ get; };
        String PublicId{ get; };
        String Name{ get; };
        String Name{ set; };
        String Icon{ get; };
        String Icon{ set; };
        String EmailAddress{ get; };
        String EmailAddress{ set; };
        String Password{ get; };
        String Password{ set; };
        PhoneInternal.Experiences.Sync.AccountType Type{ get; };
        PhoneInternal.Experiences.Sync.PartnershipType PartnershipType{ get; };
        Guid PartnershipTypePublicId{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  GetTrustedIssuersAsync();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <String> >  GetAllEmailsAsync();
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.AccountErrorInformation>  GetAccountErrorInformationAsync();
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.AccountSyncScheduleInformation>  GetAccountSyncScheduleInformationAsync();
        Windows.Foundation.IAsyncAction LoadPropertiesAsync(Windows.Foundation.Collections.IIterable <String>  propIds);
        Windows.Foundation.Collections.PropertySet GetProperties(Windows.Foundation.Collections.IIterable <String>  propIds);
        void SetProperties(Windows.Foundation.Collections.PropertySet props);
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.AccountStatus>  GetStatusAsync();
        Windows.Foundation.IAsyncOperation <String>  GetStatusDescriptionAsync(String resourceQualifier);
        Windows.Foundation.IAsyncAction SetStatusAsync(AccountStatus status);
        Windows.Foundation.IAsyncAction SyncAccountAsync();
        Windows.Foundation.IAsyncAction SyncAccountAndWaitForCompletionAsync();
        Windows.Foundation.IAsyncAction DeleteAccountAsync();
        Windows.Foundation.IAsyncAction SaveAsync();
        event Windows.Foundation.TypedEventHandler <Object, PhoneInternal.Experiences.Sync.AccountChangedEventArgs>  AccountChangedEvent;
    }

    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IWebAuthSettings", 9eadf9ab-506c-4644-9a06-de9f9e40113e)]
    [threading(both)]
    runtimeclass WebAuthSettings
    {
        WebAuthSettings();
        String Authority{ get; };
        String AuthUri{ get; };
        String Id{ get; };
        String Padding{ get; };
        String RefreshUri{ get; };
        String RequestParameters{ get; };
        String Scheme{ get; };
        String Scope{ get; };
    }

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("PhoneInternal.Experiences.Sync.IAccountChangedEventArgs", c0634414-6dba-46cc-a0b0-33afdf8f3f89)]
    [threading(both)]
    runtimeclass AccountChangedEventArgs
    {
        AccountChangedEventArgs();
        Guid AccountId{ get; };
        PhoneInternal.Experiences.Sync.AccountChangeType Type{ get; };
        Windows.Foundation.Collections.IVector <String>  ChangedPropertyIds{ get; };
    }



    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("PhoneInternal.Experiences.Sync.IAccountErrorInformation", 334a5d9c-8026-47e5-a9f6-efc7500e6315)]
    [threading(both)]
    runtimeclass AccountErrorInformation
    {
        AccountErrorInformation();
        PhoneInternal.Experiences.Sync.SyncErrorType SyncErrorType{ get; };
        PhoneInternal.Experiences.Sync.ServerType ServerType{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IAccountSyncScheduleInformation", 51233c4a-d688-44b8-8008-277cd6780410)]
    [threading(both)]
    runtimeclass AccountSyncScheduleInformation
    {
        AccountSyncScheduleInformation();
        PhoneInternal.Experiences.Sync.AccountSyncSchedule AccountSyncSchedule{ get; };
        Boolean AdaptiveToSaveDataUsage{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IExchangeServerDiscoveryResult", f8858201-d546-4126-a4e3-6736ca5900d5)]
    [threading(both)]
    runtimeclass ExchangeServerDiscoveryResult
    {
        ExchangeServerDiscoveryResult();
        String ServerName{ get; };
        String ServerEndPoint{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IInternetMailServerDiscoveryResult", 6521c1ab-9657-417d-a49b-20dc57fc0a92)]
    [threading(both)]
    runtimeclass InternetMailServerDiscoveryResult
    {
        InternetMailServerDiscoveryResult();
        String ServerName{ get; };
        PhoneInternal.Experiences.Sync.ProtocolType SupportProtocolType{ get; };
        String IncomingServerUrl{ get; };
        UInt32 IncomingServerPort{ get; };
        Boolean IncomingServerUseSsl{ get; };
        UInt32 IncomingServerUserNameFormat{ get; };
        String OutgoingServerUrl{ get; };
        UInt32 OutgoingServerPort{ get; };
        Boolean OutgoingServerUseSsl{ get; };
        UInt32 OutgoingServerUserNameFormat{ get; };
        Boolean OutgoingServerAuthRequired{ get; };
    }






    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("PhoneInternal.Experiences.Sync.IAccountsManagerStatics", 28a8c3fc-758e-4ac3-be71-7461a2a525bc)]
    [threading(both)]
    runtimeclass AccountsManager
    {
        static Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.Account>  CreateAccountAsync(AccountType type, Windows.Foundation.Collections.PropertySet props);
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <PhoneInternal.Experiences.Sync.Account> >  GetAccountsAsync();
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVector <PhoneInternal.Experiences.Sync.Account> >  GetAccountsWithFilterAsync(AccountQueryFilter filter);
        static Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.Account>  GetAccountAsync(Guid accountId);
        static Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.Account>  GetAccountByUserDataAccountIdAsync(String userDataAccountId);
        static Windows.Foundation.Collections.IVector <PhoneInternal.Experiences.Sync.PartnershipType>  GetPartnershipTypes(AccountSyncContentType accountSyncContentType);
        static Windows.Foundation.Collections.IVector <PhoneInternal.Experiences.Sync.AccountSyncContentType>  GetSupportedContentTypes(PartnershipType partnershipType);
        static PhoneInternal.Experiences.Sync.Account TryGetExistingAccount(PartnershipType partnershipType, String email);
        static PhoneInternal.Experiences.Sync.WebAuthSettings GetWebAuthSettings(PartnershipType partnershipType);
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Security.Cryptography.Certificates.Certificate> >  GetClientAuthenticationCertificatesAsync();
        static Boolean IsMsaEasi(String msaUsername);
        static Windows.Foundation.IAsyncOperation <String>  ConvertWebAccountIdFromAppSpecificIdAsync(PartnershipType partnershipType, String appId);
        static Windows.Foundation.IAsyncOperation <String>  ConvertWebAccountIdToAppSpecificIdAsync(PartnershipType partnershipType, String realId);
        static event Windows.Foundation.TypedEventHandler <Object, PhoneInternal.Experiences.Sync.AccountChangedEventArgs>  AccountChangedEvent;
    }

    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("PhoneInternal.Experiences.Sync.IAccountPropertiesStatics", 6e9ae4b1-61fd-4978-b813-82bc96870769)]
    [threading(both)]
    runtimeclass AccountProperties
    {
        static String Id{ get; };
        static String Name{ get; };
        static String Icon{ get; };
        static String EmailAddress{ get; };
        static String LastSyncSuccess{ get; };
        static String LastSyncAttempt{ get; };
        static String LastSyncResult{ get; };
        static String LastUsed{ get; };
        static String DeleteInProgress{ get; };
        static String SMIMEAlwaysEncrypt{ get; };
        static String SMIMEAlwaysSign{ get; };
        static String RequireEncryptedSMIMEMessages{ get; };
        static String RequireSignedSMIMEMessages{ get; };
        static String AllowSMIMEEncryptionAlgorithmNegotiation{ get; };
        static String AllowSMIMESoftCerts{ get; };
        static String RequiredEncryptionSMIMEAlgorithm{ get; };
        static String RequiredSignedSMIMEAlgorithm{ get; };
        static String AuthenticationType{ get; };
        static String RefreshToken{ get; };
        static String TokenExpiration{ get; };
        static String SSOAccountId{ get; };
        static String UserDataAccountId{ get; };
        static String AllowMailTruncation{ get; };
        static String AllowMailSync{ get; };
        static String InitialAutdHeartbeat{ get; };
        static String MinAutdHeartbeat{ get; };
        static String MaxAutdHeartbeat{ get; };
        static String AutdHeartbeatIncrement{ get; };
        static String AccountMigrated{ get; };
        static String IsExternallyManaged{ get; };
        static String ActiveSync_Type{ get; };
        static String ActiveSync_Server{ get; };
        static String ActiveSync_Domain{ get; };
        static String ActiveSync_UserName{ get; };
        static String ActiveSync_Password{ get; };
        static String ActiveSync_ServerUseSsl{ get; };
        static String ActiveSync_SyncFrequency{ get; };
        static String ActiveSync_CalendarAgeFilter{ get; };
        static String ActiveSync_MaxMailAgeFilter{ get; };
        static String ActiveSync_MailAgeFilter{ get; };
        static String ActiveSync_MailBodyType{ get; };
        static String ActiveSync_MailHTMLTruncation{ get; };
        static String ActiveSync_MailPlainTextTruncation{ get; };
        static String ActiveSync_ContactsEnabled{ get; };
        static String ActiveSync_CalendarEnabled{ get; };
        static String ActiveSync_MailEnabled{ get; };
        static String ActiveSync_TasksEnabled{ get; };
        static String ActiveSync_PhotoEnabled{ get; };
        static String ActiveSync_FeedsEnabled{ get; };
        static String ActiveSync_HasSynced{ get; };
        static String ActiveSync_IsDefaultAccount{ get; };
        static String ActiveSync_ConversationSyncEnabled{ get; };
        static String ActiveSync_DomainUnsupported{ get; };
        static String ActiveSync_RoomsSchedule{ get; };
        static String ActiveSync_AllEmailAddresses{ get; };
        static String ActiveSync_FailedDownloadAttachment{ get; };
        static String ActiveSync_ServerCertHashConfirmed{ get; };
        static String ActiveSync_ClientAuthCertNeeded{ get; };
        static String ActiveSync_AutoSelectAuthCert{ get; };
        static String ActiveSync_ServerIsWindowsLive{ get; };
        static String ActiveSync_ServerCertHash{ get; };
        static String ActiveSync_PreventAccountFromSyncing{ get; };
        static String ActiveSync_AuthCertId{ get; };
        static String ActiveSync_AcceptableClientCertificateIssuers{ get; };
        static String ActiveSync_AccountProtected{ get; };
        static String ActiveSync_SsoAuthSupported{ get; };
        static String ActiveSync_AccountProtectedDomain{ get; };
        static String ActiveSync_DeleteSupported{ get; };
        static String InternetMail_AccountServiceType{ get; };
        static String InternetMail_EmailDisplayName{ get; };
        static String InternetMail_Domain{ get; };
        static String InternetMail_UserName{ get; };
        static String InternetMail_Password{ get; };
        static String InternetMail_IncomingServer{ get; };
        static String InternetMail_IncomingServerUseSsl{ get; };
        static String InternetMail_OutgoingServer{ get; };
        static String InternetMail_OutgoingServerUseSsl{ get; };
        static String InternetMail_OutgoingServerAuthRequired{ get; };
        static String InternetMail_OutgoingServerAuthEnabled{ get; };
        static String InternetMail_OutgoingServerDomain{ get; };
        static String InternetMail_OutgoingServerUserName{ get; };
        static String InternetMail_OutgoingServerPassword{ get; };
        static String InternetMail_Schedule{ get; };
        static String InternetMail_DownloadDays{ get; };
        static String InternetMail_KeepMax{ get; };
        static String InternetMail_Retrieve{ get; };
        static String InternetMail_AccountType{ get; };
        static String InternetMail_UseCellularOnly{ get; };
        static String InternetMail_ServerDeleteAction{ get; };
        static String InternetMail_HasSynced{ get; };
        static String InternetMail_SyncingContentType{ get; };
        static String InternetMail_CardDavServerUrl{ get; };
        static String InternetMail_CardDavUseSSL{ get; };
        static String InternetMail_CalDavServerUrl{ get; };
        static String InternetMail_CalDavUseSSL{ get; };
        static String InternetMail_CardDavSyncFreq{ get; };
        static String InternetMail_CalDavSyncFreq{ get; };
        static String InternetMail_LastSMTPSuccess{ get; };
        static String InternetMail_AccountCreateTime{ get; };
        static String InternetMail_IncomingServerSettingsVerified{ get; };
        static String InternetMail_OutgoingServerSettingsVerified{ get; };
        static String InternetMail_UserInputSettings{ get; };
        static String InternetMail_ErrorSource{ get; };
        static String InternetMail_Engine{ get; };
        static String InternetMail_IsPushImapSupported{ get; };
        static String InternetMail_OtherMailSyncPeriod{ get; };
        static String InternetMail_LastCalendarSyncAttempt{ get; };
        static String InternetMail_CalendarAgeFilter{ get; };
        static String InternetMail_LastContactSyncAttempt{ get; };
        static String InternetMail_LastOtherMailSyncAttempt{ get; };
        static String InternetMail_PreventAccountFromSyncing{ get; };
        static String InternetMail_IncomingServerCertHashConfirmed{ get; };
        static String InternetMail_OutgoingServerCertHashConfirmed{ get; };
        static Windows.Foundation.Collections.IVector <String>  DefaultProperties{ get; };
        static Windows.Foundation.Collections.IVector <String>  ActiveSyncProperties{ get; };
        static Windows.Foundation.Collections.IVector <String>  InternetMailProperties{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(PhoneInternal.Experiences.Sync.InternalContract, 1)]
    [interface_name("PhoneInternal.Experiences.Sync.IEmailServerSettingsDiscovery", a813844e-71de-4935-a165-a0877a8de5d7)]
    [threading(both)]
    runtimeclass EmailServerSettingsDiscovery
    {
        EmailServerSettingsDiscovery();
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.ExchangeServerDiscoveryResult>  DiscoverExchangeServerConfigAsync(String userEmail, String userName, String password);
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.ExchangeServerAuthType>  DiscoverExchangeServerAuthTypeAsync(String userEmail);
        void CancelDiscoverExchangeServerConfig();
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.InternetMailServerDiscoveryResult>  DiscoverInternetMailServerConfigAsync(Guid clientId, String userEmail, String customDomain);
        void CancelDiscoverInternetMailServerConfig(Guid clientId);
        Windows.Foundation.IAsyncOperation <PhoneInternal.Experiences.Sync.ExchangeServerAuthType>  VerifyExchangeMailBoxTokenAuthAsync(String server, String accountId, Boolean useSsl);
    }

}
