










namespace Windows.Gaming.Input
{
    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum ArcadeStickButtons
    {
        None,
        StickUp,
        StickDown,
        StickLeft = 4,
        StickRight = 8,
        Action1 = 16,
        Action2 = 32,
        Action3 = 64,
        Action4 = 128,
        Action5 = 256,
        Action6 = 512,
        Special1 = 1024,
        Special2 = 2048,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum FlightStickButtons
    {
        None,
        FirePrimary,
        FireSecondary,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum GameControllerButtonLabel
    {
        None,
        XboxBack,
        XboxStart,
        XboxMenu,
        XboxView,
        XboxUp,
        XboxDown,
        XboxLeft,
        XboxRight,
        XboxA,
        XboxB,
        XboxX,
        XboxY,
        XboxLeftBumper,
        XboxLeftTrigger,
        XboxLeftStickButton,
        XboxRightBumper,
        XboxRightTrigger,
        XboxRightStickButton,
        XboxPaddle1,
        XboxPaddle2,
        XboxPaddle3,
        XboxPaddle4,
        Mode,
        Select,
        Menu,
        View,
        Back,
        Start,
        Options,
        Share,
        Up,
        Down,
        Left,
        Right,
        LetterA,
        LetterB,
        LetterC,
        LetterL,
        LetterR,
        LetterX,
        LetterY,
        LetterZ,
        Cross,
        Circle,
        Square,
        Triangle,
        LeftBumper,
        LeftTrigger,
        LeftStickButton,
        Left1,
        Left2,
        Left3,
        RightBumper,
        RightTrigger,
        RightStickButton,
        Right1,
        Right2,
        Right3,
        Paddle1,
        Paddle2,
        Paddle3,
        Paddle4,
        Plus,
        Minus,
        DownLeftArrow,
        DialLeft,
        DialRight,
        Suspension,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum GameControllerSwitchKind
    {
        TwoWay,
        FourWay,
        EightWay,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum GameControllerSwitchPosition
    {
        Center,
        Up,
        UpRight,
        Right,
        DownRight,
        Down,
        DownLeft,
        Left,
        UpLeft,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum GamepadButtons
    {
        None,
        Menu,
        View,
        A = 4,
        B = 8,
        X = 16,
        Y = 32,
        DPadUp = 64,
        DPadDown = 128,
        DPadLeft = 256,
        DPadRight = 512,
        LeftShoulder = 1024,
        RightShoulder = 2048,
        LeftThumbstick = 4096,
        RightThumbstick = 8192,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        Paddle1 = 16384,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        Paddle2 = 32768,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        Paddle3 = 65536,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        Paddle4 = 131072,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum RacingWheelButtons
    {
        None,
        PreviousGear,
        NextGear,
        DPadUp = 4,
        DPadDown = 8,
        DPadLeft = 16,
        DPadRight = 32,
        Button1 = 64,
        Button2 = 128,
        Button3 = 256,
        Button4 = 512,
        Button5 = 1024,
        Button6 = 2048,
        Button7 = 4096,
        Button8 = 8192,
        Button9 = 16384,
        Button10 = 32768,
        Button11 = 65536,
        Button12 = 131072,
        Button13 = 262144,
        Button14 = 524288,
        Button15 = 1048576,
        Button16 = 2097152,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum RequiredUINavigationButtons
    {
        None,
        Menu,
        View,
        Accept = 4,
        Cancel = 8,
        Up = 16,
        Down = 32,
        Left = 64,
        Right = 128,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    enum OptionalUINavigationButtons
    {
        None,
        Context1,
        Context2,
        Context3 = 4,
        Context4 = 8,
        PageUp = 16,
        PageDown = 32,
        PageLeft = 64,
        PageRight = 128,
        ScrollUp = 256,
        ScrollDown = 512,
        ScrollLeft = 1024,
        ScrollRight = 2048,
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    struct ArcadeStickReading
    {
        UInt64 Timestamp;
        ArcadeStickButtons Buttons;
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    struct FlightStickReading
    {
        UInt64 Timestamp;
        FlightStickButtons Buttons;
        GameControllerSwitchPosition HatSwitch;
        Double Roll;
        Double Pitch;
        Double Yaw;
        Double Throttle;
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct GamepadReading
    {
        UInt64 Timestamp;
        GamepadButtons Buttons;
        Double LeftTrigger;
        Double RightTrigger;
        Double LeftThumbstickX;
        Double LeftThumbstickY;
        Double RightThumbstickX;
        Double RightThumbstickY;
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct GamepadVibration
    {
        Double LeftMotor;
        Double RightMotor;
        Double LeftTrigger;
        Double RightTrigger;
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    struct RacingWheelReading
    {
        UInt64 Timestamp;
        RacingWheelButtons Buttons;
        Int32 PatternShifterGear;
        Double Wheel;
        Double Throttle;
        Double Brake;
        Double Clutch;
        Double Handbrake;
    };

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    struct UINavigationReading
    {
        UInt64 Timestamp;
        RequiredUINavigationButtons RequiredButtons;
        OptionalUINavigationButtons OptionalButtons;
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(1baf6522-5f64-42c5-8267-b9fe2215bfbd)]
    interface IGameController
    {
        event Windows.Foundation.TypedEventHandler <Windows.Gaming.Input.IGameController, Windows.Gaming.Input.Headset>  HeadsetConnected;
        event Windows.Foundation.TypedEventHandler <Windows.Gaming.Input.IGameController, Windows.Gaming.Input.Headset>  HeadsetDisconnected;
        event Windows.Foundation.TypedEventHandler <Windows.Gaming.Input.IGameController, Windows.System.UserChangedEventArgs>  UserChanged;
        Windows.Gaming.Input.Headset Headset{ get; };
        Boolean IsWireless{ get; };
        Windows.System.User User{ get; };
    };

    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Gaming.Input.IHeadset", 3fd156ef-6925-3fa8-9181-029c5223ae3b)]
    runtimeclass Headset
        : [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Gaming.Input.IGameControllerBatteryInfo
    {
        String CaptureDeviceId{ get; };
        String RenderDeviceId{ get; };
    }

    [uuid(dcecc681-3963-4da6-955d-553f3b6f6161)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    interface IGameControllerBatteryInfo
    {
        Windows.Devices.Power.BatteryReport TryGetBatteryReport();
    };



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000002)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.Gaming.Input.IArcadeStickStatics", 5c37b8c8-37b1-4ad8-9458-200f1a30018e)]
    [interface_name("Windows.Gaming.Input.IArcadeStick", b14a539d-befb-4c81-8051-15ecf3b13036)]
    [threading(both)]
    runtimeclass ArcadeStick
        : Windows.Gaming.Input.IGameController
        , [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Gaming.Input.IGameControllerBatteryInfo
    {
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.ArcadeStick>  ArcadeStickAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.ArcadeStick>  ArcadeStickRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.ArcadeStick>  ArcadeSticks{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Gaming.Input.IArcadeStickStatics2", 52b5d744-bb86-445a-b59c-596f0e2a49df)]
        {
            static Windows.Gaming.Input.ArcadeStick FromGameController(IGameController gameController);
        }
        Windows.Gaming.Input.GameControllerButtonLabel GetButtonLabel(ArcadeStickButtons button);
        Windows.Gaming.Input.ArcadeStickReading GetCurrentReading();
    }




    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [dualapipartition(0xa000003)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Gaming.Input.IFlightStickStatics", 5514924a-fecc-435e-83dc-5cec8a18a520)]
    [interface_name("Windows.Gaming.Input.IFlightStick", b4a2c01c-b83b-4459-a1a9-97b03c33da7c)]
    [threading(both)]
    runtimeclass FlightStick
        : Windows.Gaming.Input.IGameController
        , Windows.Gaming.Input.IGameControllerBatteryInfo
    {
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.FlightStick>  FlightStickAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.FlightStick>  FlightStickRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.FlightStick>  FlightSticks{ get; };
        static Windows.Gaming.Input.FlightStick FromGameController(IGameController gameController);
        Windows.Gaming.Input.GameControllerSwitchKind HatSwitchKind{ get; };
        Windows.Gaming.Input.GameControllerButtonLabel GetButtonLabel(FlightStickButtons button);
        Windows.Gaming.Input.FlightStickReading GetCurrentReading();
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Gaming.Input.IGamepadStatics", 8bbce529-d49c-39e9-9560-e47dde96b7c8)]
    [interface_name("Windows.Gaming.Input.IGamepad", bc7bb43c-0a69-3903-9e9d-a50f86a45de5)]
    [threading(both)]
    runtimeclass Gamepad
        : Windows.Gaming.Input.IGameController
        , [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Gaming.Input.IGameControllerBatteryInfo
    {

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Gaming.Input.IGamepadStatics2", 42676dc5-0856-47c4-9213-b395504c3a3c)]
        {
            static Windows.Gaming.Input.Gamepad FromGameController(IGameController gameController);
        }
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.Gamepad>  GamepadAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.Gamepad>  GamepadRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.Gamepad>  Gamepads{ get; };
        Windows.Gaming.Input.GamepadVibration Vibration{ get; };
        Windows.Gaming.Input.GamepadVibration Vibration{ set; };
        Windows.Gaming.Input.GamepadReading GetCurrentReading();

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Gaming.Input.IGamepad2", 3c1689bd-5915-4245-b0c0-c89fae0308ff)]
        {
            Windows.Gaming.Input.GameControllerButtonLabel GetButtonLabel(GamepadButtons button);
        }
    }





    [dualapipartition(0xa000002)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Gaming.Input.IRacingWheelStatics", 3ac12cd5-581b-4936-9f94-69f1e6514c7d)]
    [interface_name("Windows.Gaming.Input.IRacingWheel", f546656f-e106-4c82-a90f-554012904b85)]
    [threading(both)]
    runtimeclass RacingWheel
        : Windows.Gaming.Input.IGameController
        , [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Gaming.Input.IGameControllerBatteryInfo
    {

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Gaming.Input.IRacingWheelStatics2", e666bcaa-edfd-4323-a9f6-3c384048d1ed)]
        {
            static Windows.Gaming.Input.RacingWheel FromGameController(IGameController gameController);
        }
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.RacingWheel>  RacingWheelAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.RacingWheel>  RacingWheelRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.RacingWheel>  RacingWheels{ get; };
        Boolean HasClutch{ get; };
        Boolean HasHandbrake{ get; };
        Boolean HasPatternShifter{ get; };
        Int32 MaxPatternShifterGear{ get; };
        Double MaxWheelAngle{ get; };
        Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor WheelMotor{ get; };
        Windows.Gaming.Input.GameControllerButtonLabel GetButtonLabel(RacingWheelButtons button);
        Windows.Gaming.Input.RacingWheelReading GetCurrentReading();
    }





    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [static_name("Windows.Gaming.Input.IRawGameControllerStatics", eb8d0792-e95a-4b19-afc7-0a59f8bf759e)]
    [interface_name("Windows.Gaming.Input.IRawGameController", 7cad6d91-a7e1-4f71-9a78-33e9c5dfea62)]
    [threading(both)]
    runtimeclass RawGameController
        : Windows.Gaming.Input.IGameController
        , Windows.Gaming.Input.IGameControllerBatteryInfo
    {
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.RawGameController>  RawGameControllerAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.RawGameController>  RawGameControllerRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.RawGameController>  RawGameControllers{ get; };
        static Windows.Gaming.Input.RawGameController FromGameController(IGameController gameController);
        Int32 AxisCount{ get; };
        Int32 ButtonCount{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.ForceFeedback.ForceFeedbackMotor>  ForceFeedbackMotors{ get; };
        UInt16 HardwareProductId{ get; };
        UInt16 HardwareVendorId{ get; };
        Int32 SwitchCount{ get; };
        Windows.Gaming.Input.GameControllerButtonLabel GetButtonLabel(Int32 buttonIndex);
        [return_name("timestamp")] UInt64 GetCurrentReading(ref Boolean[] buttonArray, ref GameControllerSwitchPosition[] switchArray, ref Double[] axisArray);
        Windows.Gaming.Input.GameControllerSwitchKind GetSwitchKind(Int32 switchIndex);

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.Gaming.Input.IRawGameController2", 43c0c035-bb73-4756-a787-3ed6bea617bd)]
        {
            Windows.Foundation.Collections.IVectorView <Windows.Devices.Haptics.SimpleHapticsController>  SimpleHapticsControllers{ get; };
            String NonRoamableId{ get; };
            String DisplayName{ get; };
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000002)]
    [static_name("Windows.Gaming.Input.IUINavigationControllerStatics", 2f14930a-f6f8-4a48-8d89-94786cca0c2e)]
    [interface_name("Windows.Gaming.Input.IUINavigationController", e5aeefdd-f50e-4a55-8cdc-d33229548175)]
    [threading(both)]
    runtimeclass UINavigationController
        : Windows.Gaming.Input.IGameController
        , [contract(Windows.Foundation.UniversalApiContract, 4)]
        Windows.Gaming.Input.IGameControllerBatteryInfo
    {
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.UINavigationController>  UINavigationControllerAdded;
        static event Windows.Foundation.EventHandler <Windows.Gaming.Input.UINavigationController>  UINavigationControllerRemoved;
        static Windows.Foundation.Collections.IVectorView <Windows.Gaming.Input.UINavigationController>  UINavigationControllers{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.Gaming.Input.IUINavigationControllerStatics2", e0cb28e3-b20b-4b0b-9ed4-f3d53cec0de4)]
        {
            static Windows.Gaming.Input.UINavigationController FromGameController(IGameController gameController);
        }
        Windows.Gaming.Input.UINavigationReading GetCurrentReading();
        Windows.Gaming.Input.GameControllerButtonLabel GetOptionalButtonLabel(OptionalUINavigationButtons button);
        Windows.Gaming.Input.GameControllerButtonLabel GetRequiredButtonLabel(RequiredUINavigationButtons button);
    }


}
