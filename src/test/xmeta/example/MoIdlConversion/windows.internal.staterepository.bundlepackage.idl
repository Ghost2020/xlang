











namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IBundlePackageStatics", 6d2c036e-f5f7-43e6-8429-b081a4c42c5c)]
    [interface_name("Windows.Internal.StateRepository.IBundlePackage", c350c0f0-67c2-4b67-b944-c28ea6ae631b)]
    [threading(both)]
    runtimeclass BundlePackage
    {
        BundlePackage();
        static Boolean Exists(Int64 bundlePackageID);
        static Boolean ExistsByBundle(Bundle Bundle);
        static Boolean ExistsByBundleAndVersion(Bundle Bundle, UInt64 Version);
        static Boolean ExistsByBundleAndVersionAndArchitecture(Bundle Bundle, UInt64 Version, UInt32 Architecture);
        static Boolean ExistsByBundleAndVersionAndArchitectureAndResourceId(Bundle Bundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Boolean ExistsByPackageType(BundlePackageType PackageType);
        static Boolean ExistsByPackageTypeAndBundle(BundlePackageType PackageType, Bundle Bundle);
        static Windows.Internal.StateRepository.BundlePackage Get(Int64 bundlePackageID);
        static Windows.Internal.StateRepository.BundlePackage TryGet(Int64 bundlePackageID);
        static Windows.Internal.StateRepository.BundlePackage GetByBundleAndVersionAndArchitectureAndResourceId(Bundle Bundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Windows.Internal.StateRepository.BundlePackage TryGetByBundleAndVersionAndArchitectureAndResourceId(Bundle Bundle, UInt64 Version, UInt32 Architecture, String ResourceId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  FindByBundle(Bundle Bundle);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  FindByBundleAndVersion(Bundle Bundle, UInt64 Version);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  FindByBundleAndVersionAndArchitecture(Bundle Bundle, UInt64 Version, UInt32 Architecture);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  FindByPackageType(BundlePackageType PackageType);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.BundlePackage>  FindByPackageTypeAndBundle(BundlePackageType PackageType, Bundle Bundle);
        static Boolean ExistsByPackageFamilyNameAndResourceId(String packageFamilyName, String resourceId);
        Int64 _BundlePackageID{ get; };
        Int64 _BundlePackageID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Bundle{ get; };
        Int64 Bundle{ set; };
        Windows.Internal.StateRepository.Bundle GetBundle();
        void SetBundle(Bundle value);
        Windows.Internal.StateRepository.BundlePackageType PackageType{ get; };
        Windows.Internal.StateRepository.BundlePackageType PackageType{ set; };
        UInt64 Version{ get; };
        UInt64 Version{ set; };
        UInt32 Architecture{ get; };
        UInt32 Architecture{ set; };
        Boolean IsResourceIdNull{ get; };
        void SetResourceIdToNull();
        String ResourceId{ get; };
        String ResourceId{ set; };
        String Filename{ get; };
        String Filename{ set; };
        Windows.Storage.StorageFile GetFilenameAsStorageFile();
        void SetFilenameAsStorageFile(Windows.Storage.IStorageFile value);
        UInt64 Offset{ get; };
        UInt64 Offset{ set; };
        UInt64 Size{ get; };
        UInt64 Size{ set; };
        Windows.Internal.StateRepository.BundlePackageFlags Flags{ get; };
        Windows.Internal.StateRepository.BundlePackageFlags Flags{ set; };
        Boolean ResourcesDefault{ get; };
        Boolean ResourcesDefault{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
