









namespace Windows.Networking
{
    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HostNameSortOptions
    {
        None,
        OptimizeForLongConnections = 2,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HostNameType
    {
        DomainName,
        Ipv4,
        Ipv6,
        Bluetooth,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DomainNameType
    {
        Suffix,
        FullyQualified,
    };



}
namespace Windows.Networking.Connectivity
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6020000)]
    [interface_name("Windows.Networking.Connectivity.IIPInformation", d85145e0-138f-47d7-9b3a-36bb488cef33)]
    runtimeclass IPInformation
    {
        Windows.Networking.Connectivity.NetworkAdapter NetworkAdapter{ get; };
        Windows.Foundation.IReference <UInt8>  PrefixLength{ get; };
    }

}
namespace Windows.Networking
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Networking.IHostNameFactory", 458c23ed-712f-4576-adf1-c20b2c643558)]
    [static_name("Windows.Networking.IHostNameStatics", f68cd4bf-a388-4e8b-91ea-54dd6dd901c0)]
    [interface_name("Windows.Networking.IHostName", bf8ecaad-ed96-49a7-9084-d416cae88dcb)]
    [threading(both)]
    runtimeclass HostName
        : [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Foundation.IStringable
    {
        [method_name( "CreateHostName" )] HostName(String hostName);
        static Int32 Compare(String value1, String value2);
        Windows.Networking.Connectivity.IPInformation IPInformation{ get; };
        String RawName{ get; };
        String DisplayName{ get; };
        String CanonicalName{ get; };
        Windows.Networking.HostNameType Type{ get; };
        Boolean IsEqual(HostName hostName);
    }




    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Networking.IEndpointPairFactory", b609d971-64e0-442b-aa6f-cc8c8f181f78)]
    [interface_name("Windows.Networking.IEndpointPair", 33a0aa36-f8fa-4b30-b856-76517c3bd06d)]
    [threading(both)]
    runtimeclass EndpointPair
    {
        [method_name( "CreateEndpointPair" )] EndpointPair(HostName localHostName, String localServiceName, HostName remoteHostName, String remoteServiceName);
        Windows.Networking.HostName LocalHostName{ get; };
        Windows.Networking.HostName LocalHostName{ set; };
        String LocalServiceName{ get; };
        String LocalServiceName{ set; };
        Windows.Networking.HostName RemoteHostName{ get; };
        Windows.Networking.HostName RemoteHostName{ set; };
        String RemoteServiceName{ get; };
        String RemoteServiceName{ set; };
    }

}
namespace Windows.Networking.Connectivity
{
    [contractversion(2)]
    apicontract WwanContract{};

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NetworkCostType
    {
        Unknown,
        Unrestricted,
        Fixed,
        Variable,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NetworkConnectivityLevel
    {
        None,
        LocalAccess,
        ConstrainedInternetAccess,
        InternetAccess,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NetworkTypes
    {
        None,
        Internet,
        PrivateNetwork,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum RoamingStates
    {
        None,
        NotRoaming,
        Roaming,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NetworkAuthenticationType
    {
        None,
        Unknown,
        Open80211,
        SharedKey80211,
        Wpa,
        WpaPsk,
        WpaNone,
        Rsna,
        RsnaPsk,
        Ihv,
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        Wpa3,
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        Wpa3Sae,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum NetworkEncryptionType
    {
        None,
        Unknown,
        Wep,
        Wep40,
        Wep104,
        Tkip,
        Ccmp,
        WpaUseGroup,
        RsnUseGroup,
        Ihv,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DomainConnectivityLevel
    {
        None,
        Unauthenticated,
        Authenticated,
    };

    [contract(Windows.Networking.Connectivity.WwanContract, 1)]
    enum WwanNetworkRegistrationState
    {
        None,
        Deregistered,
        Searching,
        Home,
        Roaming,
        Partner,
        Denied,
    };

    [contract(Windows.Networking.Connectivity.WwanContract, 2)]
    enum WwanNetworkIPKind
    {
        None,
        Ipv4,
        Ipv6,
        Ipv4v6,
        Ipv4v6v4Xlat,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum DataUsageGranularity
    {
        PerMinute,
        PerHour,
        PerDay,
        Total,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CellularApnAuthenticationType
    {
        None,
        Pap,
        Chap,
        Mschapv2,
    };

    [contract(Windows.Networking.Connectivity.WwanContract, 1)]
    [flags]
    enum WwanDataClass
    {
        None,
        Gprs,
        Edge,
        Umts = 4,
        Hsdpa = 8,
        Hsupa = 16,
        LteAdvanced = 32,
        Cdma1xRtt = 65536,
        Cdma1xEvdo = 131072,
        Cdma1xEvdoRevA = 262144,
        Cdma1xEvdv = 524288,
        Cdma3xRtt = 1048576,
        Cdma1xEvdoRevB = 2097152,
        CdmaUmb = 4194304,
        Custom = 0x80000000,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum TriStates
    {
        DoNotCare,
        No,
        Yes,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum ConnectionProfileDeleteStatus
    {
        Success,
        DeniedByUser,
        DeniedBySystem,
        UnknownError,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct NetworkUsageStates
    {
        TriStates Roaming;
        TriStates Shared;
    };




    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IDataPlanUsage", b921492d-3b44-47ff-b361-be59e69ed1b0)]
    runtimeclass DataPlanUsage
    {
        UInt32 MegabytesUsed{ get; };
        Windows.Foundation.DateTime LastSyncTime{ get; };
    }





    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.IConnectionCost", bad7d829-3416-4b10-a202-bac0b075bdae)]
    runtimeclass ConnectionCost
    {
        Windows.Networking.Connectivity.NetworkCostType NetworkCostType{ get; };
        Boolean Roaming{ get; };
        Boolean OverDataLimit{ get; };
        Boolean ApproachingDataLimit{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Connectivity.IConnectionCost2", 8e113a05-e209-4549-bb25-5e0db691cb05)]
        {
            Boolean BackgroundDataUsageRestricted{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [interface_name("Windows.Networking.Connectivity.IDataPlanStatus", 977a8b8c-3885-40f3-8851-42cd2bd568bb)]
    runtimeclass DataPlanStatus
    {
        Windows.Networking.Connectivity.DataPlanUsage DataPlanUsage{ get; };
        Windows.Foundation.IReference <UInt32>  DataLimitInMegabytes{ get; };
        Windows.Foundation.IReference <UInt64>  InboundBitsPerSecond{ get; };
        Windows.Foundation.IReference <UInt64>  OutboundBitsPerSecond{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  NextBillingCycle{ get; };
        Windows.Foundation.IReference <UInt32>  MaxTransferSizeInMegabytes{ get; };
    }

    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.INetworkAdapter", 3b542e03-5388-496c-a8a3-affd39aec2e6)]
    runtimeclass NetworkAdapter
    {
        UInt64 OutboundMaxBitsPerSecond{ get; };
        UInt64 InboundMaxBitsPerSecond{ get; };
        UInt32 IanaInterfaceType{ get; };
        Windows.Networking.Connectivity.NetworkItem NetworkItem{ get; };
        Guid NetworkAdapterId{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Networking.Connectivity.ConnectionProfile>  GetConnectedProfileAsync();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [deprecated("DataUsage may be altered or unavailable for releases after Windows 8.1. Instead, use NetworkUsage.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
    [dualapipartition(0x6020000)]
    [interface_name("Windows.Networking.Connectivity.IDataUsage", c1431dd3-b146-4d39-b959-0c69b096c512)]
    runtimeclass DataUsage
    {
        [deprecated("IDataUsage may be altered or unavailable for releases after Windows 8.1. Instead, use INetworkUsage.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        UInt64 BytesSent{ get; };
        [deprecated("IDataUsage may be altered or unavailable for releases after Windows 8.1. Instead, use INetworkUsage.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        UInt64 BytesReceived{ get; };
    }

    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.INetworkSecuritySettings", 7ca07e8d-917b-4b5f-b84d-28f7a5ac5402)]
    runtimeclass NetworkSecuritySettings
    {
        Windows.Networking.Connectivity.NetworkAuthenticationType NetworkAuthenticationType{ get; };
        Windows.Networking.Connectivity.NetworkEncryptionType NetworkEncryptionType{ get; };
    }









    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Networking.Connectivity.WwanContract, 1)]
    [interface_name("Windows.Networking.Connectivity.IWwanConnectionProfileDetails", 0e4da8fe-835f-4df3-82fd-df556ebc09ef)]
    runtimeclass WwanConnectionProfileDetails
    {
        String HomeProviderId{ get; };
        String AccessPointName{ get; };
        Windows.Networking.Connectivity.WwanNetworkRegistrationState GetNetworkRegistrationState();
        Windows.Networking.Connectivity.WwanDataClass GetCurrentDataClass();

        [contract(Windows.Networking.Connectivity.WwanContract, 2)]
        [interface_name("Windows.Networking.Connectivity.IWwanConnectionProfileDetails2", 7a754ede-a1ed-48b2-8e92-b460033d52e2)]
        {
            Windows.Networking.Connectivity.WwanNetworkIPKind IPKind{ get; };
            Windows.Foundation.Collections.IVectorView <Guid>  PurposeGuids{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Networking.Connectivity.IWlanConnectionProfileDetails", 562098cb-b35a-4bf1-a884-b7557e88ff86)]
    runtimeclass WlanConnectionProfileDetails
    {
        String GetConnectedSsid();
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.INetworkUsage", 49da8fce-9985-4927-bf5b-072b5c65f8d9)]
    runtimeclass NetworkUsage
    {
        UInt64 BytesSent{ get; };
        UInt64 BytesReceived{ get; };
        Windows.Foundation.TimeSpan ConnectionDuration{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IConnectivityInterval", 4faa3fff-6746-4824-a964-eed8e87f8709)]
    runtimeclass ConnectivityInterval
    {
        Windows.Foundation.DateTime StartTime{ get; };
        Windows.Foundation.TimeSpan ConnectionDuration{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IAttributedNetworkUsage", f769b039-eca2-45eb-ade1-b0368b756c49)]
    runtimeclass AttributedNetworkUsage
    {
        UInt64 BytesSent{ get; };
        UInt64 BytesReceived{ get; };
        String AttributionId{ get; };
        String AttributionName{ get; };
        Windows.Storage.Streams.IRandomAccessStreamReference AttributionThumbnail{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 5)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IProviderNetworkUsage", 5ec69e04-7931-48c8-b8f3-46300fa42728)]
    runtimeclass ProviderNetworkUsage
    {
        UInt64 BytesSent{ get; };
        UInt64 BytesReceived{ get; };
        String ProviderId{ get; };
    }




    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.ILanIdentifierData", a74e83c3-d639-45be-a36a-c4e4aeaf6d9b)]
    runtimeclass LanIdentifierData
    {
        UInt32 Type{ get; };
        Windows.Foundation.Collections.IVectorView <UInt8>  Value{ get; };
    }

    [uuid(71ba143f-598e-49d0-84eb-8febaedcc195)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void NetworkStatusChangedEventHandler(Object sender);


    [marshaling_behavior(agile)]
    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.IConnectionProfile", 71ba143c-598e-49d0-84eb-8febaedcc195)]
    runtimeclass ConnectionProfile
    {
        String ProfileName{ get; };
        Windows.Networking.Connectivity.NetworkConnectivityLevel GetNetworkConnectivityLevel();
        Windows.Foundation.Collections.IVectorView <String>  GetNetworkNames();
        Windows.Networking.Connectivity.ConnectionCost GetConnectionCost();
        Windows.Networking.Connectivity.DataPlanStatus GetDataPlanStatus();
        Windows.Networking.Connectivity.NetworkAdapter NetworkAdapter{ get; };
        [deprecated("GetLocalUsage may be altered or unavailable for releases after Windows 8.1. Instead, use GetNetworkUsageAsync.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        [method_name("GetLocalUsage")] Windows.Networking.Connectivity.DataUsage GetLocalUsage(Windows.Foundation.DateTime StartTime, Windows.Foundation.DateTime EndTime);
        [deprecated("GetLocalUsage may be altered or unavailable for releases after Windows 8.1. Instead, use GetNetworkUsageAsync.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        [method_name("GetLocalUsagePerRoamingStates")] Windows.Networking.Connectivity.DataUsage GetLocalUsage(Windows.Foundation.DateTime StartTime, Windows.Foundation.DateTime EndTime, RoamingStates States);
        Windows.Networking.Connectivity.NetworkSecuritySettings NetworkSecuritySettings{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfile2", e2045145-4c9f-400c-9150-7ec7d6e2888a)]
        {
            Boolean IsWwanConnectionProfile{ get; };
            Boolean IsWlanConnectionProfile{ get; };
            Windows.Networking.Connectivity.WwanConnectionProfileDetails WwanConnectionProfileDetails{ get; };
            Windows.Networking.Connectivity.WlanConnectionProfileDetails WlanConnectionProfileDetails{ get; };
            Windows.Foundation.IReference <Guid>  ServiceProviderGuid{ get; };
            Windows.Foundation.IReference <UInt8>  GetSignalBars();
            Windows.Networking.Connectivity.DomainConnectivityLevel GetDomainConnectivityLevel();
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.NetworkUsage> >  GetNetworkUsageAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime, DataUsageGranularity granularity, NetworkUsageStates states);
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.ConnectivityInterval> >  GetConnectivityIntervalsAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime, NetworkUsageStates states);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfile3", 578c2528-4cd9-4161-8045-201cfd5b115c)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.AttributedNetworkUsage> >  GetAttributedNetworkUsageAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime, NetworkUsageStates states);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfile4", 7a2d42cd-81e0-4ae6-abed-ab9ca13eb714)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.ProviderNetworkUsage> >  GetProviderNetworkUsageAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime, NetworkUsageStates states);
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfile5", 85361ec7-9c73-4be0-8f14-578eec71ee0e)]
        {
            Boolean CanDelete{ get; };
            Windows.Foundation.IAsyncOperation <Windows.Networking.Connectivity.ConnectionProfileDeleteStatus>  TryDeleteAsync();
        }
    }

    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.ILanIdentifier", 48aa53aa-1108-4546-a6cb-9a74da4b7ba0)]
    runtimeclass LanIdentifier
    {
        Windows.Networking.Connectivity.LanIdentifierData InfrastructureId{ get; };
        Windows.Networking.Connectivity.LanIdentifierData PortId{ get; };
        Guid NetworkAdapterId{ get; };
    }

    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Networking.Connectivity.IProxyConfiguration", ef3a60b4-9004-4dd6-b7d8-b3e502f4aad0)]
    runtimeclass ProxyConfiguration
    {
        Windows.Foundation.Collections.IVectorView <Windows.Foundation.Uri>  ProxyUris{ get; };
        Boolean CanConnectDirectly{ get; };
    }





    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IConnectionProfileFilter", 204c7cc8-bd2d-4e8d-a4b3-455ec337388a)]
    [threading(both)]
    runtimeclass ConnectionProfileFilter
    {
        ConnectionProfileFilter();
        Boolean IsConnected{ set; };
        Boolean IsConnected{ get; };
        Boolean IsWwanConnectionProfile{ set; };
        Boolean IsWwanConnectionProfile{ get; };
        Boolean IsWlanConnectionProfile{ set; };
        Boolean IsWlanConnectionProfile{ get; };
        Windows.Networking.Connectivity.NetworkCostType NetworkCostType{ set; };
        Windows.Networking.Connectivity.NetworkCostType NetworkCostType{ get; };
        Windows.Foundation.IReference <Guid>  ServiceProviderGuid{ set; };
        Windows.Foundation.IReference <Guid>  ServiceProviderGuid{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfileFilter2", cd068ee1-c3fc-4fad-9ddc-593faa4b7885)]
        {
            Windows.Foundation.IReference <Boolean>  IsRoaming{ set; };
            Windows.Foundation.IReference <Boolean>  IsRoaming{ get; };
            Windows.Foundation.IReference <Boolean>  IsOverDataLimit{ set; };
            Windows.Foundation.IReference <Boolean>  IsOverDataLimit{ get; };
            Windows.Foundation.IReference <Boolean>  IsBackgroundDataUsageRestricted{ set; };
            Windows.Foundation.IReference <Boolean>  IsBackgroundDataUsageRestricted{ get; };
            Windows.Storage.Streams.IBuffer RawData{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Networking.Connectivity.IConnectionProfileFilter3", 0aaa09c0-5014-447c-8809-aee4cb0af94a)]
        {
            Windows.Foundation.IReference <Guid>  PurposeGuid{ set; };
            Windows.Foundation.IReference <Guid>  PurposeGuid{ get; };
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6020000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.INetworkItem", 01bc4d39-f5e0-4567-a28c-42080c831b2b)]
    runtimeclass NetworkItem
    {
        Guid NetworkId{ get; };
        Windows.Networking.Connectivity.NetworkTypes GetNetworkTypes();
    }






    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Networking.Connectivity.IRoutePolicyFactory", 36027933-a18e-4db5-a697-f58fa7364e44)]
    [interface_name("Windows.Networking.Connectivity.IRoutePolicy", 11abc4ac-0fc7-42e4-8742-569923b1ca11)]
    runtimeclass RoutePolicy
    {
        [method_name( "CreateRoutePolicy" )] RoutePolicy(ConnectionProfile connectionProfile, Windows.Networking.HostName hostName, Windows.Networking.DomainNameType type);
        Windows.Networking.Connectivity.ConnectionProfile ConnectionProfile{ get; };
        Windows.Networking.HostName HostName{ get; };
        Windows.Networking.DomainNameType HostNameType{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Networking.Connectivity.ICellularApnContext", 6fa529f4-effd-4542-9ab2-705bbf94943a)]
    runtimeclass CellularApnContext
    {
        CellularApnContext();
        String ProviderId{ get; };
        String ProviderId{ set; };
        String AccessPointName{ get; };
        String AccessPointName{ set; };
        String UserName{ get; };
        String UserName{ set; };
        String Password{ get; };
        String Password{ set; };
        Boolean IsCompressionEnabled{ get; };
        Boolean IsCompressionEnabled{ set; };
        Windows.Networking.Connectivity.CellularApnAuthenticationType AuthenticationType{ get; };
        Windows.Networking.Connectivity.CellularApnAuthenticationType AuthenticationType{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.Networking.Connectivity.ICellularApnContext2", 76b0eb1a-ac49-4350-b1e5-dc4763bc69c7)]
        {
            String ProfileName{ get; };
            String ProfileName{ set; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.IConnectionSession", ff905d4c-f83b-41b0-8a0c-1462d9c56b73)]
    runtimeclass ConnectionSession
        : Windows.Foundation.IClosable
    {
        Windows.Networking.Connectivity.ConnectionProfile ConnectionProfile{ get; };
    }



    [dualapipartition(0x6020000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Networking.Connectivity.INetworkInformationStatics2", 459ced14-2832-49b6-ba6e-e265f04786a8)]
    runtimeclass NetworkInformation
    {
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.ConnectionProfile> >  FindConnectionProfilesAsync(ConnectionProfileFilter pProfileFilter);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Networking.Connectivity.INetworkInformationStatics", 5074f851-950d-4165-9c15-365619481eea)]
        {
            static Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.ConnectionProfile>  GetConnectionProfiles();
            static Windows.Networking.Connectivity.ConnectionProfile GetInternetConnectionProfile();
            static Windows.Foundation.Collections.IVectorView <Windows.Networking.Connectivity.LanIdentifier>  GetLanIdentifiers();
            static Windows.Foundation.Collections.IVectorView <Windows.Networking.HostName>  GetHostNames();
            static Windows.Foundation.IAsyncOperation <Windows.Networking.Connectivity.ProxyConfiguration>  GetProxyConfigurationAsync(Windows.Foundation.Uri uri);
            static Windows.Foundation.Collections.IVectorView <Windows.Networking.EndpointPair>  GetSortedEndpointPairs(Windows.Foundation.Collections.IIterable <Windows.Networking.EndpointPair>  destinationList, Windows.Networking.HostNameSortOptions sortOptions);
            static event Windows.Networking.Connectivity.NetworkStatusChangedEventHandler NetworkStatusChanged;
        }
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Networking.Connectivity.IConnectivityManagerStatics", 5120d4b1-4fb1-48b0-afc9-42e0092a8164)]
    runtimeclass ConnectivityManager
    {
        static Windows.Foundation.IAsyncOperation <Windows.Networking.Connectivity.ConnectionSession>  AcquireConnectionAsync(CellularApnContext cellularApnContext);
        static void AddHttpRoutePolicy(RoutePolicy routePolicy);
        static void RemoveHttpRoutePolicy(RoutePolicy routePolicy);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Networking.Connectivity.INetworkStateChangeEventDetails", 1f0cf333-d7a6-44dd-a4e9-687c476b903d)]
    runtimeclass NetworkStateChangeEventDetails
    {
        Boolean HasNewInternetConnectionProfile{ get; };
        Boolean HasNewConnectionCost{ get; };
        Boolean HasNewNetworkConnectivityLevel{ get; };
        Boolean HasNewDomainConnectivityLevel{ get; };
        Boolean HasNewHostNameList{ get; };
        Boolean HasNewWwanRegistrationState{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Networking.Connectivity.INetworkStateChangeEventDetails2", d643c0e8-30d3-4f6a-ad47-6a1873ceb3c1)]
        {
            Boolean HasNewTetheringOperationalState{ get; };
            Boolean HasNewTetheringClientCount{ get; };
        }
    }

}
