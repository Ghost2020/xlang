








namespace Windows.ApplicationModel.Store.Preview.InstallControl
{
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum GetEntitlementStatus
    {
        Succeeded,
        NoStoreAccount,
        NetworkError,
        ServerError,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppInstallState
    {
        Pending,
        Starting,
        AcquiringLicense,
        Downloading,
        RestoringData,
        Installing,
        Completed,
        Canceled,
        Paused,
        Error,
        PausedLowBattery,
        PausedWiFiRecommended,
        PausedWiFiRequired,
        ReadyToDownload,
    };




    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus", 936dccfa-2450-4126-88b1-6127a644dd5c)]
    runtimeclass AppInstallStatus
    {
        Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallState InstallState{ get; };
        UInt64 DownloadSizeInBytes{ get; };
        UInt64 BytesDownloaded{ get; };
        Double PercentComplete{ get; };
        HRESULT ErrorCode{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus2", 96e7818a-5e92-4aa9-8edc-58fed4b87e00)]
        {
            Windows.System.User User{ get; };
            Boolean ReadyForLaunch{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallStatus3", cb880c56-837b-4b4c-9ebb-6d44a0a96307)]
        {
            Boolean IsStaged{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppInstallType
    {
        Install,
        Update,
        Repair,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem", 49d3dfab-168a-4cbf-a93a-9e448c82737d)]
    runtimeclass AppInstallItem
    {
        String ProductId{ get; };
        String PackageFamilyName{ get; };
        Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallType InstallType{ get; };
        Boolean IsUserInitiated{ get; };
        Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus GetCurrentStatus();
        void Cancel();
        void Pause();
        void Restart();
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem, Object>  Completed;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem, Object>  StatusChanged;

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem2", d3972af8-40c0-4fd7-aa6c-0aa13ca6188c)]
        {
            [method_name("CancelWithTelemetry")] void Cancel(String correlationVector);
            [method_name("PauseWithTelemetry")] void Pause(String correlationVector);
            [method_name("RestartWithTelemetry")] void Restart(String correlationVector);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem3", 6f3dc998-dd47-433c-9234-560172d67a45)]
        {
            Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  Children{ get; };
            Boolean ItemOperationsMightAffectOtherItems{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem4", c2d1ce12-71ff-4fc8-b540-453d4b37e1d1)]
        {
            Boolean LaunchAfterInstall{ get; };
            Boolean LaunchAfterInstall{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallItem5", 5510e7cc-4076-4a0b-9472-c21d9d380e55)]
        {
            Boolean PinToDesktopAfterInstall{ get; };
            Boolean PinToDesktopAfterInstall{ set; };
            Boolean PinToStartAfterInstall{ get; };
            Boolean PinToStartAfterInstall{ set; };
            Boolean PinToTaskbarAfterInstall{ get; };
            Boolean PinToTaskbarAfterInstall{ set; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode CompletedInstallToastNotificationMode{ get; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode CompletedInstallToastNotificationMode{ set; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode InstallInProgressToastNotificationMode{ get; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode InstallInProgressToastNotificationMode{ set; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum AppInstallationToastNotificationMode
    {
        Default,
        Toast,
        ToastWithoutPopup,
        NoToast,
    };






    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IGetEntitlementResult", 74fc843f-1a9e-4609-8e4d-819086d08a3d)]
    runtimeclass GetEntitlementResult
    {
        Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementStatus Status{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManagerItemEventArgs", bc505743-4674-4dd1-957e-c25682086a14)]
    runtimeclass AppInstallManagerItemEventArgs
    {
        Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem Item{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AutoUpdateSetting
    {
        Disabled,
        Enabled,
        DisabledByPolicy,
        EnabledByPolicy,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions", 26f0b02f-c2f3-4aea-af8c-6308dd9db85f)]
    [threading(both)]
    runtimeclass AppUpdateOptions
    {
        AppUpdateOptions();
        String CatalogId{ get; };
        String CatalogId{ set; };
        Boolean AllowForcedAppRestart{ get; };
        Boolean AllowForcedAppRestart{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppUpdateOptions2", f4646e08-ed26-4bf9-9679-48f628e53df8)]
        {
            Boolean AutomaticallyDownloadAndInstallUpdateIfFound{ get; };
            Boolean AutomaticallyDownloadAndInstallUpdateIfFound{ set; };
        }
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions", c9808300-1cb8-4eb6-8c9f-6a30c64a5b51)]
    [threading(both)]
    runtimeclass AppInstallOptions
    {
        AppInstallOptions();
        String CatalogId{ get; };
        String CatalogId{ set; };
        Boolean ForceUseOfNonRemovableStorage{ get; };
        Boolean ForceUseOfNonRemovableStorage{ set; };
        Boolean AllowForcedAppRestart{ get; };
        Boolean AllowForcedAppRestart{ set; };
        Boolean Repair{ get; };
        Boolean Repair{ set; };
        Windows.Management.Deployment.PackageVolume TargetVolume{ get; };
        Windows.Management.Deployment.PackageVolume TargetVolume{ set; };
        Boolean LaunchAfterInstall{ get; };
        Boolean LaunchAfterInstall{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallOptions2", 8a04c0d7-c94b-425e-95b4-bf27faeaee89)]
        {
            Boolean PinToDesktopAfterInstall{ get; };
            Boolean PinToDesktopAfterInstall{ set; };
            Boolean PinToStartAfterInstall{ get; };
            Boolean PinToStartAfterInstall{ set; };
            Boolean PinToTaskbarAfterInstall{ get; };
            Boolean PinToTaskbarAfterInstall{ set; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode CompletedInstallToastNotificationMode{ get; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode CompletedInstallToastNotificationMode{ set; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode InstallInProgressToastNotificationMode{ get; };
            Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallationToastNotificationMode InstallInProgressToastNotificationMode{ set; };
            Boolean InstallForAllUsers{ get; };
            Boolean InstallForAllUsers{ set; };
            Boolean StageButDoNotInstall{ get; };
            Boolean StageButDoNotInstall{ set; };
            String CampaignId{ get; };
            String CampaignId{ set; };
            String ExtendedCampaignId{ get; };
            String ExtendedCampaignId{ set; };
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager", 9353e170-8441-4b45-bd72-7c2fa925beee)]
    runtimeclass AppInstallManager
    {
        AppInstallManager();
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  AppInstallItems{ get; };
        void Cancel(String productId);
        void Pause(String productId);
        void Restart(String productId);
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager, Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>  ItemCompleted;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager, Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManagerItemEventArgs>  ItemStatusChanged;
        Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting AutoUpdateSetting{ get; };
        Windows.ApplicationModel.Store.Preview.InstallControl.AutoUpdateSetting AutoUpdateSetting{ set; };
        String AcquisitionIdentity{ get; };
        String AcquisitionIdentity{ set; };
        Windows.Foundation.IAsyncOperation <Boolean>  GetIsApplicableAsync(String productId, String skuId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartAppInstallAsync(String productId, String skuId, Boolean repair, Boolean forceUseOfNonRemovableStorage);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  UpdateAppByPackageFamilyNameAsync(String packageFamilyName);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(String productId, String skuId);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesAsync();
        Windows.Foundation.IAsyncOperation <Boolean>  IsStoreBlockedByPolicyAsync(String storeClientName, String storeClientPublisher);
        Windows.Foundation.IAsyncOperation <Boolean>  GetIsAppAllowedToInstallAsync(String productId);

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager2", 16937851-ed37-480d-8314-52e27c03f04a)]
        {
            [method_name("StartAppInstallWithTelemetryAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartAppInstallAsync(String productId, String skuId, Boolean repair, Boolean forceUseOfNonRemovableStorage, String catalogId, String bundleId, String correlationVector);
            [method_name("UpdateAppByPackageFamilyNameWithTelemetryAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  UpdateAppByPackageFamilyNameAsync(String packageFamilyName, String correlationVector);
            [method_name("SearchForUpdatesWithTelemetryAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(String productId, String skuId, String catalogId, String correlationVector);
            [method_name("SearchForAllUpdatesWithTelemetryAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesAsync(String correlationVector);
            [method_name("GetIsAppAllowedToInstallWithTelemetryAsync")] Windows.Foundation.IAsyncOperation <Boolean>  GetIsAppAllowedToInstallAsync(String productId, String skuId, String catalogId, String correlationVector);
            [method_name("CancelWithTelemetry")] void Cancel(String productId, String correlationVector);
            [method_name("PauseWithTelemetry")] void Pause(String productId, String correlationVector);
            [method_name("RestartWithTelemetry")] void Restart(String productId, String correlationVector);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager3", 95b24b17-e96a-4d0e-84e1-c8cb417a0178)]
        {
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallAsync(String productId, String catalogId, String flightId, String clientId, Boolean repair, Boolean forceUseOfNonRemovableStorage, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallForUserAsync(Windows.System.User user, String productId, String catalogId, String flightId, String clientId, Boolean repair, Boolean forceUseOfNonRemovableStorage, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  UpdateAppByPackageFamilyNameForUserAsync(Windows.System.User user, String packageFamilyName, String correlationVector);
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesForUserAsync(Windows.System.User user, String productId, String skuId, String catalogId, String correlationVector);
            Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesForUserAsync(Windows.System.User user, String correlationVector);
            Windows.Foundation.IAsyncOperation <Boolean>  GetIsAppAllowedToInstallForUserAsync(Windows.System.User user, String productId, String skuId, String catalogId, String correlationVector);
            Windows.Foundation.IAsyncOperation <Boolean>  GetIsApplicableForUserAsync(Windows.System.User user, String productId, String skuId);
            void MoveToFrontOfDownloadQueue(String productId, String correlationVector);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager4", 260a2a16-5a9e-4ebd-b944-f2ba75c31159)]
        {
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult>  GetFreeUserEntitlementAsync(String storeId, String campaignId, String correlationVector);
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult>  GetFreeUserEntitlementForUserAsync(Windows.System.User user, String storeId, String campaignId, String correlationVector);
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.GetEntitlementResult>  GetFreeDeviceEntitlementAsync(String storeId, String campaignId, String correlationVector);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager5", 3cd7be4c-1be9-4f7f-b675-aa1d64a529b2)]
        {
            Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  AppInstallItemsWithGroupSupport{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager6", c9e7d408-f27a-4471-b2f4-e76efcbebcca)]
        {
            [method_name("SearchForAllUpdatesWithUpdateOptionsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesAsync(String correlationVector, String clientId, AppUpdateOptions updateOptions);
            [method_name("SearchForAllUpdatesWithUpdateOptionsForUserAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesForUserAsync(Windows.System.User user, String correlationVector, String clientId, AppUpdateOptions updateOptions);
            [method_name("SearchForUpdatesWithUpdateOptionsAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(String productId, String skuId, String correlationVector, String clientId, AppUpdateOptions updateOptions);
            [method_name("SearchForUpdatesWithUpdateOptionsForUserAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesForUserAsync(Windows.System.User user, String productId, String skuId, String correlationVector, String clientId, AppUpdateOptions updateOptions);
            [method_name("StartProductInstallWithOptionsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallAsync(String productId, String flightId, String clientId, String correlationVector, AppInstallOptions installOptions);
            [method_name("StartProductInstallWithOptionsForUserAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallForUserAsync(Windows.System.User user, String productId, String flightId, String clientId, String correlationVector, AppInstallOptions installOptions);
            Windows.Foundation.IAsyncOperation <Boolean>  GetIsPackageIdentityAllowedToInstallAsync(String correlationVector, String packageIdentityName, String publisherCertificateName);
            Windows.Foundation.IAsyncOperation <Boolean>  GetIsPackageIdentityAllowedToInstallForUserAsync(Windows.System.User user, String correlationVector, String packageIdentityName, String publisherCertificateName);
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.IAppInstallManager7", a5ee7b30-d5e4-49a3-9853-3db03203321d)]
        {
            Boolean CanInstallForAllUsers{ get; };
        }
    }







}
