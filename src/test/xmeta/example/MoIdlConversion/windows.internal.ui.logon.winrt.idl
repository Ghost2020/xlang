









namespace Windows.Internal.UI.Logon
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

}
namespace Windows.Internal.UI.Logon.CredProvData
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialFieldKind
    {
        Invalid,
        StaticText,
        CommandLink,
        EditText,
        TileImage,
        CheckBox,
        ComboBox,
        SubmitButton,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialFieldChangeKind
    {
        State,
        InteractiveState,
        SetString,
        SetCheckbox,
        SetBitmap,
        SetComboBoxSelected,
        PasswordReveal,
        InputType,
        SubmitButtonAdjacentID,
        MaxLength,
        AccessibilityText,
        IsAccessibilityViewRaw,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(ddc7731f-aaf1-4bd4-b20a-d125a3bc23d8)]
    interface ICredentialField
    {
        String Label{ get; };
        Boolean IsVisibleInSelectedTile{ get; };
        Boolean IsVisibleInDeselectedTile{ get; };
        Boolean IsHidden{ get; };
        Boolean IsInteractiveStateFocused{ get; };
        Boolean IsInteractiveStateFocused{ set; };
        Boolean IsInteractiveStateDisabled{ get; };
        Boolean IsInteractiveStateReadOnly{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialFieldKind Kind{ get; };
        UInt32 ID{ get; };
        String AccessibilityText{ get; };
        Boolean IsAccessibilityViewRaw{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.ICredentialField, Windows.Internal.UI.Logon.CredProvData.CredentialFieldChangeKind>  FieldChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.ICredentialField, Object>  ShuttingDown;
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialTextSize
    {
        Large,
        Small,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass TextField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredentialTextField", 59c3c31e-3f86-4fa5-9c7b-dc7b542e2a70)]
        {
            String Content{ get; };
            Windows.Internal.UI.Logon.CredProvData.CredentialTextSize TextSize{ get; };
        }
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass CommandLinkField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.ICommandLinkField", 1a522c5f-5032-4c4e-8563-20c524dde117)]
        {
            String Content{ get; };
            Boolean IsStyledAsButton{ get; };
            void Invoke();
        }
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass EditField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredentialEditField", 48a0b4dd-74a6-4b03-9850-672ff62135fd)]
        {
            String Content{ get; };
            String Content{ set; };
            Boolean IsPasswordRevealEnabled{ get; };
            Boolean IsPasswordField{ get; };
            Int32 MaxPasswordLength{ get; };
            Boolean IsNumbersOnly{ get; };
            Boolean IsEmailAddress{ get; };
            Boolean IsEnglishOnly{ get; };
            Boolean IsLogonUserName{ get; };
        }
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass ImageField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredentialImageField", 8ef3b825-a92c-416e-820d-ed0fcf8d2296)]
        {
            Windows.Storage.Streams.IRandomAccessStream BitmapStream{ get; };
            Boolean IsLogoImageHidden{ get; };
        }
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(5cad4c8f-6f35-4a41-ba52-bdf26571c77e)]
    interface ICheckBoxField requires Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {
        String BoxLabel{ get; };
        Boolean Checked{ get; };
        Boolean Checked{ set; };
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass CheckBoxField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
        , Windows.Internal.UI.Logon.CredProvData.ICheckBoxField
    {
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass ComboBoxField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.IComboBoxField", ff3e0ba7-f55b-40db-91d9-58626f36aead)]
        {
            Windows.Foundation.Collections.IObservableVector <String>  Items{ get; };
            Int32 SelectedIndex{ get; };
            Int32 SelectedIndex{ set; };
        }
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass SubmitButtonField
        : [default]Windows.Internal.UI.Logon.CredProvData.ICredentialField
    {

        [interface_name("Windows.Internal.UI.Logon.CredProvData.ISubmitButtonField", 2ce19468-de1a-4cb5-9a6f-d09c8146f35a)]
        {
            UInt32 AdjacentID{ get; };
        }
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum SerializationResponse
    {
        NoCredentialIncomplete,
        NoCredentialComplete,
        ReturnCredentialComplete,
        ReturnNoCredentialComplete,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialProviderStatusIcon
    {
        None,
        Error,
        Warning,
        Success,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredentialSerialization", 23477477-1187-453b-b15f-1f9ff7b438b6)]
    runtimeclass CredentialSerialization
    {
        CredentialSerialization();
        UInt32 CredentialId{ get; };
        Windows.Internal.UI.Logon.CredProvData.SerializationResponse SerializationResponse{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialProviderStatusIcon SerializationIcon{ get; };
        String StatusMessage{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum ConnectionStatus
    {
        NotConnecting,
        Connecting,
        Connected,
        ConnectionFailed,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ISerializationProgressInfo", 3687174c-6f03-4966-907c-7250208efbef)]
    runtimeclass SerializationProgressInfo
    {
        Windows.Internal.UI.Logon.CredProvData.ConnectionStatus Status{ get; };
        String StatusMessage{ get; };
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.IReportResultInfo", 59788b9d-caf4-431f-8f99-f086382fb472)]
    runtimeclass ReportResultInfo
    {
        ReportResultInfo();
        Guid ProviderCLSID{ get; };
        Int32 StatusCode{ get; };
        Int32 SubstatusCode{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialProviderStatusIcon StatusIcon{ get; };
        String StatusMessage{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum TileStreamType
    {
        Image,
        Video,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum UserTileImageSize
    {
        Large,
        Small,
        ExtraSmall,
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.CredProvData.IUserTileImageFactory", fc754bf5-1446-419d-824a-ae3f043644c4)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.IUserTileImage", fd701978-db4f-47bc-8a30-0249e7565d45)]
    runtimeclass UserTileImage
    {
        [method_name( "CreateUserTileImage" )] UserTileImage(Windows.Storage.Streams.IRandomAccessStream stream, String path, TileStreamType type, UserTileImageSize size);
        UserTileImage();
        Windows.Storage.Streams.IRandomAccessStream TileStream{ get; };
        Windows.Internal.UI.Logon.CredProvData.TileStreamType TileStreamType{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImageSize Size{ get; };
        String TilePath{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialUIMode
    {
        ComplexLayout,
        BasicPin,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialTileChangeKind
    {
        Visibility,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.IUser", 837c3232-b75b-4f12-bf4c-d85f57d3882f)]
    runtimeclass User
        : Windows.Internal.UI.Logon.CredProvData.ICredentialGroup
    {
        Boolean IsLoggedIn{ get; };
        Boolean IsBuiltInGuest{ get; };
        String DisplayName{ get; };
        String LogonStatus{ get; };
        String EmailAddress{ get; };
        String QualifiedUsername{ get; };
        String Sid{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImage LargeUserTileImage{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImage SmallUserTileImage{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.User, Object>  ImageChanged;
        Boolean ShouldShowEmail{ get; };
        Boolean ShouldShowDomainName{ get; };
        Boolean IsLocalNoPasswordUser{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredential", e818d511-9182-420e-b02f-0ca0c728d047)]
    runtimeclass Credential
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.UI.Logon.CredProvData.ICredentialField>  Fields{ get; };
        Windows.Internal.UI.Logon.CredProvData.ICredentialField LogoImageField{ get; };
        String LogoLabel{ get; };
        Windows.Internal.UI.Logon.CredProvData.SubmitButtonField SubmitButton{ get; };
        Boolean IsPicturePassword{ get; };
        Guid ProviderId{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialUIMode UIMode{ get; };
        Boolean IsSelected{ get; };
        Boolean IsTileVisible{ get; };
        Windows.Internal.UI.Logon.CredProvData.User User{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.Credential, Windows.Internal.UI.Logon.CredProvData.CredentialTileChangeKind>  TileChanged;
        Boolean HideUserTileImage{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImage LargeUserTileImage{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImage SmallUserTileImage{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserTileImage ExtraSmallUserTileImage{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.Credential, Object>  UserImageChanged;
        String WebDialogUrl{ get; };
        Boolean IsWebDialogVisible{ get; };
        Boolean IsWebDialogVisible{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.Credential, Object>  WebDialogVisibilityChanged;
        void Submit();
        void PicturePasswordSubmit(Object context);
        void CancelSubmission();
        void RefreshSelection();
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.SerializationProgressInfo, Object>  SerializationProgressChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.Credential, Windows.Internal.UI.Logon.CredProvData.CredentialUIMode>  UIModeChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.Credential, Object>  SelectionStateChanged;
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(ba6e72f5-f47d-4aad-8bb6-1bba3a750e9f)]
    interface ICredentialGroup
    {
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.Credential>  Credentials{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedCredential{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedCredential{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.ICredentialGroup, Windows.Internal.UI.Logon.CredProvData.Credential>  SelectedCredentialChanged;
        void RefreshSelection();
        Boolean IsAutoSubmitPending{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.ICredentialGroup, Object>  IsAutoSubmitPendingChanged;
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(3306dd9b-5bc1-400c-921f-e5129def1a25)]
    interface IUserTileImageProvider
    {
        Windows.Internal.UI.Logon.CredProvData.UserTileImage GetLargeImage(String userSid);
        Windows.Internal.UI.Logon.CredProvData.UserTileImage GetSmallImage(String userSid);
        Windows.Internal.UI.Logon.CredProvData.UserTileImage GetExtraSmallImage(String userSid);
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.IUserTileImageProvider, String>  ImageChanged;
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredentialMethodKind
    {
        Unknown,
        Web,
        NFC,
        USB,
        Bluetooth,
        Fingerprint,
        Face,
        PIN,
        Password,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(92a498f9-2c97-42ce-865e-c04e1485f88a)]
    interface ISupportedCredentialMethods
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.UI.Logon.CredProvData.CredentialMethodKind>  SupportedCredentialMethods{ get; };
        String GetDisplayNameFromMethodKind(CredentialMethodKind methodKind);
        Boolean EnumerateEmptyCredentialMethods{ get; };
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredentialBucket", 57a933d0-4a44-4911-b34f-ac69dd91f546)]
    runtimeclass CredentialBucket
        : Windows.Internal.UI.Logon.CredProvData.ICredentialGroup
    {
        String DisplayName{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialMethodKind CredentialMethod{ get; };
    }

}
namespace Windows.Internal.UI.Logon.CredProvData.Internal
{
    [uuid(3ec12094-4952-4dc9-b9c7-5e14d89720db)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ICredentialGroupWithVisibility
    {
        Windows.Internal.UI.Logon.CredProvData.ICredentialGroup GroupData{ get; };
        UInt32 VisibleIndex{ get; };
        UInt32 VisibleIndex{ set; };
        Boolean IsVisible{ get; };
    };

}
namespace Windows.Internal.UI.Logon.CredProvData
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredProvScenario
    {
        Logon,
        Unlock,
        ChangePassword,
        CredUI,
    };

    [flags]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum SupportedFeatureFlags
    {
        Default,
        WebDialog,
    };

    [uuid(cd78c9ff-2bbe-4f77-a1aa-2a196a7e3e30)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IDispatchEvent
    {
        void Dispatch();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(edc8d4ae-643f-4ebf-b869-b1463e38b829)]
    interface IUIThreadEventDispatcher
    {
        void DispatchEvent(IDispatchEvent dispatchEvent);
    };

    [uuid(9a5f2170-ef01-4fe4-83c1-141ae408d40b)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ICredProvDefaultSelector
    {
        Boolean UseLastLoggedOnProvider{ get; };
        Windows.Foundation.Collections.IVectorView <Guid>  PreferredProviders{ get; };
        Windows.Foundation.Collections.IVectorView <Guid>  OtherUserPreferredProviders{ get; };
        Windows.Foundation.Collections.IVectorView <Guid>  ExcludedProviders{ get; };
        String DefaultUserSid{ get; };
        Boolean AllowAutoSubmitOnSelection(User user);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(ad2ec4d6-3761-4cbf-983d-b0c21d829ad9)]
    interface IViewGeneratedCredentialFieldProvider
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.UI.Logon.CredProvData.ICredentialField>  QueryViewGeneratedFields(UInt32 baseIndex);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum UserAccountKind
    {
        Unknown,
        Local,
        Domain,
        Connected,
        CloudDomain,
    };

    [uuid(683ef64c-d0ca-4a52-a299-1a22c22b26d3)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ITelemetryDataProvider
    {
        Windows.Internal.UI.Logon.CredProvData.UserAccountKind GetUserAccountKind(String userSid);
        UInt32 CurrentLogonUIRequestReason{ get; };
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum SelectionMode
    {
        UserOnly,
        UserAndV1Aggregate,
        FlatCredentials,
        SingleSelectedProvider,
        CredentialMethod,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum BioFeedbackState
    {
        None,
        Error,
        PowerOn,
        Searching,
        Authenticated,
        TooFar,
        TooClose,
        MessageOnly,
        USB,
        NFC,
        BTLE,
        Progress,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum DisplayStateFlags
    {
        None,
        DisplayOn,
        DisplayDim,
        LockScreenVisible = 4,
        LockScreenManipulated = 8,
        AppOnLockScreen = 16,
        UserSwitching = 32,
        SessionLocked = 64,
        AcceptingCreds = 128,
        LidClosed = 256,
        DelayLocked = 512,
        LoggedOut = 1024,
        ResumeFromHibernateOrScreenSaver = 2048,
        SessionShuttingDown = 4096,
        MediaControlsVisible = 8192,
        PhoneUXVisible = 16384,
        NotificationUXVisible = 32768,
        UserPresenceDetected = 65536,
        UserSelectionRequired = 131072,
        UserSelectionVisible = 262144,
        DeviceSuspended = 524288,
        ScreenSaverActive = 1048576,
        FullScreenMessageActive = 2097152,
        AutomaticLockOnBoot = 4194304,
        HeadMountedDisplay = 8388608,
    };

    [uuid(71c68476-deeb-4263-8b73-453d7a526888)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IDisplayStateProvider
    {
        Windows.Internal.UI.Logon.CredProvData.DisplayStateFlags DisplayState{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.IDisplayStateProvider, Windows.Internal.UI.Logon.CredProvData.DisplayStateFlags>  DisplayStateChanged;
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum OptionalDependencyKind
    {
        AutoLogonManager,
        WindowContainer,
        DefaultSelector,
        DisplayState,
        ViewGeneratedCredentialField,
        TelemetryData,
        UserTileImage,
        SupportedCredentialMethods,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(ef207a42-36ca-4e16-81c0-116cccc45deb)]
    interface IOptionalDependencyProvider
    {
        Object GetOptionalDependency(OptionalDependencyKind kind);
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ISignInOrUnlockResult", 65365d50-dc23-5d3e-9cf2-9037c4497b94)]
    runtimeclass SignInOrUnlockResult
    {
        Windows.System.User User{ get; };
        HRESULT Status{ get; };
        HRESULT SubStatus{ get; };
        String AccountName{ get; };
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.CredProvData.ICredProvDataModel", 836f7b8d-185d-4951-959e-a011ec8e7598)]
    runtimeclass CredProvDataModel
    {
        CredProvDataModel();

        [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
        [constructor_name("Windows.Internal.UI.Logon.CredProvData.ICredProvDataModelFactory", 4b869909-e780-424e-ae03-210fe46f4527)]
        {
            [method_name( "CreateCredProvDataModel" )] CredProvDataModel(SelectionMode selectionMode, IUIThreadEventDispatcher dispatcher, IOptionalDependencyProvider optionalDependencyProvider);
        }
        Windows.Foundation.IAsyncAction InitializeAsync(CredProvScenario scenario, SupportedFeatureFlags supportedFeatureFlags, UInt16 langId, String sessionContext);
        Windows.Foundation.IAsyncOperation <Boolean>  InitializeAsyncAndReportAutologon(CredProvScenario scenario, SupportedFeatureFlags supportedFeatureFlags, UInt16 langId, String sessionContext);
        Windows.Foundation.IAsyncAction InitializeWithContextAsync(CredProvScenario scenario, UInt16 langId, UInt32 flags, Boolean hideUserTileImage, Object serialization, Guid providerGuid, Windows.Storage.Streams.IBuffer context);
        Windows.Foundation.IAsyncAction InitializeForFingerprintOnlyAsync(UInt16 langId);
        Boolean IsPLAPMode{ get; };
        Boolean IsPLAPMode{ set; };
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.User>  Users{ get; };
        Windows.Internal.UI.Logon.CredProvData.User SelectedUser{ get; };
        Windows.Internal.UI.Logon.CredProvData.User SelectedUser{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.User>  SelectedUserChanged;
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.Credential>  PLAPCredentials{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedPLAPCredential{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedPLAPCredential{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.Credential>  SelectedPLAPCredentialChanged;
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.Credential>  V1Credentials{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedV1Credential{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedV1Credential{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.Credential>  SelectedV1CredentialChanged;
        Windows.Foundation.Collections.IObservableVector <Object>  UsersAndV1Credentials{ get; };
        Object SelectedUserOrV1Credential{ get; };
        Object SelectedUserOrV1Credential{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Object>  SelectedUserOrV1CredentialChanged;
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.Credential>  FlatCredentials{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedFlatCredential{ get; };
        Windows.Internal.UI.Logon.CredProvData.Credential SelectedFlatCredential{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.Credential>  SelectedFlatCredentialChanged;
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.CredProvData.CredentialBucket>  CredentialMethodBuckets{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialBucket SelectedCredentialMethodBucket{ get; };
        Windows.Internal.UI.Logon.CredProvData.CredentialBucket SelectedCredentialMethodBucket{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.CredentialBucket>  SelectedCredentialMethodBucketChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Object>  LockScreenDismissRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Object>  OptionExpansionRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Object>  SignInUIRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.CredentialSerialization>  SerializationComplete;
        Windows.Internal.UI.Logon.CredProvData.BioFeedbackState CurrentBioFeedbackState{ get; };
        String BioFeedbackLabel{ get; };
        String BioFeedbackAccessibilityText{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.CredProvData.CredProvDataModel, Windows.Internal.UI.Logon.CredProvData.BioFeedbackState>  BioFeedbackStateChange;
        [method_name("ReportResultAsync")] Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.CredProvData.ReportResultInfo>  ReportResultAsync(Int32 ntsStatus, Int32 ntsSubstatus, String userSid);
        [method_name("ReportResultWithNameAsync")] Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.CredProvData.ReportResultInfo>  ReportResultAsync(Int32 ntsStatus, Int32 ntsSubstatus, String userSid, String samCompatibleUserName, String displayName);
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.CredProvData.SignInOrUnlockResult>  SignInOrUnlockUserWithUserManagerAsync(CredentialSerialization serialization);
        void SetUserSuggestion(String upn);
        void ClearState();
        Windows.Foundation.IAsyncAction ResetAsync(CredProvScenario scenario, SupportedFeatureFlags supportedFeatureFlags, String sessionContext);
        void ResetSelection();
        void Shutdown();
        void DisconnectCredentials();
    }


}
namespace Windows.Internal.UI.Logon.Controller
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum LogonUIShutdownChoice
    {
        None,
        TurnOff,
        Restart,
        StandBy = 4,
        AdvStandBy = 8,
        Hibernate = 16,
        EmergencyRestart = 32,
        ForceCurrentSession = 64,
        ForceOtherSessions = 128,
        InstallUpdates = 256,
        HybridMode = 512,
        BootOptions = 1024,
        Disconnect = 2048,
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.Controller.IRequestCredentialsDataFactory", 49931e22-78c2-41af-83de-4e02876bdb3c)]
    [interface_name("Windows.Internal.UI.Logon.Controller.IRequestCredentialsData", 3b1f419e-0b45-42b1-a18c-3a2a8e1715db)]
    runtimeclass RequestCredentialsData
    {
        [method_name( "CreateRequestCredentialsData" )] RequestCredentialsData(Windows.Internal.UI.Logon.CredProvData.CredentialSerialization serialization, LogonUIShutdownChoice shutdownChoice, String webDialogUri);
        RequestCredentialsData();
        Windows.Internal.UI.Logon.CredProvData.CredentialSerialization Credential{ get; };
        Windows.Internal.UI.Logon.Controller.LogonUIShutdownChoice ShutdownChoice{ get; };
        String WebDialogUri{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonUIRequestReason
    {
        LogonUILogon,
        LogonUIUnlock,
        LogonUIChange,
        LogonUISessionRecovery,
        LogonUIAlternate,
        CredUI,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum LogonUIFlags
    {
        None,
        SecureGestureDisabled,
        PasswordExpired,
        AllowDirectUserSwitching = 4,
        WebDialogSupported = 8,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonUICredProvResponse
    {
        LogonUIResponseDefault,
        LogonUIResponseRetry,
        LogonUIResponseAbort,
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.Controller.IReportCredentialsDataFactory", 2e6a5994-4adf-4e53-80ea-106294d15f73)]
    [interface_name("Windows.Internal.UI.Logon.Controller.IReportCredentialsData", ba2419f9-f552-4e37-9145-3c1673104057)]
    runtimeclass ReportCredentialsData
    {
        [method_name( "CreateReportCredentialsData" )] ReportCredentialsData(LogonUICredProvResponse response, String message);
        ReportCredentialsData();
        String Message{ get; };
        Windows.Internal.UI.Logon.Controller.LogonUICredProvResponse Response{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonMessageMode
    {
        None,
        Message,
        LogonError,
        NoCredentialNotFinished,
        NoCredentialFinished,
        EmergencyRestart,
        TerminalServiceDisconnectOptions,
        CredentialConnecting,
        SequentialLogonPrompt,
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.Controller.IMessageDisplayResultFactory", a95d3ab1-c7b8-43a3-935d-26f432e72e0f)]
    [interface_name("Windows.Internal.UI.Logon.Controller.IMessageDisplayResult", 63ace640-87c6-4bda-ac7c-793c6e16cce1)]
    runtimeclass MessageDisplayResult
    {
        [method_name( "CreateMessageDisplayResult" )] MessageDisplayResult(UInt32 resultCode);
        MessageDisplayResult();
        UInt32 ResultCode{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonUIState
    {
        Start,
        Welcome,
        Logon,
        Authenticate,
        LoggingOn,
        LoggingOff,
        StandingBy,
        ShuttingDown,
        Restarting,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(00915c44-56ec-46c4-a0bd-154182b2a893)]
    interface ILogonUIStateInfo
    {
        Windows.Internal.UI.Logon.Controller.LogonUIState CurrentLogonUIState{ get; };
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonUIInformation
    {
        None,
        HiberbootSessionStart,
        HiberbootSessionResume,
        LogonAnimation,
        SoundPlay,
        FirstLogonAnimationStart,
        FirstLogonAnimationStop,
        Locking,
        ZeroDayPackageReboot,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonErrorRedirectorResponse
    {
        Invalid,
        NotHandled,
        HandledShowLocally,
        HandledDoNotShowLocally,
        HandledDoNotShowLocallyStartOver,
    };

    [uuid(5ccc5a4d-ee57-4e92-9c6f-fac812eb670f)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IRedirectionManager
    {
        void OnBeginPainting();
        Windows.Internal.UI.Logon.Controller.LogonErrorRedirectorResponse RedirectStatus(String message);
        [return_name("response")] Windows.Internal.UI.Logon.Controller.LogonErrorRedirectorResponse RedirectMessage(String caption, String message, UInt32 type, out UInt32 result);
        [return_name("response")] Windows.Internal.UI.Logon.Controller.LogonErrorRedirectorResponse RedirectLogonError(Int32 ntsStatus, Int32 ntsSubstatus, String caption, String message, UInt32 type, out UInt32 result);
        Boolean IsRedirectMode{ get; };
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum UserTheme
    {
        Dark,
        HCDark,
        Light,
        HCLight,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum EmbeddedSKUPolicyFlags
    {
        DisableAll,
        EnableShutdownOption,
        EnableLanguageOption,
        EnableEaseOfAccessOption = 4,
        EnableBackButton = 16,
        EnableBSDR = 32,
        EnableAll = 63,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(c2f73722-98c4-475c-87f2-1ec1d62a19f9)]
    interface IUserSettingManager
    {
        Boolean IsUserSwitchingAllowed(LogonUIRequestReason reason);
        void CancelUserSwitch();
        Boolean IsLoggedOnUserSidPresent{ get; };
        UInt16 LangID{ get; };
        String UserSid{ get; };
        String UserSid{ set; };
        Int32 CaretWidth{ get; };
        Int32 TextScale{ get; };
        Boolean IsTransparencyEnabled{ get; };
        String LastLoggedOnUserSid{ get; };
        Windows.Internal.UI.Logon.CredProvData.ITelemetryDataProvider TelemetryDataProvider{ get; };
        Boolean IsLockScreenAllowed{ get; };
        Boolean IsLockScreenAllowed{ set; };
        Boolean IsSwitchUser{ get; };
        Windows.Internal.UI.Logon.Controller.UserTheme UserTheme{ get; };
        Boolean IsLowMemoryDevice{ get; };
        Boolean IsFirstLogonAfterSignOutOrSwitchUser{ get; };
        Windows.Internal.UI.Logon.Controller.EmbeddedSKUPolicyFlags EmbeddedSKUPolicy{ get; };
        Boolean ShowAccentColorInsteadOfLogonBackgroundImage{ get; };
        Boolean IsFirstBoot{ get; };
        Boolean ShouldLaunchFirstLogonAnimation{ get; };
        Boolean IsOobeZDPRebootRequired{ get; };
        Boolean ShouldLaunchFirstSignInAnimationInUserSession{ get; };
        Boolean ShouldLaunchFirstSignInAnimationInUserSession{ set; };
        Boolean IsAudioHIDEnabled{ get; };
        String CurrentInputProfile{ get; };
        Boolean IsUserAssignedAccess{ get; };
        Boolean IsLowPowerState{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  LowPowerStateChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  SessionDisconnected;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  ColorSetChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  HighContrastChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  CaretWidthChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  TextScaleChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  IsTransparencyEnabledChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IUserSettingManager, Object>  SlideToShutdownDetected;
    };

    [uuid(963ffa57-1043-4961-8bf0-d3966cd5b833)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IBioFeedbackListener
    {
        void OnBioFeedbackUpdate(Windows.Internal.UI.Logon.CredProvData.BioFeedbackState state, String label, String accessibilityText);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(15be936a-4b14-4d87-bfeb-668c6d4aff2a)]
    interface IWebDialogDismissTrigger requires Windows.Foundation.IAsyncAction, IAsyncInfo
    {
        void DismissWebDialog();
        void SyncBackstop();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(bd4fd664-fd5e-4ea2-8a71-48a75a4529c0)]
    interface IUnlockTrigger requires Windows.Foundation.IAsyncOperation<String>, IAsyncInfo
    {
        void TriggerUnlock();
        void SyncBackstop();
        void CheckCompletion();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LockDisplayOwner
    {
        LockHost,
        LogonUX,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LockActivity
    {
        None,
        Manipulation,
        StartDismiss,
        StopDismiss,
        AboveLockApp,
        UserSelectionShown,
        UserSelectionHidden,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(c1dee830-94c1-488c-82d0-3332c15a6f2d)]
    interface ILockInfo requires Windows.Foundation.IAsyncOperation<String>, IAsyncInfo
    {
        Windows.Internal.UI.Logon.Controller.LockDisplayOwner VisualOwner{ get; };
        String DomainName{ get; };
        String UserName{ get; };
        String FriendlyName{ get; };
        Boolean RequireSecureGesture{ get; };
        Boolean ShowSpeedBump{ get; };
        String RequireSecureGestureString{ get; };
        String SpeedBumpString{ get; };
        Boolean IsLostMode{ get; };
        String LostModeMessage{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.ILockInfo, Windows.Internal.UI.Logon.Controller.LockActivity>  UserActivity;
    };

    [uuid(14eb7f37-5973-400a-ae89-8b1c6702e10a)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ILockActivityListener
    {
        void OnLockActivity(LockActivity activity);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass WebDialogAction
        : [default]Windows.Internal.UI.Logon.Controller.IWebDialogDismissTrigger
        , Windows.Foundation.IAsyncAction
    {
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass LockAction
        : [default]Windows.Internal.UI.Logon.Controller.IUnlockTrigger
        , Windows.Foundation.IAsyncOperation<String>
        , Windows.Internal.UI.Logon.Controller.ILockInfo
    {
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass SecureLockAction
        : [default]Windows.Internal.UI.Logon.Controller.IUnlockTrigger
        , Windows.Foundation.IAsyncOperation<String>
        , Windows.Internal.UI.Logon.Controller.ILockInfo
    {
    }

    [flags]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum LogonUISecurityOptions
    {
        Cancel,
        Lock,
        LogOff,
        ChangePassword = 4,
        TaskManager = 8,
        SwitchUser = 16,
        ChangeCloudPassword = 32,
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.Controller.ILogonUISecurityOptionsResultFactory", d54e91cd-1605-4e92-a736-b18f5b26cedd)]
    [interface_name("Windows.Internal.UI.Logon.Controller.ILogonUISecurityOptionsResult", e1b3be00-a1e8-4ab4-a1b9-ea94cc55ed0d)]
    runtimeclass LogonUISecurityOptionsResult
    {
        [method_name( "CreateSecurityOptionsResult" )] LogonUISecurityOptionsResult(LogonUISecurityOptions securityOptionChoice, LogonUIShutdownChoice shutdownChoice);
        LogonUISecurityOptionsResult();
        Windows.Internal.UI.Logon.Controller.LogonUISecurityOptions SecurityOptionChoice{ get; };
        Windows.Internal.UI.Logon.Controller.LogonUIShutdownChoice ShutdownChoice{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(0f689741-b89f-41f0-8f2b-19da66e5f54b)]
    interface ILogonUX
    {
        void Start(Object autoLogonManager, IRedirectionManager redirectionManager, IUserSettingManager userSettingManager, Windows.Internal.UI.Logon.CredProvData.IDisplayStateProvider displayStateProvider, IBioFeedbackListener bioFeedbackListener);
        void DelayLock(Boolean allowDirectUserSwitching, Boolean isUserPresent, Boolean allowWebDialog, String sessionContext, IUnlockTrigger unlockTrigger);
        void HardLock(LogonUIRequestReason reason, Boolean allowDirectUserSwitching, Boolean isUserPresent, Boolean allowWebDialog, String sessionContext, IUnlockTrigger unlockTrigger);
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.RequestCredentialsData>  RequestCredentialsAsync(LogonUIRequestReason reason, LogonUIFlags flags, String sessionContext);
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.ReportCredentialsData>  ReportCredentialsAsync(LogonUIRequestReason reason, Int32 ntsStatus, Int32 ntsSubStatus, String samCompatibleUserName, String displayName, String userSid);
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.MessageDisplayResult>  DisplayMessageAsync(LogonMessageMode messageMode, UInt32 messageBoxFlags, String caption, String message);
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.MessageDisplayResult>  DisplayCredentialErrorAsync(Int32 ntsStatus, Int32 ntsSubStatus, UInt32 messageBoxFlags, String caption, String message);
        Windows.Foundation.IAsyncAction DisplayStatusAsync(LogonUIState state, String status);
        Windows.Foundation.IAsyncAction DisplayStatusAndForceCredentialPageAsync(LogonUIRequestReason reason, LogonUIFlags flags, String sessionContext, LogonUIState state, String status);
        Windows.Foundation.IAsyncAction TriggerLogonAnimationAsync();
        void ResetCredentials();
        void ClearUIState(String statusMessage);
        void RestoreFromFirstSignInAnimation();
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.LogonUISecurityOptionsResult>  ShowSecurityOptionsAsync(LogonUISecurityOptions options);
        void WebDialogDisplayed(IWebDialogDismissTrigger dismissTrigger);
        Object WindowContainer{ get; };
        void Hide();
        void Stop();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass LogonUX
        : [default]Windows.Internal.UI.Logon.Controller.ILogonUX
    {
        LogonUX();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass ConsoleLogonUX
        : [default]Windows.Internal.UI.Logon.Controller.ILogonUX
    {
        ConsoleLogonUX();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass PPILogonUX
        : [default]Windows.Internal.UI.Logon.Controller.ILogonUX
    {
        PPILogonUX();
    }


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.Controller.ITerminalServiceDisconnectResult", b94e7970-ee73-4e70-b238-b6aff2fab8e0)]
    runtimeclass TerminalServiceDisconnectResult
    {
        TerminalServiceDisconnectResult();
        UInt32 Result{ get; };
        Boolean Forced{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum ForceDisconnectOption
    {
        NoForceDisconnect,
        ForceDisconnect,
    };

    [uuid(ea272e37-05a4-4cad-b40a-217b5c993a27)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ITerminalServiceSessionPickerUX
    {
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.Controller.TerminalServiceDisconnectResult>  ShowDisconnectAsync(IRedirectionManager redirectionManager, UInt32[] sessionIds, ForceDisconnectOption option, Object windowContainer);
        Windows.Foundation.IAsyncOperation <UInt32>  ShowReconnectAsync(IRedirectionManager redirectionManager, UInt32[] sessionIds, Object windowContainer);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass TerminalServiceSessionPickerUX
        : [default]Windows.Internal.UI.Logon.Controller.ITerminalServiceSessionPickerUX
    {
        TerminalServiceSessionPickerUX();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum BlockedShutdownState
    {
        NotVisible,
        Visible,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.Controller.IShutdownBlockingApp", 9032b0f9-8e6c-4d77-94ef-e7572f505e91)]
    runtimeclass ShutdownBlockingApp
    {
        ShutdownBlockingApp();
        Windows.Storage.Streams.IRandomAccessStream Icon{ get; };
        String Caption{ get; };
        String BlockReason{ get; };
        Boolean IsBlocking{ get; };
        UInt32 Id{ get; };
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum BlockedShutdownResolution
    {
        None,
        Force,
        Cancel,
        Timeout,
        LastAppRemoved,
    };

    [uuid(36d8e713-0af2-428f-931c-346c1cd1a722)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IBlockedShutdownResolverUX
    {
        void Start(IUserSettingManager userSettingManager, ILogonUIStateInfo logonUIStateInfo);
        UInt32 ScaleFactor{ get; };
        Boolean WasClicked{ get; };
        void AddApplication(ShutdownBlockingApp app);
        void RemoveApplication(UInt32 appId);
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.Controller.IBlockedShutdownResolverUX, Windows.Internal.UI.Logon.Controller.BlockedShutdownResolution>  Resolved;
        void Hide();
        void Stop();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass BlockedShutdownResolverUX
        : [default]Windows.Internal.UI.Logon.Controller.IBlockedShutdownResolverUX
    {
        BlockedShutdownResolverUX();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass ConsoleBlockedShutdownResolver
        : [default]Windows.Internal.UI.Logon.Controller.IBlockedShutdownResolverUX
    {
        ConsoleBlockedShutdownResolver();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum LockOptions
    {
        Default,
        SecureDesktop,
        TooManyFailedAttempts,
        RequireSecureGesture = 4,
        DelayLock = 8,
        AltView = 16,
        AssignedAccess = 32,
        UserIsPresent = 64,
        IsArsoLock = 128,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(716a5b05-6e30-4f65-8a89-97de0fda0852)]
    interface ILockScreenHost
    {
        Windows.Internal.UI.Logon.Controller.IWebDialogDismissTrigger ShowWebDialogAsync(String uri);
        [return_name("action")] Windows.Internal.UI.Logon.Controller.IUnlockTrigger LockAsync(LockOptions options, String domainName, String userName, String friendlyName, String userSid, out Boolean setWin32kForegroundHardening);
        void Reset();
        void PreShutdown();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass LockScreenHost
        : [default]Windows.Internal.UI.Logon.Controller.ILockScreenHost
        , Windows.Internal.UI.Logon.Controller.IBioFeedbackListener
    {
        LockScreenHost();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass ConsoleLockScreen
        : [default]Windows.Internal.UI.Logon.Controller.ILockScreenHost
    {
        ConsoleLockScreen();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(018a59b8-e4ed-45f9-8f6b-637d0d729811)]
    interface IFirstSignInAnimation
    {
        void StartAnimation(Object autoLogonManager, IUserSettingManager userSettingManager, ILogonUX pLogonUX, Boolean forceLaunch, LogonUIState state);
        Boolean IsAnimationInProgress{ get; };
        Windows.Foundation.IAsyncAction StopAnimationAsync(UInt32 timeout);
        void CancelAnimation();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass FirstSignInAnimation
        : [default]Windows.Internal.UI.Logon.Controller.IFirstSignInAnimation
    {
        FirstSignInAnimation();
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(461a5d88-a5ad-45a1-93f7-f2399918da00)]
    interface ILogonRPCServer
    {
        Object GetRPCCallback(Boolean cancelInactivityTimer);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum BioStartOptions
    {
        DefaultDesktop,
        SecureDesktop,
    };

    [uuid(8ca1dcec-1d50-43ff-a07c-ad243f2acc2f)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IBioFeedbackUX
    {
        void Start(BioStartOptions startOptions, UInt16 langID, String userSid);
        void UpdateUIState(Windows.Internal.UI.Logon.CredProvData.BioFeedbackState state, String label, String accessibilityText);
        void TransitionVisibility(Boolean isVisible);
        void Stop();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    runtimeclass BioFeedbackUX
        : [default]Windows.Internal.UI.Logon.Controller.IBioFeedbackUX
    {
        BioFeedbackUX();
    }

}
namespace Windows.Internal.UI.Logon.Callbacks
{
    [uuid(a9539947-10d0-4abc-bd21-09cde7b2cda5)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IAbortableCallback
    {
        Boolean CanContinue{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Object>  CanContinueChanged;
        void OnError(HRESULT result);
    };

    [uuid(6d3c17b8-8496-4fee-8c53-33defe447225)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IOperationComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete();
    };

}
namespace Windows.Internal.UI.Logon.LogonUX
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(4d65dd1e-93c2-4d8f-b017-11c62117da09)]
    interface IRequestCredentialComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete(Windows.Internal.UI.Logon.Controller.RequestCredentialsData result);
    };

    [uuid(08143c95-d938-40ac-a3d9-9c7123034747)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IReportResultComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete(Windows.Internal.UI.Logon.Controller.ReportCredentialsData result);
    };

    [uuid(3f727fe6-6958-402b-acdc-c366242d638a)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IDisplayMessageComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete(Windows.Internal.UI.Logon.Controller.MessageDisplayResult result);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(f4f5a2b1-4381-4617-a326-39534a0245f4)]
    interface ISecurityOptionSelectionComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete(Windows.Internal.UI.Logon.Controller.LogonUISecurityOptionsResult result);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(eef9626f-bfba-4c40-8ecc-0f7d18ccf4cb)]
    interface ILogonUXViewModel
    {
        void SetContext(Object autoLogonManager, Object windowContainer, Windows.Internal.UI.Logon.Controller.IRedirectionManager redirectionManager, Windows.Internal.UI.Logon.Controller.IUserSettingManager userSettingManager, Windows.Internal.UI.Logon.CredProvData.IDisplayStateProvider displayStateProvider, Windows.Internal.UI.Logon.Controller.IBioFeedbackListener bioFeedbackListener, Windows.Internal.UI.Logon.CredProvData.IUserTileImageProvider userTileImageProvider, Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void RequestCredentials(Windows.Internal.UI.Logon.Controller.LogonUIRequestReason reason, Windows.Internal.UI.Logon.Controller.LogonUIFlags flags, String sessionContext, IRequestCredentialComplete completeCallback);
        void ReportResult(Windows.Internal.UI.Logon.Controller.LogonUIRequestReason reason, Int32 ntsStatus, Int32 ntsSubStatus, String samCompatibleUserName, String displayName, String userSid, IReportResultComplete completeCallback);
        void DisplayStatus(Windows.Internal.UI.Logon.Controller.LogonUIState state, String status, Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void DisplayStatusAndForceCredentialPage(Windows.Internal.UI.Logon.Controller.LogonUIRequestReason reason, Windows.Internal.UI.Logon.Controller.LogonUIFlags flags, String sessionContext, Windows.Internal.UI.Logon.Controller.LogonUIState state, String status, Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void DisplayMessage(Windows.Internal.UI.Logon.Controller.LogonMessageMode messageMode, UInt32 messageBoxFlags, String caption, String message, IDisplayMessageComplete completeCallback);
        void DisplayCredentialError(Int32 ntsStatus, Int32 ntsSubStatus, UInt32 messageBoxFlags, String caption, String message, IDisplayMessageComplete completeCallback);
        void ShowSecurityOptions(Windows.Internal.UI.Logon.Controller.LogonUISecurityOptions options, ISecurityOptionSelectionComplete completeCallback);
        void DelayLock(Boolean allowDirectUserSwitching, Boolean isUserPresent, Boolean allowWebDialog, String sessionContext, Windows.Internal.UI.Logon.Controller.IUnlockTrigger unlockTrigger);
        void HardLock(Windows.Internal.UI.Logon.Controller.LogonUIRequestReason reason, Boolean allowDirectUserSwitching, Boolean isUserPresent, Boolean allowWebDialog, String sessionContext, Windows.Internal.UI.Logon.Controller.IUnlockTrigger unlockTrigger);
        void WebDialogDisplayed(Windows.Internal.UI.Logon.Controller.IWebDialogDismissTrigger dismissTrigger);
        void TriggerLogonAnimation(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void ClearCredentialState();
        void Shutdown(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
    };

}
namespace Windows.Internal.UI.Logon.BlockedShutdownUX
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(cce4800d-f9c9-488c-a5d8-d3b6e98390e0)]
    interface IResolveBlockedShutdown
    {
        void Resolve(Windows.Internal.UI.Logon.Controller.BlockedShutdownResolution resolution);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(55b3163a-0848-4980-8994-1ecb06dc4608)]
    interface IBlockedShutdownUXViewModel
    {
        void SetContext(Windows.Internal.UI.Logon.Controller.IUserSettingManager userSettingManager, Windows.Internal.UI.Logon.Controller.LogonUIState currentLogonUIState, IResolveBlockedShutdown resolveCallback, Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void AddApplication(Windows.Internal.UI.Logon.Controller.ShutdownBlockingApp app);
        void RemoveApplication(UInt32 appId);
        void Teardown(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
    };

}
namespace Windows.Internal.UI.Logon.BioFeedbackUX
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(91a11769-cdab-424c-8053-2d4a4a1916ec)]
    interface IBioFeedbackViewModel
    {
        void SetContext(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
        void UpdateUIState(Windows.Internal.UI.Logon.CredProvData.BioFeedbackState state, String label, String accessibilityText);
        void TransitionVisibility(Boolean isVisible);
        void Teardown(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
    };

}
namespace Windows.Internal.UI.Logon.SuggestedUsersData
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [flags]
    enum UserIdentificationKind
    {
        None,
        Unknown,
        Pen,
        MeetingOrganizer = 4,
        MeetingAttendee = 8,
        OnDevice = 16,
        Face = 32,
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Logon.SuggestedUsersData.ISuggestedUserFactory", 10ffc83a-80d6-468e-aaa2-4c0f9aca9290)]
    [interface_name("Windows.Internal.UI.Logon.SuggestedUsersData.ISuggestedUser", 960cfec7-c4cf-4d33-a13f-b393338756d6)]
    runtimeclass SuggestedUser
    {
        [method_name( "CreateSuggestedUser" )] SuggestedUser(String upn, String displayName, String userSid, Windows.Storage.Streams.IRandomAccessStream stream, UserIdentificationKind identificationKind, Boolean isLoggedIn);
        SuggestedUser();
        String UPN{ get; };
        String DisplayName{ get; };
        String UserSid{ get; };
        Windows.Storage.Streams.IRandomAccessStream UserImageStream{ get; };
        Windows.Internal.UI.Logon.SuggestedUsersData.UserIdentificationKind IdentificationKind{ get; };
        Windows.Internal.UI.Logon.SuggestedUsersData.UserIdentificationKind IdentificationKind{ set; };
        Boolean IsLoggedIn{ get; };
        Boolean IsLoggedIn{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser, Object>  PropertiesChanged;
    }



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.SuggestedUsersData.IResolveUpnToSid", 538020d6-0acb-40ab-9c60-ccfa0c488c75)]
    runtimeclass ResolveUpnToSid
    {
        ResolveUpnToSid();
        String GetSidFromUpn(String upn);
    }

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(64724ca0-780e-42d1-95d9-a65aab17293d)]
    interface IRecognitionProvider
    {
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  SuggestedUserFound;
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  SuggestedUserLost;
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser> >  GetAllCurrentUsersAsync();
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Logon.SuggestedUsersData.ISuggestedUsersDataModel", de4504af-82a8-442e-914d-4922b4b03400)]
    runtimeclass SuggestedUsersDataModel
    {
        SuggestedUsersDataModel();
        void StartListening();
        void StopListening();
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  SuggestedUsers{ get; };
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  SuggestedUsersWithoutVisitors{ get; };
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  LoggedInRosterUsers{ get; };
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  LoggedInRosterUsersWithoutVisitors{ get; };
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  IdentifiedRosterUsers{ get; };
        UInt32 TotalLoggedInUserCount{ get; };
        void AddRecognitionProvider(IRecognitionProvider provider);
        void RemoveRecognitionProvider(IRecognitionProvider provider);
        Windows.System.User GetUserFromSuggestedUser(SuggestedUser value);
        Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser TryGetSuggestedUserFromSid(String userSid);
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  GetFirstNSuggestedUsers(UInt32 number);
        Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  GetSuggestedUsersByIdentificationKind(UserIdentificationKind identificationKind);
        void AddSuggestedUser(SuggestedUser value, Boolean onSignOut);
        void RemoveSuggestedUser(SuggestedUser value);
        void UpdateSignInState(SuggestedUser user, Boolean signedIn);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IObservableVector <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser> >  SearchAsync(String searchText);
        void Clear();
        Windows.Foundation.IAsyncOperation <Windows.Internal.UI.Logon.SuggestedUsersData.SuggestedUser>  ConvertUserToSuggestedUserAsync(Windows.System.User user);
    }

}
namespace Windows.Internal.UI.Credentials.Controller
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum ProgramSignatureLevel
    {
        None,
        Signed,
        Unsigned,
        Malicious,
    };

    [uuid(ff9fd51c-bcab-476e-b4ce-9ea802d8cfca)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface IConsentUXContext
    {
        String Signature{ get; };
        Windows.Internal.UI.Credentials.Controller.ProgramSignatureLevel SignatureLevel{ get; };
        Windows.Storage.Streams.IRandomAccessStream Icon{ get; };
        String ProgramName{ get; };
        String ProgramOrigin{ get; };
        String Expanded{ get; };
        String PublisherName{ get; };
        String AntiMalwareProviderName{ get; };
        String PublisherCertificateLinkText{ get; };
        String UACSettingsLinkText{ get; };
        Boolean IsExpandedTextCLSID{ get; };
        Boolean IsPublisherVerified{ get; };
        Boolean ExpandPublisherByDefault{ get; };
        Boolean ActionTextVisible{ get; };
        String ActionText{ get; };
        Boolean OkButtonVisible{ get; };
        void OnPublisherCertificateLinkClicked();
        void OnUACSettingsLinkClicked();
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum SecurePromptPhase
    {
        PreWaitingForSecureGesture,
        WaitingForSecureGesture,
        Completed,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(34a3c1b9-339f-4062-90a8-8c6eca82f005)]
    interface ICredUXSecurePrompt
    {
        String SecurePromptGestureText{ get; };
        String EnterSecurePromptPhaseText{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.UI.Credentials.Controller.SecurePromptPhase>  SecurePromptPhaseChanged;
        void AttemptSecureRequest();
        void CancelSecureRequest();
    };

    [uuid(1940bca9-21e4-4e8e-bdb8-f14e4e58d96d)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ICredUXExtension
    {
        String FallbackCaptionText{ get; };
        String ConsentUIMessageText{ get; };
        Boolean IsThreadOnSecureDesktop{ get; };
        Boolean IsSecurePromptPolicyEnforced{ get; };
        Windows.Internal.UI.Logon.CredProvData.IUserTileImageProvider UserTileImageProvider{ get; };
        String GetStringFromError(UInt32 errorCode);
        Windows.Internal.UI.Logon.CredProvData.UserAccountKind GetUserAccountKind(String userSid);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CredUIStyle
    {
        Default,
        Holographic,
        Mobile,
        Xbox,
        ComposerDefined,
    };

    [uuid(e3add5fc-628c-4af1-ac29-7947e28b8d66)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ICredUXParameters
    {
        UInt32 Flags{ get; };
        UInt32 InternalFlags{ get; };
        String CancelButtonText{ get; };
        String CaptionText{ get; };
        String ErrorText{ get; };
        String MessageText{ get; };
        String OkButtonText{ get; };
        Object InputBuffer{ get; };
        Guid ProviderGUID{ get; };
        Windows.Storage.Streams.IBuffer Context{ get; };
        Boolean SaveCredCheckBoxIsVisible{ get; };
        Boolean SaveCredCheckBoxIsChecked{ get; };
        Boolean IsPromptForCredentials{ get; };
        Boolean IsUAC{ get; };
        Boolean IsOnSecureDesktop{ get; };
        Boolean IsPromptForConsent{ get; };
        Boolean IsSecurePromptRequired{ get; };
        Object ParentWindow{ get; };
        Windows.Internal.UI.Credentials.Controller.IConsentUXContext ConsentUXContext{ get; };
        Windows.Internal.UI.Credentials.Controller.ICredUXSecurePrompt CredUXSecurePrompt{ get; };
        Windows.Internal.UI.Credentials.Controller.CredUIStyle Style{ get; };
        Windows.Internal.UI.Logon.CredProvData.IUserTileImageProvider UserTileImageProvider{ get; };
        Boolean HideOKButton{ get; };
        Boolean HideUserTileImage{ get; };
        Windows.Internal.UI.Logon.CredProvData.UserAccountKind GetUserAccountKind(String userSid);
    };



    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [constructor_name("Windows.Internal.UI.Credentials.Controller.IRequestCredentialsDataFactory", 25013f10-5ff0-4add-985e-f736afb7e575)]
    [interface_name("Windows.Internal.UI.Credentials.Controller.IRequestCredentialsData", 1b36ef73-6527-4679-b630-3e4dcb6404a2)]
    runtimeclass RequestCredentialsData
    {
        [method_name( "CreateRequestCredentialsData" )] RequestCredentialsData(Windows.Internal.UI.Logon.CredProvData.CredentialSerialization serialization, Boolean saveCredential);
        RequestCredentialsData();
        Windows.Internal.UI.Logon.CredProvData.CredentialSerialization Credential{ get; };
        Boolean SaveCredential{ get; };
    }

}
namespace Windows.Internal.UI.Credentials.CredUX
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(e56d71aa-1a03-4c5c-a98b-e1eb14de409d)]
    interface IRequestCredentialComplete requires Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
    {
        void OnComplete(Windows.Internal.UI.Credentials.Controller.RequestCredentialsData credData);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(e9a4e6c7-1bb5-439e-bb07-bbeb4956493b)]
    interface ICredUXResourceMap
    {
        String GetResourceString(String key);
        String GetFormattedString(String format, String string);
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Credentials.CredUX.ICredUXRenderComplete", 521bd9a5-d9fd-445d-9c7f-9bb27cefaad9)]
    runtimeclass CredUXRenderComplete
    {
        CredUXRenderComplete();
        void InitialRenderComplete();
        event Windows.Foundation.TypedEventHandler <Windows.Internal.UI.Credentials.CredUX.CredUXRenderComplete, Object>  WindowUncloaked;
    }

    [uuid(b1005513-8630-4b4a-a0b7-3421ea521ee6)]
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    interface ICredUXViewModel
    {
        void RequestCredentials(Windows.Internal.UI.Credentials.Controller.ICredUXParameters credUXParams, Windows.Internal.UI.Logon.CredProvData.IUIThreadEventDispatcher dispatcher, ICredUXResourceMap resourceMap, IRequestCredentialComplete completeCallback, Object windowContainer, Windows.Internal.UI.Logon.CredProvData.IDisplayStateProvider displayStateProvider);
        void Shutdown(Windows.Internal.UI.Logon.Callbacks.IOperationComplete completeCallback);
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    enum CloseButtonState
    {
        Rest,
        Hover,
        Pressed,
    };

    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [uuid(acfc7630-c169-4310-9bdb-60f3ca99b4a9)]
    interface ICredUXViewInfo
    {
        Windows.Foundation.Size TitleBarSize{ get; };
        Windows.Foundation.Size CloseButtonSize{ get; };
        void UpdateCloseButtonState(CloseButtonState newState);
        void CloseRequested();
    };


    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Credentials.CredUX.ICredUXViewProvider", cb255d93-5ae5-407e-938a-6d96ab2665b6)]
    runtimeclass CredUXViewProvider
    {
        CredUXViewProvider();
        Object GetView(Object viewModel);
        Windows.Internal.UI.Credentials.CredUX.ICredUXViewModel GetViewModel(Object resourceDictionary);
        Object XamlRuntimeSite{ get; };
    }


}
namespace Windows.Internal.UI.Credentials.DialogActivation
{
    [contract(Windows.Internal.UI.Logon.InternalContract, 1)]
    [interface_name("Windows.Internal.UI.Credentials.DialogActivation.ICredDialogActivationArgs", 340acea8-2e30-4522-96de-85addb52d64b)]
    runtimeclass CredDialogActivationArgs
        : Windows.Internal.UI.Credentials.CredUX.IRequestCredentialComplete
        , Windows.Internal.UI.Logon.Callbacks.IAbortableCallback
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        CredDialogActivationArgs();
        Windows.Internal.UI.Credentials.Controller.ICredUXParameters CredUXParams{ get; };
        Windows.Internal.UI.Credentials.CredUX.ICredUXResourceMap ResourceMap{ get; };
    }

}
