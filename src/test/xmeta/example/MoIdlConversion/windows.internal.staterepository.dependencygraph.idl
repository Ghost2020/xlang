











namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IDependencyGraphStatics", c9e5352e-a07a-4e91-8309-46904e20888c)]
    [interface_name("Windows.Internal.StateRepository.IDependencyGraph", 79f51b1c-f79f-4c22-8bc2-a5b3875f4a63)]
    [threading(both)]
    runtimeclass DependencyGraph
    {
        DependencyGraph();
        static Boolean Exists(Int64 dependencyGraphID);
        static Boolean ExistsBySupplierPackage(Package SupplierPackage);
        static Boolean ExistsByUser(User User);
        static Boolean ExistsByUserAndDependentPackage(User User, Package DependentPackage);
        static Boolean ExistsByUserAndDependentPackageAndDependencyType(User User, Package DependentPackage, DependencyGraphType DependencyType);
        static Boolean ExistsByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID(User User, Package DependentPackage, DependencyGraphType DependencyType, Int64 _DependencyGraphID);
        static Boolean ExistsByUserAndDependentPackageAndIndex(User User, Package DependentPackage, Int32 Index);
        static Boolean ExistsByUserAndDependentPackageAndSupplierPackage(User User, Package DependentPackage, Package SupplierPackage);
        static Boolean ExistsByUserAndSupplierPackage(User User, Package SupplierPackage);
        static Windows.Internal.StateRepository.DependencyGraph Get(Int64 dependencyGraphID);
        static Windows.Internal.StateRepository.DependencyGraph TryGet(Int64 dependencyGraphID);
        static Windows.Internal.StateRepository.DependencyGraph GetByUserAndDependentPackageAndSupplierPackage(User User, Package DependentPackage, Package SupplierPackage);
        static Windows.Internal.StateRepository.DependencyGraph TryGetByUserAndDependentPackageAndSupplierPackage(User User, Package DependentPackage, Package SupplierPackage);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindBySupplierPackage(Package SupplierPackage);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUser(User User);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndDependentPackage(User User, Package DependentPackage);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndDependentPackageAndDependencyType(User User, Package DependentPackage, DependencyGraphType DependencyType);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndDependentPackageAndDependencyTypeAnd_DependencyGraphID(User User, Package DependentPackage, DependencyGraphType DependencyType, Int64 _DependencyGraphID);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndDependentPackageAndIndex(User User, Package DependentPackage, Int32 Index);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndSupplierPackage(User User, Package SupplierPackage);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.DependencyGraph>  FindByUserAndDependentPackage_SortedByIndex(User user, Package dependentPackage);
        static Windows.Internal.StateRepository.DependencyGraph GetMainPackageDependencyByUserAndSupplierPackage(User user, Package supplierPackage);
        static Boolean ExistsByUserAndDependentPackageAndSupplierPackageFamilyName(User user, Package dependentPackage, String packageFamilyName);
        Int64 _DependencyGraphID{ get; };
        Int64 _DependencyGraphID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 User{ get; };
        Int64 User{ set; };
        Windows.Internal.StateRepository.User GetUser();
        void SetUser(User value);
        Int64 DependentPackage{ get; };
        Int64 DependentPackage{ set; };
        Windows.Internal.StateRepository.Package GetDependentPackage();
        void SetDependentPackage(Package value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        Int64 SupplierPackage{ get; };
        Int64 SupplierPackage{ set; };
        Windows.Internal.StateRepository.Package GetSupplierPackage();
        void SetSupplierPackage(Package value);
        Windows.Internal.StateRepository.DependencyGraphType DependencyType{ get; };
        Windows.Internal.StateRepository.DependencyGraphType DependencyType{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
