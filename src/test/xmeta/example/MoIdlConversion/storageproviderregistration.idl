










namespace Windows.Storage.Provider
{
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    enum StorageProviderHydrationPolicy
    {
        Partial,
        Progressive,
        Full,
        AlwaysFull,
    };

    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    enum StorageProviderPopulationPolicy
    {
        Full = 1,
        AlwaysFull,
    };

    [flags]
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    enum StorageProviderHydrationPolicyModifier
    {
        None,
        ValidationRequired,
        StreamingAllowed,
        [contract(Windows.Storage.Provider.CloudFilesContract, 3)]
        AutoDehydrationAllowed = 4,
    };

    [flags]
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    enum StorageProviderInSyncPolicy
    {
        Default,
        FileCreationTime,
        FileReadOnlyAttribute,
        FileHiddenAttribute = 4,
        FileSystemAttribute = 8,
        DirectoryCreationTime = 16,
        DirectoryReadOnlyAttribute = 32,
        DirectoryHiddenAttribute = 64,
        DirectorySystemAttribute = 128,
        FileLastWriteTime = 256,
        DirectoryLastWriteTime = 512,
        PreserveInsyncForSyncEngine = 0x80000000,
    };

    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    [flags]
    enum StorageProviderHardlinkPolicy
    {
        None,
        Allowed,
    };

    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    enum StorageProviderProtectionMode
    {
        Unknown,
        Personal,
    };


    [dualapipartition(0xa000004)]
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.Provider.IStorageProviderItemPropertyDefinition", c5b383bb-ff1f-4298-831e-ff1c08089690)]
    [threading(both)]
    runtimeclass StorageProviderItemPropertyDefinition
    {
        StorageProviderItemPropertyDefinition();
        Int32 Id{ get; };
        Int32 Id{ set; };
        String DisplayNameResource{ get; };
        String DisplayNameResource{ set; };
    }



    [dualapipartition(0xa000004)]
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.Provider.IStorageProviderSyncRootInfo", 7c1305c4-99f9-41ac-8904-ab055d654926)]
    [threading(both)]
    runtimeclass StorageProviderSyncRootInfo
    {
        StorageProviderSyncRootInfo();
        String Id{ get; };
        String Id{ set; };
        Windows.Storage.Streams.IBuffer Context{ get; };
        Windows.Storage.Streams.IBuffer Context{ set; };
        Windows.Storage.IStorageFolder Path{ get; };
        Windows.Storage.IStorageFolder Path{ set; };
        String DisplayNameResource{ get; };
        String DisplayNameResource{ set; };
        String IconResource{ get; };
        String IconResource{ set; };
        Windows.Storage.Provider.StorageProviderHydrationPolicy HydrationPolicy{ get; };
        Windows.Storage.Provider.StorageProviderHydrationPolicy HydrationPolicy{ set; };
        Windows.Storage.Provider.StorageProviderHydrationPolicyModifier HydrationPolicyModifier{ get; };
        Windows.Storage.Provider.StorageProviderHydrationPolicyModifier HydrationPolicyModifier{ set; };
        Windows.Storage.Provider.StorageProviderPopulationPolicy PopulationPolicy{ get; };
        Windows.Storage.Provider.StorageProviderPopulationPolicy PopulationPolicy{ set; };
        Windows.Storage.Provider.StorageProviderInSyncPolicy InSyncPolicy{ get; };
        Windows.Storage.Provider.StorageProviderInSyncPolicy InSyncPolicy{ set; };
        Windows.Storage.Provider.StorageProviderHardlinkPolicy HardlinkPolicy{ get; };
        Windows.Storage.Provider.StorageProviderHardlinkPolicy HardlinkPolicy{ set; };
        Boolean ShowSiblingsAsGroup{ get; };
        Boolean ShowSiblingsAsGroup{ set; };
        String Version{ get; };
        String Version{ set; };
        Windows.Storage.Provider.StorageProviderProtectionMode ProtectionMode{ get; };
        Windows.Storage.Provider.StorageProviderProtectionMode ProtectionMode{ set; };
        Boolean AllowPinning{ get; };
        Boolean AllowPinning{ set; };
        Windows.Foundation.Collections.IVector <Windows.Storage.Provider.StorageProviderItemPropertyDefinition>  StorageProviderItemPropertyDefinitions{ get; };
        Windows.Foundation.Uri RecycleBinUri{ get; };
        Windows.Foundation.Uri RecycleBinUri{ set; };

        [contract(Windows.Storage.Provider.CloudFilesContract, 3)]
        [interface_name("Windows.Storage.Provider.IStorageProviderSyncRootInfo2", cf51b023-7cf1-5166-bdba-efd95f529e31)]
        {
            Guid ProviderId{ get; };
            Guid ProviderId{ set; };
        }
    }

    [contract(Windows.Storage.Provider.CloudFilesContract, 2)]
    enum StorageProviderUriSourceStatus
    {
        Success,
        NoSyncRoot,
        FileNotFound,
    };


    [contract(Windows.Storage.Provider.CloudFilesContract, 2)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000005)]
    [interface_name("Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult", 2564711d-aa89-4d12-82e3-f72a92e33966)]
    [threading(both)]
    runtimeclass StorageProviderGetContentInfoForPathResult
    {
        StorageProviderGetContentInfoForPathResult();
        Windows.Storage.Provider.StorageProviderUriSourceStatus Status{ get; };
        Windows.Storage.Provider.StorageProviderUriSourceStatus Status{ set; };
        String ContentUri{ get; };
        String ContentUri{ set; };
        String ContentId{ get; };
        String ContentId{ set; };
    }


    [dualapipartition(0xa000005)]
    [contract(Windows.Storage.Provider.CloudFilesContract, 2)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult", 63711a9d-4118-45a6-acb6-22c49d019f40)]
    [threading(both)]
    runtimeclass StorageProviderGetPathForContentUriResult
    {
        StorageProviderGetPathForContentUriResult();
        Windows.Storage.Provider.StorageProviderUriSourceStatus Status{ get; };
        Windows.Storage.Provider.StorageProviderUriSourceStatus Status{ set; };
        String Path{ get; };
        String Path{ set; };
    }

    [contract(Windows.Storage.Provider.CloudFilesContract, 2)]
    [uuid(b29806d1-8be0-4962-8bb6-0d4c2e14d47a)]
    interface IStorageProviderUriSource
    {
        void GetPathForContentUri(String contentUri, StorageProviderGetPathForContentUriResult result);
        void GetContentInfoForPath(String path, StorageProviderGetContentInfoForPathResult result);
    };


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [contract(Windows.Storage.Provider.CloudFilesContract, 1)]
    [static_name("Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics", 3e99fbbf-8fe3-4b40-abc7-f6fc3d74c98e)]
    [threading(both)]
    runtimeclass StorageProviderSyncRootManager
    {
        static void Register(StorageProviderSyncRootInfo syncRootInformation);
        static void Unregister(String id);
        static Windows.Storage.Provider.StorageProviderSyncRootInfo GetSyncRootInformationForFolder(Windows.Storage.IStorageFolder folder);
        static Windows.Storage.Provider.StorageProviderSyncRootInfo GetSyncRootInformationForId(String id);
        static Windows.Foundation.Collections.IVectorView <Windows.Storage.Provider.StorageProviderSyncRootInfo>  GetCurrentSyncRoots();
    }

}
