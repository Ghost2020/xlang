











namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IPackageUserStatics", fe8722a8-d8f1-469b-8f41-e1cba35eef9e)]
    [interface_name("Windows.Internal.StateRepository.IPackageUser", 01169f99-9b24-41c2-9163-20c818630c24)]
    [threading(both)]
    runtimeclass PackageUser
    {
        PackageUser();
        static Boolean Exists(Int64 packageUserID);
        static Boolean ExistsByAppDataVolume(Int64 AppDataVolume);
        static Boolean ExistsByPackage(Package Package);
        static Boolean ExistsByUser(User User);
        static Boolean ExistsByUserAndDeploymentState(User User, UInt16 DeploymentState);
        static Boolean ExistsByUserAndDeploymentStateAndIsExplicitlyInstalled(User User, UInt16 DeploymentState, Boolean IsExplicitlyInstalled);
        static Boolean ExistsByUserAndPackage(User User, Package Package);
        static Windows.Internal.StateRepository.PackageUser Get(Int64 packageUserID);
        static Windows.Internal.StateRepository.PackageUser TryGet(Int64 packageUserID);
        static Windows.Internal.StateRepository.PackageUser GetByUserAndPackage(User User, Package Package);
        static Windows.Internal.StateRepository.PackageUser TryGetByUserAndPackage(User User, Package Package);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByAppDataVolume(Int64 AppDataVolume);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByPackage(Package Package);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByUser(User User);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByUserAndDeploymentState(User User, UInt16 DeploymentState);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByUserAndDeploymentStateAndIsExplicitlyInstalled(User User, UInt16 DeploymentState, Boolean IsExplicitlyInstalled);
        static Boolean ExistsByPackageFullName(String packageFullName);
        static Boolean ExistsByUserAndPackageFullName(User user, String packageFullName);
        static Boolean ExistsByPackageFamilyNameAndPackageType(String packageFamilyName, PackageType packageType);
        static Boolean ExistsByUserAndPackageFamilyNameAndPackageType(User user, String packageFamilyName, PackageType packageType);
        static Windows.Internal.StateRepository.PackageUser GetByUserAndPackageFullName(User user, String packageFullName);
        static Windows.Internal.StateRepository.PackageUser TryGetByUserAndPackageFullName(User user, String packageFullName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByPackageFullName(String packageFullName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByPackageFamilyNameAndPackageType(String packageFamilyName, PackageType packageType);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PackageUser>  FindByUserAndPackageFamilyNameAndPackageType(User user, String packageFamilyName, PackageType packageType);
        static String GetMainPackageFullNameByUserAndPackageFamilyName(User user, String packageFamilyName);
        static Boolean ExistsByPackageFullNameAndDeploymentState(String packageFullName, UInt16 deploymentState);
        Int64 _PackageUserID{ get; };
        Int64 _PackageUserID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        Int64 User{ get; };
        Int64 User{ set; };
        Windows.Internal.StateRepository.User GetUser();
        void SetUser(User value);
        Windows.Foundation.DateTime InstallTime{ get; };
        Windows.Foundation.DateTime InstallTime{ set; };
        UInt64 OSVersionWhenInstalled{ get; };
        UInt64 OSVersionWhenInstalled{ set; };
        Boolean IsWhenRestoredNull{ get; };
        void SetWhenRestoredToNull();
        Windows.Foundation.DateTime WhenRestored{ get; };
        Windows.Foundation.DateTime WhenRestored{ set; };
        Boolean IsExplicitlyInstalled{ get; };
        Boolean IsExplicitlyInstalled{ set; };
        UInt16 DeploymentState{ get; };
        UInt16 DeploymentState{ set; };
        Int64 AppDataVolume{ get; };
        Int64 AppDataVolume{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
