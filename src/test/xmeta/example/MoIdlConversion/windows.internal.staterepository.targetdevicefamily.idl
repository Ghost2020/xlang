









namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.ITargetDeviceFamilyStatics", cb3a2a28-41c0-4687-9ea6-c248191321de)]
    [interface_name("Windows.Internal.StateRepository.ITargetDeviceFamily", e5dbfeae-3a40-4926-920c-a1ad8882663e)]
    [threading(both)]
    runtimeclass TargetDeviceFamily
    {
        static Boolean Exists(Int64 targetDeviceFamilyID);
        static Boolean ExistsByPackage(Package Package);
        static Boolean ExistsByPackageAndIndex(Package Package, Int32 Index);
        static Windows.Internal.StateRepository.TargetDeviceFamily Get(Int64 targetDeviceFamilyID);
        static Windows.Internal.StateRepository.TargetDeviceFamily TryGet(Int64 targetDeviceFamilyID);
        static Windows.Internal.StateRepository.TargetDeviceFamily GetByPackageAndIndex(Package Package, Int32 Index);
        static Windows.Internal.StateRepository.TargetDeviceFamily TryGetByPackageAndIndex(Package Package, Int32 Index);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.TargetDeviceFamily>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.TargetDeviceFamily>  FindByPackage(Package Package);
        static Windows.Internal.StateRepository.TargetDeviceFamily GetByPackage(Package package);
        TargetDeviceFamily();
        Int64 _TargetDeviceFamilyID{ get; };
        Int64 _TargetDeviceFamilyID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        Int32 Name{ get; };
        Int32 Name{ set; };
        UInt64 MinVersion{ get; };
        UInt64 MinVersion{ set; };
        UInt64 MaxVersion{ get; };
        UInt64 MaxVersion{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
