
















namespace Windows.Web.Http
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpVersion
    {
        None,
        Http10,
        Http11,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        Http20,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpCompletionOption
    {
        ResponseContentRead,
        ResponseHeadersRead,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpStatusCode
    {
        None,
        Continue = 100,
        SwitchingProtocols,
        Processing,
        Ok = 200,
        Created,
        Accepted,
        NonAuthoritativeInformation,
        NoContent,
        ResetContent,
        PartialContent,
        MultiStatus,
        AlreadyReported,
        IMUsed = 226,
        MultipleChoices = 300,
        MovedPermanently,
        Found,
        SeeOther,
        NotModified,
        UseProxy,
        TemporaryRedirect = 307,
        PermanentRedirect,
        BadRequest = 400,
        Unauthorized,
        PaymentRequired,
        Forbidden,
        NotFound,
        MethodNotAllowed,
        NotAcceptable,
        ProxyAuthenticationRequired,
        RequestTimeout,
        Conflict,
        Gone,
        LengthRequired,
        PreconditionFailed,
        RequestEntityTooLarge,
        RequestUriTooLong,
        UnsupportedMediaType,
        RequestedRangeNotSatisfiable,
        ExpectationFailed,
        UnprocessableEntity = 422,
        Locked,
        FailedDependency,
        UpgradeRequired = 426,
        PreconditionRequired = 428,
        TooManyRequests,
        RequestHeaderFieldsTooLarge = 431,
        InternalServerError = 500,
        NotImplemented,
        BadGateway,
        ServiceUnavailable,
        GatewayTimeout,
        HttpVersionNotSupported,
        VariantAlsoNegotiates,
        InsufficientStorage,
        LoopDetected,
        NotExtended = 510,
        NetworkAuthenticationRequired,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpProgressStage
    {
        None,
        DetectingProxy = 10,
        ResolvingName = 20,
        ConnectingToServer = 30,
        NegotiatingSsl = 40,
        SendingHeaders = 50,
        SendingContent = 60,
        WaitingForResponse = 70,
        ReceivingHeaders = 80,
        ReceivingContent = 90,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpResponseMessageSource
    {
        None,
        Cache,
        Network,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    struct HttpProgress
    {
        HttpProgressStage Stage;
        UInt64 BytesSent;
        Windows.Foundation.IReference <UInt64>  TotalBytesToSend;
        UInt64 BytesReceived;
        Windows.Foundation.IReference <UInt64>  TotalBytesToReceive;
        UInt32 Retries;
    };

}
namespace Windows.Web.Http.Filters
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(a4cb6dd5-0902-439e-bfd7-e12552b165ce)]
    interface IHttpFilter requires Windows.Foundation.IClosable
    {
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  SendRequestAsync(Windows.Web.Http.HttpRequestMessage request);
    };

}
namespace Windows.Web.Http
{
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.IHttpRequestMessage", f5762b3c-74d4-4811-b5dc-9f8b4e2f9abf)]
    [threading(both)]
    runtimeclass HttpRequestMessage
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HttpRequestMessage();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Web.Http.IHttpRequestMessageFactory", 5bac994e-3886-412e-aec3-52ec7f25616f)]
        {
            [method_name( "Create" )] HttpRequestMessage(HttpMethod method, Windows.Foundation.Uri uri);
        }
        Windows.Web.Http.IHttpContent Content{ get; };
        Windows.Web.Http.IHttpContent Content{ set; };
        Windows.Web.Http.Headers.HttpRequestHeaderCollection Headers{ get; };
        Windows.Web.Http.HttpMethod Method{ get; };
        Windows.Web.Http.HttpMethod Method{ set; };
        Windows.Foundation.Collections.IMap <String, Object>  Properties{ get; };
        Windows.Foundation.Uri RequestUri{ get; };
        Windows.Foundation.Uri RequestUri{ set; };
        Windows.Web.Http.HttpTransportInformation TransportInformation{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.IHttpResponseMessage", fee200fb-8664-44e0-95d9-42696199bffc)]
    [threading(both)]
    runtimeclass HttpResponseMessage
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HttpResponseMessage();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Web.Http.IHttpResponseMessageFactory", 52a8af99-f095-43da-b60f-7cfc2bc7ea2f)]
        {
            [method_name( "Create" )] HttpResponseMessage(HttpStatusCode statusCode);
        }
        Windows.Web.Http.IHttpContent Content{ get; };
        Windows.Web.Http.IHttpContent Content{ set; };
        Windows.Web.Http.Headers.HttpResponseHeaderCollection Headers{ get; };
        Boolean IsSuccessStatusCode{ get; };
        String ReasonPhrase{ get; };
        String ReasonPhrase{ set; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ set; };
        Windows.Web.Http.HttpResponseMessageSource Source{ get; };
        Windows.Web.Http.HttpResponseMessageSource Source{ set; };
        Windows.Web.Http.HttpStatusCode StatusCode{ get; };
        Windows.Web.Http.HttpStatusCode StatusCode{ set; };
        Windows.Web.Http.HttpVersion Version{ get; };
        Windows.Web.Http.HttpVersion Version{ set; };
        Windows.Web.Http.HttpResponseMessage EnsureSuccessStatusCode();
    }


    [uuid(6b14a441-fba7-4bd2-af0a-839de7c295da)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IHttpContent requires Windows.Foundation.IClosable
    {
        Windows.Web.Http.Headers.HttpContentHeaderCollection Headers{ get; };
        Windows.Foundation.IAsyncOperationWithProgress <UInt64, UInt64>  BufferAllAsync();
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Storage.Streams.IBuffer, UInt64>  ReadAsBufferAsync();
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Storage.Streams.IInputStream, UInt64>  ReadAsInputStreamAsync();
        Windows.Foundation.IAsyncOperationWithProgress <String, UInt64>  ReadAsStringAsync();
        [return_name("succeeded")] Boolean TryComputeLength(out UInt64 length);
        Windows.Foundation.IAsyncOperationWithProgress <UInt64, UInt64>  WriteToStreamAsync(Windows.Storage.Streams.IOutputStream outputStream);
    };

}
namespace Windows.Web.Http.Headers
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentHeaderCollection", 40612a44-47ae-4b7e-9124-69628b64aa18)]
    [threading(both)]
    runtimeclass HttpContentHeaderCollection
        : Windows.Foundation.Collections.IMap<String, String>
        , Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> >
        , Windows.Foundation.IStringable
    {
        HttpContentHeaderCollection();
        Windows.Web.Http.Headers.HttpContentDispositionHeaderValue ContentDisposition{ get; };
        Windows.Web.Http.Headers.HttpContentDispositionHeaderValue ContentDisposition{ set; };
        Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection ContentEncoding{ get; };
        Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection ContentLanguage{ get; };
        Windows.Foundation.IReference <UInt64>  ContentLength{ get; };
        Windows.Foundation.IReference <UInt64>  ContentLength{ set; };
        Windows.Foundation.Uri ContentLocation{ get; };
        Windows.Foundation.Uri ContentLocation{ set; };
        Windows.Storage.Streams.IBuffer ContentMD5{ get; };
        Windows.Storage.Streams.IBuffer ContentMD5{ set; };
        Windows.Web.Http.Headers.HttpContentRangeHeaderValue ContentRange{ get; };
        Windows.Web.Http.Headers.HttpContentRangeHeaderValue ContentRange{ set; };
        Windows.Web.Http.Headers.HttpMediaTypeHeaderValue ContentType{ get; };
        Windows.Web.Http.Headers.HttpMediaTypeHeaderValue ContentType{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Expires{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Expires{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  LastModified{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  LastModified{ set; };
        void Append(String name, String value);
        Boolean TryAppendWithoutValidation(String name, String value);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Web.Http.Headers.IHttpRequestHeaderCollection", af40329b-b544-469b-86b9-ac3d466fea36)]
    runtimeclass HttpRequestHeaderCollection
        : Windows.Foundation.Collections.IMap<String, String>
        , Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> >
        , Windows.Foundation.IStringable
    {
        Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection Accept{ get; };
        Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection AcceptEncoding{ get; };
        Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection AcceptLanguage{ get; };
        Windows.Web.Http.Headers.HttpCredentialsHeaderValue Authorization{ get; };
        Windows.Web.Http.Headers.HttpCredentialsHeaderValue Authorization{ set; };
        Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection CacheControl{ get; };
        Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection Connection{ get; };
        Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection Cookie{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Date{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Date{ set; };
        Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection Expect{ get; };
        String From{ get; };
        String From{ set; };
        Windows.Networking.HostName Host{ get; };
        Windows.Networking.HostName Host{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  IfModifiedSince{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  IfModifiedSince{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  IfUnmodifiedSince{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  IfUnmodifiedSince{ set; };
        Windows.Foundation.IReference <UInt32>  MaxForwards{ get; };
        Windows.Foundation.IReference <UInt32>  MaxForwards{ set; };
        Windows.Web.Http.Headers.HttpCredentialsHeaderValue ProxyAuthorization{ get; };
        Windows.Web.Http.Headers.HttpCredentialsHeaderValue ProxyAuthorization{ set; };
        Windows.Foundation.Uri Referer{ get; };
        Windows.Foundation.Uri Referer{ set; };
        Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection TransferEncoding{ get; };
        Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection UserAgent{ get; };
        void Append(String name, String value);
        Boolean TryAppendWithoutValidation(String name, String value);
    }

}
namespace Windows.Web.Http
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [static_name("Windows.Web.Http.IHttpMethodStatics", 64d171f0-d99a-4153-8dc6-d68cc4cce317)]
    [constructor_name("Windows.Web.Http.IHttpMethodFactory", 3c51d10d-36d7-40f8-a86d-e759caf2f83f)]
    [interface_name("Windows.Web.Http.IHttpMethod", 728d4022-700d-4fe0-afa5-40299c58dbfd)]
    [threading(both)]
    runtimeclass HttpMethod
        : Windows.Foundation.IStringable
    {
        static Windows.Web.Http.HttpMethod Delete{ get; };
        static Windows.Web.Http.HttpMethod Get{ get; };
        static Windows.Web.Http.HttpMethod Head{ get; };
        static Windows.Web.Http.HttpMethod Options{ get; };
        static Windows.Web.Http.HttpMethod Patch{ get; };
        static Windows.Web.Http.HttpMethod Post{ get; };
        static Windows.Web.Http.HttpMethod Put{ get; };
        [method_name( "Create" )] HttpMethod(String method);
        String Method{ get; };
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.IHttpTransportInformation", 70127198-c6a7-4ed0-833a-83fd8b8f178d)]
    runtimeclass HttpTransportInformation
        : Windows.Foundation.IStringable
    {
        Windows.Security.Cryptography.Certificates.Certificate ServerCertificate{ get; };
        Windows.Networking.Sockets.SocketSslErrorSeverity ServerCertificateErrorSeverity{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Security.Cryptography.Certificates.ChainValidationResult>  ServerCertificateErrors{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Security.Cryptography.Certificates.Certificate>  ServerIntermediateCertificates{ get; };
    }



}
namespace Windows.Web.Http.Headers
{
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.Headers.IHttpResponseHeaderCollection", 7a990969-fa3f-41ed-aac6-bf957975c16b)]
    runtimeclass HttpResponseHeaderCollection
        : Windows.Foundation.Collections.IMap<String, String>
        , Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> >
        , Windows.Foundation.IStringable
    {
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  Age{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  Age{ set; };
        Windows.Web.Http.Headers.HttpMethodHeaderValueCollection Allow{ get; };
        Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection CacheControl{ get; };
        Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection Connection{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Date{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Date{ set; };
        Windows.Foundation.Uri Location{ get; };
        Windows.Foundation.Uri Location{ set; };
        Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection ProxyAuthenticate{ get; };
        Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue RetryAfter{ get; };
        Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue RetryAfter{ set; };
        Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection TransferEncoding{ get; };
        Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection WwwAuthenticate{ get; };
        void Append(String name, String value);
        Boolean TryAppendWithoutValidation(String name, String value);
    }



}
namespace Windows.Web.Http
{
    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [interface_name("Windows.Web.Http.IHttpGetBufferResult", 53d08e7c-e209-404e-9a49-742d8236fd3a)]
    runtimeclass HttpGetBufferResult
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HRESULT ExtendedError{ get; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Web.Http.HttpResponseMessage ResponseMessage{ get; };
        Boolean Succeeded{ get; };
        Windows.Storage.Streams.IBuffer Value{ get; };
    }


    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.IHttpGetInputStreamResult", d5d63463-13aa-4ee0-be95-a0c39fe91203)]
    runtimeclass HttpGetInputStreamResult
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HRESULT ExtendedError{ get; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Web.Http.HttpResponseMessage ResponseMessage{ get; };
        Boolean Succeeded{ get; };
        Windows.Storage.Streams.IInputStream Value{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [interface_name("Windows.Web.Http.IHttpGetStringResult", 9bac466d-8509-4775-b16d-8953f47a7f5f)]
    runtimeclass HttpGetStringResult
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HRESULT ExtendedError{ get; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Web.Http.HttpResponseMessage ResponseMessage{ get; };
        Boolean Succeeded{ get; };
        String Value{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [dualapipartition(0x1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.IHttpRequestResult", 6acf4da8-b5eb-4a35-a902-4217fbe820c5)]
    runtimeclass HttpRequestResult
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        HRESULT ExtendedError{ get; };
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Web.Http.HttpResponseMessage ResponseMessage{ get; };
        Boolean Succeeded{ get; };
    }




    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpClientFactory", c30c4eca-e3fa-4f99-afb4-63cc65009462)]
    [interface_name("Windows.Web.Http.IHttpClient", 7fda1151-3574-4880-a8ba-e6b1e0061f3d)]
    [threading(both)]
    runtimeclass HttpClient
        : Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpClient(Windows.Web.Http.Filters.IHttpFilter filter);
        HttpClient();
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  DeleteAsync(Windows.Foundation.Uri uri);
        [method_name("GetAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  GetAsync(Windows.Foundation.Uri uri);
        [method_name("GetWithOptionAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  GetAsync(Windows.Foundation.Uri uri, HttpCompletionOption completionOption);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Storage.Streams.IBuffer, Windows.Web.Http.HttpProgress>  GetBufferAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Storage.Streams.IInputStream, Windows.Web.Http.HttpProgress>  GetInputStreamAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperationWithProgress <String, Windows.Web.Http.HttpProgress>  GetStringAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  PostAsync(Windows.Foundation.Uri uri, IHttpContent content);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  PutAsync(Windows.Foundation.Uri uri, IHttpContent content);
        [method_name("SendRequestAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  SendRequestAsync(HttpRequestMessage request);
        [method_name("SendRequestWithOptionAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpResponseMessage, Windows.Web.Http.HttpProgress>  SendRequestAsync(HttpRequestMessage request, HttpCompletionOption completionOption);
        Windows.Web.Http.Headers.HttpRequestHeaderCollection DefaultRequestHeaders{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.Web.Http.IHttpClient2", cdd83348-e8b7-4cec-b1b0-dc455fe72c92)]
        {
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TryDeleteAsync(Windows.Foundation.Uri uri);
            [method_name("TryGetAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TryGetAsync(Windows.Foundation.Uri uri);
            [method_name("TryGetAsync2")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TryGetAsync(Windows.Foundation.Uri uri, HttpCompletionOption completionOption);
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpGetBufferResult, Windows.Web.Http.HttpProgress>  TryGetBufferAsync(Windows.Foundation.Uri uri);
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpGetInputStreamResult, Windows.Web.Http.HttpProgress>  TryGetInputStreamAsync(Windows.Foundation.Uri uri);
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpGetStringResult, Windows.Web.Http.HttpProgress>  TryGetStringAsync(Windows.Foundation.Uri uri);
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TryPostAsync(Windows.Foundation.Uri uri, IHttpContent content);
            Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TryPutAsync(Windows.Foundation.Uri uri, IHttpContent content);
            [method_name("TrySendRequestAsync")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TrySendRequestAsync(HttpRequestMessage request);
            [method_name("TrySendRequestAsync2")] Windows.Foundation.IAsyncOperationWithProgress <Windows.Web.Http.HttpRequestResult, Windows.Web.Http.HttpProgress>  TrySendRequestAsync(HttpRequestMessage request, HttpCompletionOption completionOption);
        }
    }


}
namespace Windows.Web.Http.Headers
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [constructor_name("Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueFactory", 9915bbc4-456c-4e81-8295-b2ab3cbcf545)]
    [static_name("Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueStatics", 29c56067-5a37-46e4-b074-c5177d69ca66)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue", f2a2eedc-2629-4b49-9908-96a168e9365e)]
    [threading(both)]
    runtimeclass HttpContentDispositionHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpContentDispositionHeaderValue(String dispositionType);
        static Windows.Web.Http.Headers.HttpContentDispositionHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpContentDispositionHeaderValue contentDispositionHeaderValue);
        String DispositionType{ get; };
        String DispositionType{ set; };
        String FileName{ get; };
        String FileName{ set; };
        String FileNameStar{ get; };
        String FileNameStar{ set; };
        String Name{ get; };
        String Name{ set; };
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
        Windows.Foundation.IReference <UInt64>  Size{ get; };
        Windows.Foundation.IReference <UInt64>  Size{ set; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection", 7d221721-a6db-436e-8e83-91596192819c)]
    runtimeclass HttpContentCodingHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection", 9ebd7ca3-8219-44f6-9902-8c56dfd3340c)]
    runtimeclass HttpLanguageHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Globalization.Language>
        , Windows.Foundation.Collections.IIterable<Windows.Globalization.Language>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpContentRangeHeaderValueFactory", 3f5bd691-a03c-4456-9a6f-ef27ecd03cae)]
    [static_name("Windows.Web.Http.Headers.IHttpContentRangeHeaderValueStatics", 80a346ca-174c-4fae-821c-134cd294aa38)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentRangeHeaderValue", 04d967d3-a4f6-495c-9530-8579fcba8aa9)]
    [threading(both)]
    runtimeclass HttpContentRangeHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromLength" )] HttpContentRangeHeaderValue(UInt64 length);
        [method_name( "CreateFromRange" )] HttpContentRangeHeaderValue(UInt64 from, UInt64 to);
        [method_name( "CreateFromRangeWithLength" )] HttpContentRangeHeaderValue(UInt64 from, UInt64 to, UInt64 length);
        static Windows.Web.Http.Headers.HttpContentRangeHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpContentRangeHeaderValue contentRangeHeaderValue);
        Windows.Foundation.IReference <UInt64>  FirstBytePosition{ get; };
        Windows.Foundation.IReference <UInt64>  LastBytePosition{ get; };
        Windows.Foundation.IReference <UInt64>  Length{ get; };
        String Unit{ get; };
        String Unit{ set; };
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueFactory", bed747a8-cd17-42dd-9367-ab9c5b56dd7d)]
    [static_name("Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics", e04d83df-1d41-4d8c-a2de-6fd2ed87399b)]
    [interface_name("Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue", 16b28533-e728-4fcb-bdb0-08a431a14844)]
    [threading(both)]
    runtimeclass HttpMediaTypeHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpMediaTypeHeaderValue(String mediaType);
        static Windows.Web.Http.Headers.HttpMediaTypeHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpMediaTypeHeaderValue mediaTypeHeaderValue);
        String CharSet{ get; };
        String CharSet{ set; };
        String MediaType{ get; };
        String MediaType{ set; };
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
    }


    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection", 3c0c6b73-1342-4587-a056-18d02ff67165)]
    runtimeclass HttpMediaTypeWithQualityHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection", 7c0d753e-e899-4378-b5c8-412d820711cc)]
    runtimeclass HttpContentCodingWithQualityHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection", 885d5abd-4b4f-480a-89ce-8aedcee6e3a0)]
    runtimeclass HttpLanguageRangeWithQualityHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Web.Http.Headers.IHttpCredentialsHeaderValueFactory", f21d9e91-4d1c-4182-bfd1-34470a62f950)]
    [static_name("Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics", a69b2be6-ce8c-4443-a35a-1b727b131036)]
    [interface_name("Windows.Web.Http.Headers.IHttpCredentialsHeaderValue", c34cc3cb-542e-4177-a6c7-b674ce193fbf)]
    [threading(both)]
    runtimeclass HttpCredentialsHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromScheme" )] HttpCredentialsHeaderValue(String scheme);
        [method_name( "CreateFromSchemeWithToken" )] HttpCredentialsHeaderValue(String scheme, String token);
        static Windows.Web.Http.Headers.HttpCredentialsHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpCredentialsHeaderValue credentialsHeaderValue);
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
        String Scheme{ get; };
        String Token{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection", 9a586b89-d5d0-4fbe-bd9d-b5b3636811b4)]
    runtimeclass HttpCacheDirectiveHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpNameValueHeaderValue>
        , Windows.Foundation.IStringable
    {
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MaxAge{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MaxAge{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MaxStale{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MaxStale{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MinFresh{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  MinFresh{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  SharedMaxAge{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  SharedMaxAge{ set; };
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection", e4f56c1d-5142-4e00-8e0f-019509337629)]
    runtimeclass HttpConnectionOptionHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection", f3f44350-581e-4ecc-9f59-e507d04f06e6)]
    runtimeclass HttpCookiePairHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [interface_name("Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection", e78521b3-a0e2-4ac4-9e66-79706cb9fd58)]
    runtimeclass HttpExpectationHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpExpectationHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpExpectationHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection", 202c8c34-2c03-49b8-9665-73e27cb2fc79)]
    runtimeclass HttpTransferCodingHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection", 877df74a-d69b-44f8-ad4f-453af9c42ed0)]
    runtimeclass HttpProductInfoHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }



}
namespace Windows.Web.Http
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [constructor_name("Windows.Web.Http.IHttpCookieFactory", 6a0585a9-931c-4cd1-a96d-c21701785c5f)]
    [interface_name("Windows.Web.Http.IHttpCookie", 1f5488e2-cc2d-4779-86a7-88f10687d249)]
    [threading(both)]
    runtimeclass HttpCookie
        : Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpCookie(String name, String domain, String path);
        String Name{ get; };
        String Domain{ get; };
        String Path{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Expires{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Expires{ set; };
        Boolean HttpOnly{ get; };
        Boolean HttpOnly{ set; };
        Boolean Secure{ get; };
        Boolean Secure{ set; };
        String Value{ get; };
        String Value{ set; };
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass HttpCookieCollection
        : [default]Windows.Foundation.Collections.IVectorView<Windows.Web.Http.HttpCookie>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.HttpCookie>
    {
    }






}
namespace Windows.Web.Http.Headers
{
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection", 43bc3ff4-6119-4adf-938c-34bfffcf92ed)]
    runtimeclass HttpMethodHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.HttpMethod>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.HttpMethod>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection", ca9e5f81-aee0-4353-a10b-e625babd64c2)]
    runtimeclass HttpChallengeHeaderValueCollection
        : Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpChallengeHeaderValue>
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.Headers.HttpChallengeHeaderValue>
        , Windows.Foundation.IStringable
    {
        void ParseAdd(String input);
        Boolean TryParseAdd(String input);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValueStatics", 7c2659a8-6672-4e90-9a9a-f39766f7f576)]
    [interface_name("Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue", eafcaa6a-c4dc-49e2-a27d-043adf5867a3)]
    [threading(both)]
    runtimeclass HttpDateOrDeltaHeaderValue
        : Windows.Foundation.IStringable
    {
        static Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpDateOrDeltaHeaderValue dateOrDeltaHeaderValue);
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Date{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  Delta{ get; };
    }


}
namespace Windows.Web.Http
{
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpStringContentFactory", 46649d5b-2e93-48eb-8e61-19677878e57f)]
    [threading(both)]
    runtimeclass HttpStringContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        [method_name( "CreateFromString" )] HttpStringContent(String content);
        [method_name( "CreateFromStringWithEncoding" )] HttpStringContent(String content, Windows.Storage.Streams.UnicodeEncoding encoding);
        [method_name( "CreateFromStringWithEncodingAndMediaType" )] HttpStringContent(String content, Windows.Storage.Streams.UnicodeEncoding encoding, String mediaType);
    }


    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpBufferContentFactory", bc20c193-c41f-4ff7-9123-6435736eadc2)]
    [threading(both)]
    runtimeclass HttpBufferContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        [method_name( "CreateFromBuffer" )] HttpBufferContent(Windows.Storage.Streams.IBuffer content);
        [method_name( "CreateFromBufferWithOffset" )] HttpBufferContent(Windows.Storage.Streams.IBuffer content, UInt32 offset, UInt32 count);
    }


    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpStreamContentFactory", f3e64d9d-f725-407e-942f-0eda189809f4)]
    [threading(both)]
    runtimeclass HttpStreamContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        [method_name( "CreateFromInputStream" )] HttpStreamContent(Windows.Storage.Streams.IInputStream content);
    }


    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpFormUrlEncodedContentFactory", 43f0138c-2f73-4302-b5f3-eae9238a5e01)]
    [threading(both)]
    runtimeclass HttpFormUrlEncodedContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpFormUrlEncodedContent(Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <String, String> >  content);
    }



    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Web.Http.IHttpMultipartContentFactory", 7eb42e62-0222-4f20-b372-47d5db5d33b4)]
    [threading(both)]
    runtimeclass HttpMultipartContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.IHttpContent>
        , Windows.Foundation.IStringable
    {
        [method_name( "CreateWithSubtype" )] HttpMultipartContent(String subtype);
        [method_name( "CreateWithSubtypeAndBoundary" )] HttpMultipartContent(String subtype, String boundary);
        HttpMultipartContent();

        [interface_name("Windows.Web.Http.IHttpMultipartContent", df916aff-9926-4ac9-aaf1-e0d04ef09bb9)]
        {
            void Add(IHttpContent content);
        }
    }



    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.IHttpMultipartFormDataContentFactory", a04d7311-5017-4622-93a8-49b24a4fcbfc)]
    [threading(both)]
    runtimeclass HttpMultipartFormDataContent
        : [default]Windows.Web.Http.IHttpContent
        , Windows.Foundation.IClosable
        , Windows.Foundation.Collections.IIterable<Windows.Web.Http.IHttpContent>
        , Windows.Foundation.IStringable
    {
        [method_name( "CreateWithBoundary" )] HttpMultipartFormDataContent(String boundary);
        HttpMultipartFormDataContent();

        [interface_name("Windows.Web.Http.IHttpMultipartFormDataContent", 64d337e2-e967-4624-b6d1-cf74604a4a42)]
        {
            [method_name("Add")] void Add(IHttpContent content);
            [method_name("AddWithName")] void Add(IHttpContent content, String name);
            [method_name("AddWithNameAndFileName")] void Add(IHttpContent content, String name, String fileName);
        }
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.IHttpCookieManager", 7a431780-cd4f-4e57-a84a-5b0a53d6bb96)]
    runtimeclass HttpCookieManager
    {
        [method_name("SetCookie")] Boolean SetCookie(HttpCookie cookie);
        [method_name("SetCookieWithThirdParty")] Boolean SetCookie(HttpCookie cookie, Boolean thirdParty);
        void DeleteCookie(HttpCookie cookie);
        Windows.Web.Http.HttpCookieCollection GetCookies(Windows.Foundation.Uri uri);
    }

}
namespace Windows.Web.Http.Filters
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpCacheReadBehavior
    {
        Default,
        MostRecent,
        OnlyFromCache,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        NoCache,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum HttpCacheWriteBehavior
    {
        Default,
        NoCache,
    };

    [contract(Windows.Foundation.UniversalApiContract, 2)]
    enum HttpCookieUsageBehavior
    {
        Default,
        NoCookies,
    };


    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Web.Http.Filters.IHttpCacheControl", c77e1cb4-3cea-4eb5-ac85-04e186e63ab7)]
    runtimeclass HttpCacheControl
    {
        Windows.Web.Http.Filters.HttpCacheReadBehavior ReadBehavior{ get; };
        Windows.Web.Http.Filters.HttpCacheReadBehavior ReadBehavior{ set; };
        Windows.Web.Http.Filters.HttpCacheWriteBehavior WriteBehavior{ get; };
        Windows.Web.Http.Filters.HttpCacheWriteBehavior WriteBehavior{ set; };
    }




    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilter", 71c89b09-e131-4b54-a53c-eb43ff37e9bb)]
    [threading(both)]
    runtimeclass HttpBaseProtocolFilter
        : Windows.Web.Http.Filters.IHttpFilter
        , Windows.Foundation.IClosable
    {
        HttpBaseProtocolFilter();

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilterStatics", 6d4dee0c-e908-494e-b5a3-1263c9b8242a)]
        {
            static Windows.Web.Http.Filters.HttpBaseProtocolFilter CreateForUser(Windows.System.User user);
        }
        Boolean AllowAutoRedirect{ get; };
        Boolean AllowAutoRedirect{ set; };
        Boolean AllowUI{ get; };
        Boolean AllowUI{ set; };
        Boolean AutomaticDecompression{ get; };
        Boolean AutomaticDecompression{ set; };
        Windows.Web.Http.Filters.HttpCacheControl CacheControl{ get; };
        Windows.Web.Http.HttpCookieManager CookieManager{ get; };
        Windows.Security.Cryptography.Certificates.Certificate ClientCertificate{ get; };
        Windows.Security.Cryptography.Certificates.Certificate ClientCertificate{ set; };
        Windows.Foundation.Collections.IVector <Windows.Security.Cryptography.Certificates.ChainValidationResult>  IgnorableServerCertificateErrors{ get; };
        UInt32 MaxConnectionsPerServer{ get; };
        UInt32 MaxConnectionsPerServer{ set; };
        Windows.Security.Credentials.PasswordCredential ProxyCredential{ get; };
        Windows.Security.Credentials.PasswordCredential ProxyCredential{ set; };
        Windows.Security.Credentials.PasswordCredential ServerCredential{ get; };
        Windows.Security.Credentials.PasswordCredential ServerCredential{ set; };
        Boolean UseProxy{ get; };
        Boolean UseProxy{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilter2", 2ec30013-9427-4900-a017-fa7da3b5c9ae)]
        {
            Windows.Web.Http.HttpVersion MaxVersion{ get; };
            Windows.Web.Http.HttpVersion MaxVersion{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [interface_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilter3", d43f4d4c-bd42-43ae-8717-ad2c8f4b2937)]
        {
            Windows.Web.Http.Filters.HttpCookieUsageBehavior CookieUsageBehavior{ get; };
            Windows.Web.Http.Filters.HttpCookieUsageBehavior CookieUsageBehavior{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilter4", 9fe36ccf-2983-4893-941f-eb518ca8cef9)]
        {
            event Windows.Foundation.TypedEventHandler <Windows.Web.Http.Filters.HttpBaseProtocolFilter, Windows.Web.Http.Filters.HttpServerCustomValidationRequestedEventArgs>  ServerCustomValidationRequested;
            void ClearAuthenticationCache();
        }

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [interface_name("Windows.Web.Http.Filters.IHttpBaseProtocolFilter5", 416e4993-31e3-4816-bf09-e018ee8dc1f5)]
        {
            Windows.System.User User{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Web.Http.Filters.IHttpServerCustomValidationRequestedEventArgs", 3165fe32-e7dd-48b7-a361-939c750e63cc)]
    runtimeclass HttpServerCustomValidationRequestedEventArgs
    {
        Windows.Web.Http.HttpRequestMessage RequestMessage{ get; };
        Windows.Security.Cryptography.Certificates.Certificate ServerCertificate{ get; };
        Windows.Networking.Sockets.SocketSslErrorSeverity ServerCertificateErrorSeverity{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Security.Cryptography.Certificates.ChainValidationResult>  ServerCertificateErrors{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Security.Cryptography.Certificates.Certificate>  ServerIntermediateCertificates{ get; };
        void Reject();
        Windows.Foundation.Deferral GetDeferral();
    }






}
namespace Windows.Web.Http.Headers
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [constructor_name("Windows.Web.Http.Headers.IHttpNameValueHeaderValueFactory", 770e2267-cbf8-4736-a925-93fbe10c7ca8)]
    [static_name("Windows.Web.Http.Headers.IHttpNameValueHeaderValueStatics", ffd4030f-1130-4152-8659-256909a9d115)]
    [interface_name("Windows.Web.Http.Headers.IHttpNameValueHeaderValue", d8ba7463-5b9a-4d1b-93f9-aa5b44ecfddf)]
    [threading(both)]
    runtimeclass HttpNameValueHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromName" )] HttpNameValueHeaderValue(String name);
        [return_name("nameValueHeaderValue")] [method_name( "CreateFromNameWithValue" )] HttpNameValueHeaderValue(String name, String value);
        static Windows.Web.Http.Headers.HttpNameValueHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpNameValueHeaderValue nameValueHeaderValue);
        String Name{ get; };
        String Value{ get; };
        String Value{ set; };
    }
































    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpChallengeHeaderValueFactory", c452c451-d99c-40aa-9399-90eeb98fc613)]
    [static_name("Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics", f3d38a72-fc01-4d01-a008-fcb7c459d635)]
    [interface_name("Windows.Web.Http.Headers.IHttpChallengeHeaderValue", 393361af-0f7d-4820-9fdd-a2b956eeaeab)]
    [threading(both)]
    runtimeclass HttpChallengeHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromScheme" )] HttpChallengeHeaderValue(String scheme);
        [method_name( "CreateFromSchemeWithToken" )] HttpChallengeHeaderValue(String scheme, String token);
        static Windows.Web.Http.Headers.HttpChallengeHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpChallengeHeaderValue challengeHeaderValue);
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
        String Scheme{ get; };
        String Token{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueFactory", d93ccc1e-0b7d-4c3f-a58d-a2a1bdeabc0a)]
    [static_name("Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueStatics", aaa75d37-a946-4b1f-85af-48b68b3c50bd)]
    [interface_name("Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue", cb4af27a-4e90-45eb-8dcd-fd1408f4c44f)]
    [threading(both)]
    runtimeclass HttpConnectionOptionHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "Create" )] HttpConnectionOptionHeaderValue(String token);
        static Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpConnectionOptionHeaderValue connectionOptionHeaderValue);
        String Token{ get; };
    }




    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Web.Http.Headers.IHttpContentCodingHeaderValueStatics", 94d8602e-f9bf-42f7-aa46-ed272a41e212)]
    [constructor_name("Windows.Web.Http.Headers.IHttpContentCodingHeaderValueFactory", c53d2bd7-332b-4350-8510-2e67a2289a5a)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentCodingHeaderValue", bcf7f92a-9376-4d85-bccc-9f4f9acab434)]
    [threading(both)]
    runtimeclass HttpContentCodingHeaderValue
        : Windows.Foundation.IStringable
    {
        static Windows.Web.Http.Headers.HttpContentCodingHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpContentCodingHeaderValue contentCodingHeaderValue);
        [method_name( "Create" )] HttpContentCodingHeaderValue(String contentCoding);
        String ContentCoding{ get; };
    }




    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Web.Http.Headers.IHttpCookiePairHeaderValueFactory", 635e326f-146f-4f56-aa21-2cb7d6d58b1e)]
    [static_name("Windows.Web.Http.Headers.IHttpCookiePairHeaderValueStatics", 6e866d48-06af-4462-8158-99388d5dca81)]
    [interface_name("Windows.Web.Http.Headers.IHttpCookiePairHeaderValue", cbd46217-4b29-412b-bd90-b3d814ab8e1b)]
    [threading(both)]
    runtimeclass HttpCookiePairHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromName" )] HttpCookiePairHeaderValue(String name);
        [return_name("cookiePairHeaderValue")] [method_name( "CreateFromNameWithValue" )] HttpCookiePairHeaderValue(String name, String value);
        static Windows.Web.Http.Headers.HttpCookiePairHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpCookiePairHeaderValue cookiePairHeaderValue);
        String Name{ get; };
        String Value{ get; };
        String Value{ set; };
    }




    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpExpectationHeaderValueFactory", 4ea275cb-d53e-4868-8856-1e21a5030dc0)]
    [static_name("Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics", 3019abe2-cfe5-473b-a57f-fba5b14eb257)]
    [interface_name("Windows.Web.Http.Headers.IHttpExpectationHeaderValue", 4ce585cd-3a99-43af-a2e6-ec232fea9658)]
    [threading(both)]
    runtimeclass HttpExpectationHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromName" )] HttpExpectationHeaderValue(String name);
        [return_name("expectationHeaderValue")] [method_name( "CreateFromNameWithValue" )] HttpExpectationHeaderValue(String name, String value);
        static Windows.Web.Http.Headers.HttpExpectationHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpExpectationHeaderValue expectationHeaderValue);
        String Name{ get; };
        String Value{ get; };
        String Value{ set; };
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueFactory", 7bb83970-780f-4c83-9fe4-dc3087f6bd55)]
    [static_name("Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics", 2541e146-f308-46f5-b695-42f54024ec68)]
    [interface_name("Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue", 7256e102-0080-4db4-a083-7de7b2e5ba4c)]
    [threading(both)]
    runtimeclass HttpLanguageRangeWithQualityHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromLanguageRange" )] HttpLanguageRangeWithQualityHeaderValue(String languageRange);
        [method_name( "CreateFromLanguageRangeWithQuality" )] HttpLanguageRangeWithQualityHeaderValue(String languageRange, Double quality);
        static Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue);
        String LanguageRange{ get; };
        Windows.Foundation.IReference <Double>  Quality{ get; };
    }




    [dualapipartition(0x6030000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueFactory", 4c6d20f4-9457-44e6-a323-d122b958780b)]
    [static_name("Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics", 5b070cd9-b560-4fc8-9835-7e6c0a657b24)]
    [interface_name("Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue", 188d5e32-76be-44a0-b1cd-2074bded2dde)]
    [threading(both)]
    runtimeclass HttpMediaTypeWithQualityHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromMediaType" )] HttpMediaTypeWithQualityHeaderValue(String mediaType);
        [method_name( "CreateFromMediaTypeWithQuality" )] HttpMediaTypeWithQualityHeaderValue(String mediaType, Double quality);
        static Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue);
        String CharSet{ get; };
        String CharSet{ set; };
        String MediaType{ get; };
        String MediaType{ set; };
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
        Windows.Foundation.IReference <Double>  Quality{ get; };
        Windows.Foundation.IReference <Double>  Quality{ set; };
    }




    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpProductHeaderValueFactory", 611aa4f5-82bc-42fb-977b-dc00536e5e86)]
    [static_name("Windows.Web.Http.Headers.IHttpProductHeaderValueStatics", 90c33e29-befc-4337-be62-49f097975f53)]
    [interface_name("Windows.Web.Http.Headers.IHttpProductHeaderValue", f4feee03-ebd4-4160-b9ff-807c5183b6e6)]
    [threading(both)]
    runtimeclass HttpProductHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromName" )] HttpProductHeaderValue(String productName);
        [method_name( "CreateFromNameWithVersion" )] HttpProductHeaderValue(String productName, String productVersion);
        static Windows.Web.Http.Headers.HttpProductHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpProductHeaderValue productHeaderValue);
        String Name{ get; };
        String Version{ get; };
    }




    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Web.Http.Headers.IHttpProductInfoHeaderValueStatics", db7fd857-327a-4e73-81e5-7059a302b042)]
    [constructor_name("Windows.Web.Http.Headers.IHttpProductInfoHeaderValueFactory", 24220fbe-eabe-4464-b460-ec010b7c41e2)]
    [interface_name("Windows.Web.Http.Headers.IHttpProductInfoHeaderValue", 1b1a8732-4c35-486a-966f-646489198e4d)]
    [threading(both)]
    runtimeclass HttpProductInfoHeaderValue
        : Windows.Foundation.IStringable
    {
        static Windows.Web.Http.Headers.HttpProductInfoHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpProductInfoHeaderValue productInfoHeaderValue);
        [method_name( "CreateFromComment" )] HttpProductInfoHeaderValue(String productComment);
        [method_name( "CreateFromNameWithVersion" )] HttpProductInfoHeaderValue(String productName, String productVersion);
        Windows.Web.Http.Headers.HttpProductHeaderValue Product{ get; };
        String Comment{ get; };
    }




    [dualapipartition(0x6030000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueFactory", c45eee1a-c553-46fc-ade2-d75c1d53df7b)]
    [static_name("Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics", e8c9357c-8f89-4801-8e75-4c9abfc3de71)]
    [interface_name("Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue", 94531cd5-8b13-4d73-8651-f76b38f88495)]
    [threading(both)]
    runtimeclass HttpContentCodingWithQualityHeaderValue
        : Windows.Foundation.IStringable
    {
        [method_name( "CreateFromValue" )] HttpContentCodingWithQualityHeaderValue(String contentCoding);
        [method_name( "CreateFromValueWithQuality" )] HttpContentCodingWithQualityHeaderValue(String contentCoding, Double quality);
        static Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue);
        String ContentCoding{ get; };
        Windows.Foundation.IReference <Double>  Quality{ get; };
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0x6030000)]
    [static_name("Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueStatics", 6ab8892a-1a98-4d32-a906-7470a9875ce5)]
    [constructor_name("Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueFactory", bb62dffc-e361-4f08-8e4f-c9e723de703b)]
    [interface_name("Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue", 436f32f9-3ded-42bd-b38a-5496a2511ce6)]
    [threading(both)]
    runtimeclass HttpTransferCodingHeaderValue
        : Windows.Foundation.IStringable
    {
        static Windows.Web.Http.Headers.HttpTransferCodingHeaderValue Parse(String input);
        [return_name("succeeded")] static Boolean TryParse(String input, out HttpTransferCodingHeaderValue transferCodingHeaderValue);
        [method_name( "Create" )] HttpTransferCodingHeaderValue(String input);
        Windows.Foundation.Collections.IVector <Windows.Web.Http.Headers.HttpNameValueHeaderValue>  Parameters{ get; };
        String Value{ get; };
    }


}
