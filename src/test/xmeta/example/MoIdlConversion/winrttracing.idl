







namespace Windows.Foundation.Diagnostics
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum LoggingLevel
    {
        Verbose,
        Information,
        Warning,
        Error,
        Critical,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum LoggingOpcode
    {
        Info,
        Start,
        Stop,
        Reply = 6,
        Resume,
        Suspend,
        Send,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum LoggingFieldFormat
    {
        Default,
        Hidden,
        String,
        Boolean,
        Hexadecimal,
        ProcessId,
        ThreadId,
        Port,
        Ipv4Address,
        Ipv6Address,
        SocketAddress,
        Xml,
        Json,
        Win32Error,
        NTStatus,
        HResult,
        FileTime,
        Signed,
        Unsigned,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Foundation.Diagnostics.ILoggingOptionsFactory", d713c6cb-98ab-464b-9f22-a3268478368a)]
    [interface_name("Windows.Foundation.Diagnostics.ILoggingOptions", 90bc7850-0192-4f5d-ac26-006adaca12d8)]
    [threading(both)]
    runtimeclass LoggingOptions
    {
        [method_name( "CreateWithKeywords" )] LoggingOptions(Int64 keywords);
        LoggingOptions();
        Int64 Keywords{ get; };
        Int64 Keywords{ set; };
        Int32 Tags{ get; };
        Int32 Tags{ set; };
        Int16 Task{ get; };
        Int16 Task{ set; };
        Windows.Foundation.Diagnostics.LoggingOpcode Opcode{ get; };
        Windows.Foundation.Diagnostics.LoggingOpcode Opcode{ set; };
        Guid ActivityId{ get; };
        Guid ActivityId{ set; };
        Guid RelatedActivityId{ get; };
        Guid RelatedActivityId{ set; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Foundation.Diagnostics.ILoggingChannelOptions", c3e847ff-0ebb-4a53-8c54-dec24926cb2c)]
    [threading(both)]
    runtimeclass LoggingChannelOptions
    {
        LoggingChannelOptions();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Foundation.Diagnostics.ILoggingChannelOptionsFactory", a93151da-7faf-4191-8755-5e86dc65d896)]
        {
            [method_name( "Create" )] LoggingChannelOptions(Guid group);
        }
        Guid Group{ get; };
        Guid Group{ set; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Foundation.Diagnostics.ILoggingFields", d7f6b7af-762d-4579-83bd-52c23bc333bc)]
    [threading(both)]
    runtimeclass LoggingFields
    {
        LoggingFields();
        void Clear();
        [method_name("BeginStruct")] void BeginStruct(String name);
        [method_name("BeginStructWithTags")] void BeginStruct(String name, Int32 tags);
        void EndStruct();
        [method_name("AddEmpty")] void AddEmpty(String name);
        [method_name("AddEmptyWithFormat")] void AddEmpty(String name, LoggingFieldFormat format);
        [method_name("AddEmptyWithFormatAndTags")] void AddEmpty(String name, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt8")] void AddUInt8(String name, UInt8 value);
        [method_name("AddUInt8WithFormat")] void AddUInt8(String name, UInt8 value, LoggingFieldFormat format);
        [method_name("AddUInt8WithFormatAndTags")] void AddUInt8(String name, UInt8 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt8Array")] void AddUInt8Array(String name, UInt8[] value);
        [method_name("AddUInt8ArrayWithFormat")] void AddUInt8Array(String name, UInt8[] value, LoggingFieldFormat format);
        [method_name("AddUInt8ArrayWithFormatAndTags")] void AddUInt8Array(String name, UInt8[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt16")] void AddInt16(String name, Int16 value);
        [method_name("AddInt16WithFormat")] void AddInt16(String name, Int16 value, LoggingFieldFormat format);
        [method_name("AddInt16WithFormatAndTags")] void AddInt16(String name, Int16 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt16Array")] void AddInt16Array(String name, Int16[] value);
        [method_name("AddInt16ArrayWithFormat")] void AddInt16Array(String name, Int16[] value, LoggingFieldFormat format);
        [method_name("AddInt16ArrayWithFormatAndTags")] void AddInt16Array(String name, Int16[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt16")] void AddUInt16(String name, UInt16 value);
        [method_name("AddUInt16WithFormat")] void AddUInt16(String name, UInt16 value, LoggingFieldFormat format);
        [method_name("AddUInt16WithFormatAndTags")] void AddUInt16(String name, UInt16 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt16Array")] void AddUInt16Array(String name, UInt16[] value);
        [method_name("AddUInt16ArrayWithFormat")] void AddUInt16Array(String name, UInt16[] value, LoggingFieldFormat format);
        [method_name("AddUInt16ArrayWithFormatAndTags")] void AddUInt16Array(String name, UInt16[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt32")] void AddInt32(String name, Int32 value);
        [method_name("AddInt32WithFormat")] void AddInt32(String name, Int32 value, LoggingFieldFormat format);
        [method_name("AddInt32WithFormatAndTags")] void AddInt32(String name, Int32 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt32Array")] void AddInt32Array(String name, Int32[] value);
        [method_name("AddInt32ArrayWithFormat")] void AddInt32Array(String name, Int32[] value, LoggingFieldFormat format);
        [method_name("AddInt32ArrayWithFormatAndTags")] void AddInt32Array(String name, Int32[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt32")] void AddUInt32(String name, UInt32 value);
        [method_name("AddUInt32WithFormat")] void AddUInt32(String name, UInt32 value, LoggingFieldFormat format);
        [method_name("AddUInt32WithFormatAndTags")] void AddUInt32(String name, UInt32 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt32Array")] void AddUInt32Array(String name, UInt32[] value);
        [method_name("AddUInt32ArrayWithFormat")] void AddUInt32Array(String name, UInt32[] value, LoggingFieldFormat format);
        [method_name("AddUInt32ArrayWithFormatAndTags")] void AddUInt32Array(String name, UInt32[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt64")] void AddInt64(String name, Int64 value);
        [method_name("AddInt64WithFormat")] void AddInt64(String name, Int64 value, LoggingFieldFormat format);
        [method_name("AddInt64WithFormatAndTags")] void AddInt64(String name, Int64 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddInt64Array")] void AddInt64Array(String name, Int64[] value);
        [method_name("AddInt64ArrayWithFormat")] void AddInt64Array(String name, Int64[] value, LoggingFieldFormat format);
        [method_name("AddInt64ArrayWithFormatAndTags")] void AddInt64Array(String name, Int64[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt64")] void AddUInt64(String name, UInt64 value);
        [method_name("AddUInt64WithFormat")] void AddUInt64(String name, UInt64 value, LoggingFieldFormat format);
        [method_name("AddUInt64WithFormatAndTags")] void AddUInt64(String name, UInt64 value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddUInt64Array")] void AddUInt64Array(String name, UInt64[] value);
        [method_name("AddUInt64ArrayWithFormat")] void AddUInt64Array(String name, UInt64[] value, LoggingFieldFormat format);
        [method_name("AddUInt64ArrayWithFormatAndTags")] void AddUInt64Array(String name, UInt64[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddSingle")] void AddSingle(String name, Single value);
        [method_name("AddSingleWithFormat")] void AddSingle(String name, Single value, LoggingFieldFormat format);
        [method_name("AddSingleWithFormatAndTags")] void AddSingle(String name, Single value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddSingleArray")] void AddSingleArray(String name, Single[] value);
        [method_name("AddSingleArrayWithFormat")] void AddSingleArray(String name, Single[] value, LoggingFieldFormat format);
        [method_name("AddSingleArrayWithFormatAndTags")] void AddSingleArray(String name, Single[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddDouble")] void AddDouble(String name, Double value);
        [method_name("AddDoubleWithFormat")] void AddDouble(String name, Double value, LoggingFieldFormat format);
        [method_name("AddDoubleWithFormatAndTags")] void AddDouble(String name, Double value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddDoubleArray")] void AddDoubleArray(String name, Double[] value);
        [method_name("AddDoubleArrayWithFormat")] void AddDoubleArray(String name, Double[] value, LoggingFieldFormat format);
        [method_name("AddDoubleArrayWithFormatAndTags")] void AddDoubleArray(String name, Double[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddChar16")] void AddChar16(String name, Char value);
        [method_name("AddChar16WithFormat")] void AddChar16(String name, Char value, LoggingFieldFormat format);
        [method_name("AddChar16WithFormatAndTags")] void AddChar16(String name, Char value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddChar16Array")] void AddChar16Array(String name, Char[] value);
        [method_name("AddChar16ArrayWithFormat")] void AddChar16Array(String name, Char[] value, LoggingFieldFormat format);
        [method_name("AddChar16ArrayWithFormatAndTags")] void AddChar16Array(String name, Char[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddBoolean")] void AddBoolean(String name, Boolean value);
        [method_name("AddBooleanWithFormat")] void AddBoolean(String name, Boolean value, LoggingFieldFormat format);
        [method_name("AddBooleanWithFormatAndTags")] void AddBoolean(String name, Boolean value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddBooleanArray")] void AddBooleanArray(String name, Boolean[] value);
        [method_name("AddBooleanArrayWithFormat")] void AddBooleanArray(String name, Boolean[] value, LoggingFieldFormat format);
        [method_name("AddBooleanArrayWithFormatAndTags")] void AddBooleanArray(String name, Boolean[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddString")] void AddString(String name, String value);
        [method_name("AddStringWithFormat")] void AddString(String name, String value, LoggingFieldFormat format);
        [method_name("AddStringWithFormatAndTags")] void AddString(String name, String value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddStringArray")] void AddStringArray(String name, String[] value);
        [method_name("AddStringArrayWithFormat")] void AddStringArray(String name, String[] value, LoggingFieldFormat format);
        [method_name("AddStringArrayWithFormatAndTags")] void AddStringArray(String name, String[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddGuid")] void AddGuid(String name, Guid value);
        [method_name("AddGuidWithFormat")] void AddGuid(String name, Guid value, LoggingFieldFormat format);
        [method_name("AddGuidWithFormatAndTags")] void AddGuid(String name, Guid value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddGuidArray")] void AddGuidArray(String name, Guid[] value);
        [method_name("AddGuidArrayWithFormat")] void AddGuidArray(String name, Guid[] value, LoggingFieldFormat format);
        [method_name("AddGuidArrayWithFormatAndTags")] void AddGuidArray(String name, Guid[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddDateTime")] void AddDateTime(String name, Windows.Foundation.DateTime value);
        [method_name("AddDateTimeWithFormat")] void AddDateTime(String name, Windows.Foundation.DateTime value, LoggingFieldFormat format);
        [method_name("AddDateTimeWithFormatAndTags")] void AddDateTime(String name, Windows.Foundation.DateTime value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddDateTimeArray")] void AddDateTimeArray(String name, Windows.Foundation.DateTime[] value);
        [method_name("AddDateTimeArrayWithFormat")] void AddDateTimeArray(String name, Windows.Foundation.DateTime[] value, LoggingFieldFormat format);
        [method_name("AddDateTimeArrayWithFormatAndTags")] void AddDateTimeArray(String name, Windows.Foundation.DateTime[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddTimeSpan")] void AddTimeSpan(String name, Windows.Foundation.TimeSpan value);
        [method_name("AddTimeSpanWithFormat")] void AddTimeSpan(String name, Windows.Foundation.TimeSpan value, LoggingFieldFormat format);
        [method_name("AddTimeSpanWithFormatAndTags")] void AddTimeSpan(String name, Windows.Foundation.TimeSpan value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddTimeSpanArray")] void AddTimeSpanArray(String name, Windows.Foundation.TimeSpan[] value);
        [method_name("AddTimeSpanArrayWithFormat")] void AddTimeSpanArray(String name, Windows.Foundation.TimeSpan[] value, LoggingFieldFormat format);
        [method_name("AddTimeSpanArrayWithFormatAndTags")] void AddTimeSpanArray(String name, Windows.Foundation.TimeSpan[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddPoint")] void AddPoint(String name, Windows.Foundation.Point value);
        [method_name("AddPointWithFormat")] void AddPoint(String name, Windows.Foundation.Point value, LoggingFieldFormat format);
        [method_name("AddPointWithFormatAndTags")] void AddPoint(String name, Windows.Foundation.Point value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddPointArray")] void AddPointArray(String name, Windows.Foundation.Point[] value);
        [method_name("AddPointArrayWithFormat")] void AddPointArray(String name, Windows.Foundation.Point[] value, LoggingFieldFormat format);
        [method_name("AddPointArrayWithFormatAndTags")] void AddPointArray(String name, Windows.Foundation.Point[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddSize")] void AddSize(String name, Windows.Foundation.Size value);
        [method_name("AddSizeWithFormat")] void AddSize(String name, Windows.Foundation.Size value, LoggingFieldFormat format);
        [method_name("AddSizeWithFormatAndTags")] void AddSize(String name, Windows.Foundation.Size value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddSizeArray")] void AddSizeArray(String name, Windows.Foundation.Size[] value);
        [method_name("AddSizeArrayWithFormat")] void AddSizeArray(String name, Windows.Foundation.Size[] value, LoggingFieldFormat format);
        [method_name("AddSizeArrayWithFormatAndTags")] void AddSizeArray(String name, Windows.Foundation.Size[] value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddRect")] void AddRect(String name, Windows.Foundation.Rect value);
        [method_name("AddRectWithFormat")] void AddRect(String name, Windows.Foundation.Rect value, LoggingFieldFormat format);
        [method_name("AddRectWithFormatAndTags")] void AddRect(String name, Windows.Foundation.Rect value, LoggingFieldFormat format, Int32 tags);
        [method_name("AddRectArray")] void AddRectArray(String name, Windows.Foundation.Rect[] value);
        [method_name("AddRectArrayWithFormat")] void AddRectArray(String name, Windows.Foundation.Rect[] value, LoggingFieldFormat format);
        [method_name("AddRectArrayWithFormatAndTags")] void AddRectArray(String name, Windows.Foundation.Rect[] value, LoggingFieldFormat format, Int32 tags);
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(65f16c35-e388-4e26-b17a-f51cd3a83916)]
    interface ILoggingTarget
    {
        [method_name("IsEnabled")] Boolean IsEnabled();
        [method_name("IsEnabledWithLevel")] Boolean IsEnabled(LoggingLevel level);
        [method_name("IsEnabledWithLevelAndKeywords")] Boolean IsEnabled(LoggingLevel level, Int64 keywords);
        [method_name("LogEvent")] void LogEvent(String eventName);
        [method_name("LogEventWithFields")] void LogEvent(String eventName, LoggingFields fields);
        [method_name("LogEventWithFieldsAndLevel")] void LogEvent(String eventName, LoggingFields fields, LoggingLevel level);
        [method_name("LogEventWithFieldsAndOptions")] void LogEvent(String eventName, LoggingFields fields, LoggingLevel level, LoggingOptions options);
        [method_name("StartActivity")] Windows.Foundation.Diagnostics.LoggingActivity StartActivity(String startEventName);
        [method_name("StartActivityWithFields")] Windows.Foundation.Diagnostics.LoggingActivity StartActivity(String startEventName, LoggingFields fields);
        [method_name("StartActivityWithFieldsAndLevel")] Windows.Foundation.Diagnostics.LoggingActivity StartActivity(String startEventName, LoggingFields fields, LoggingLevel level);
        [method_name("StartActivityWithFieldsAndOptions")] Windows.Foundation.Diagnostics.LoggingActivity StartActivity(String startEventName, LoggingFields fields, LoggingLevel level, LoggingOptions options);
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Foundation.Diagnostics.ILoggingActivityFactory", 6b33b483-e10a-4c58-97d5-10fb451074fb)]
    [interface_name("Windows.Foundation.Diagnostics.ILoggingActivity", bc032941-b766-4cb5-9848-97ac6ba6d60c)]
    [threading(both)]
    runtimeclass LoggingActivity
        : Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Foundation.Diagnostics.ILoggingTarget
    {
        [method_name( "CreateLoggingActivity" )] LoggingActivity(String activityName, ILoggingChannel loggingChannel);
        [method_name( "CreateLoggingActivityWithLevel" )] LoggingActivity(String activityName, ILoggingChannel loggingChannel, LoggingLevel level);
        String Name{ get; };
        Guid Id{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Foundation.Diagnostics.ILoggingActivity2", 26c29808-6322-456a-af82-80c8642f178b)]
        {
            Windows.Foundation.Diagnostics.LoggingChannel Channel{ get; };
            [method_name("StopActivity")] void StopActivity(String stopEventName);
            [method_name("StopActivityWithFields")] void StopActivity(String stopEventName, LoggingFields fields);
            [method_name("StopActivityWithFieldsAndOptions")] void StopActivity(String stopEventName, LoggingFields fields, LoggingOptions options);
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(e9a50343-11d7-4f01-b5ca-cf495278c0a8)]
    interface ILoggingChannel requires Windows.Foundation.IClosable
    {
        String Name{ get; };
        Boolean Enabled{ get; };
        Windows.Foundation.Diagnostics.LoggingLevel Level{ get; };
        [method_name("LogMessage")] void LogMessage(String eventString);
        [method_name("LogMessageWithLevel")] void LogMessage(String eventString, LoggingLevel level);
        [method_name("LogValuePair")] void LogValuePair(String value1, Int32 value2);
        [method_name("LogValuePairWithLevel")] void LogValuePair(String value1, Int32 value2, LoggingLevel level);
        event Windows.Foundation.TypedEventHandler <Windows.Foundation.Diagnostics.ILoggingChannel, Object>  LoggingEnabled;
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Foundation.Diagnostics.ILoggingChannelFactory2", 4c6ef5dd-3b27-4dc9-99f0-299c6e4603a1)]
    [threading(both)]
    runtimeclass LoggingChannel
        : [default]Windows.Foundation.Diagnostics.ILoggingChannel
        , Windows.Foundation.IClosable
        , [contract(Windows.Foundation.UniversalApiContract, 1)]
        Windows.Foundation.Diagnostics.ILoggingTarget
    {
        [method_name( "CreateWithOptions" )] LoggingChannel(String name, LoggingChannelOptions options);
        [method_name( "CreateWithOptionsAndId" )] LoggingChannel(String name, LoggingChannelOptions options, Guid id);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [constructor_name("Windows.Foundation.Diagnostics.ILoggingChannelFactory", 4edc5b9c-af80-4a9b-b0dc-398f9ae5207b)]
        {
            [deprecated("This constructor creates a LoggingChannel in Windows 8.1 compatibility mode. Prefer the two-parameter constructor.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            [method_name( "Create" )] LoggingChannel(String name);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Foundation.Diagnostics.ILoggingChannel2", 9f4c3cf3-0bac-45a5-9e33-baf3f3a246a5)]
        {
            Guid Id{ get; };
        }
    }





    [uuid(6221f306-9380-4ad7-baf5-41ea9310d768)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface ILoggingSession requires Windows.Foundation.IClosable
    {
        String Name{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  SaveToFileAsync(Windows.Storage.IStorageFolder folder, String fileName);
        [method_name("AddLoggingChannel")] void AddLoggingChannel(ILoggingChannel loggingChannel);
        [method_name("AddLoggingChannelWithLevel")] void AddLoggingChannel(ILoggingChannel loggingChannel, LoggingLevel maxLevel);
        void RemoveLoggingChannel(ILoggingChannel loggingChannel);
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Foundation.Diagnostics.ILoggingSessionFactory", 4e937ee5-58fd-45e0-8c2f-a132eff95c1e)]
    [threading(both)]
    runtimeclass LoggingSession
        : [default]Windows.Foundation.Diagnostics.ILoggingSession
        , Windows.Foundation.IClosable
    {
        [method_name( "Create" )] LoggingSession(String name);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Foundation.Diagnostics.ILogFileGeneratedEventArgs", 269e976f-0d38-4c1a-b53f-b395d881df84)]
    runtimeclass LogFileGeneratedEventArgs
    {
        Windows.Storage.StorageFile File{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(24c74216-fed2-404c-895f-1f9699cb02f7)]
    interface IFileLoggingSession requires Windows.Foundation.IClosable
    {
        String Name{ get; };
        [method_name("AddLoggingChannel")] void AddLoggingChannel(ILoggingChannel loggingChannel);
        [method_name("AddLoggingChannelWithLevel")] void AddLoggingChannel(ILoggingChannel loggingChannel, LoggingLevel maxLevel);
        void RemoveLoggingChannel(ILoggingChannel loggingChannel);
        Windows.Foundation.IAsyncOperation <Windows.Storage.StorageFile>  CloseAndSaveToFileAsync();
        event Windows.Foundation.TypedEventHandler <Windows.Foundation.Diagnostics.IFileLoggingSession, Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs>  LogFileGenerated;
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Foundation.Diagnostics.IFileLoggingSessionFactory", eea08dce-8447-4daa-9133-12eb46f697d4)]
    [threading(both)]
    runtimeclass FileLoggingSession
        : [default]Windows.Foundation.Diagnostics.IFileLoggingSession
        , Windows.Foundation.IClosable
    {
        [method_name( "Create" )] FileLoggingSession(String name);
    }

}
