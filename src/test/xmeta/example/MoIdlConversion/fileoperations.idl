







namespace Windows.Internal.Storage
{
    [contractversion(1)]
    [internal]
    apicontract OperationsInternalContract{};

    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    enum FileOperationErrorCode
    {
        UnknownError,
        AccessDenied,
        AlreadyExists,
        Cancelled,
        CannotMoveSourceItems,
        DestinationFileAccessError,
        DestinationReadOnly,
        DestinationUnderSource,
        DirectoryNotEmpty,
        DiskFull,
        FileIsDestinationFolder,
        FileTooLarge,
        FolderIsDestinationFile,
        RequiresElevation,
        SharingViolation,
        SourceFileAccessError,
        SourceIsReadOnly,
    };

    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    enum FileOperationState
    {
        Preparing,
        PendingCancellation,
        Running,
        Canceled,
        Completed,
        CompletedWithErrors,
        Interrupted,
    };

    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    enum FileOperationType
    {
        Copy,
        Move,
        Delete,
    };

    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    struct FileOperationProgress
    {
        Double PercentageCompleted;
        UInt64 ItemsCompleted;
        UInt64 ItemsTotal;
        UInt64 SizeCompleted;
        UInt64 SizeTotal;
    };

    [uuid(b639a0d3-4c38-46d7-9ace-03baf335683b)]
    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    interface IFileOperationItemErrorInfo
    {
        Windows.Internal.Storage.FileOperationErrorCode ErrorCode{ get; };
        Windows.Storage.IStorageItem SourceItem{ get; };
        Windows.Storage.IStorageItem DestinationItem{ get; };
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    [interface_name("Windows.Internal.Storage.IFileOperationStatus", 2c5a3076-359a-44b1-b6a5-3a9f268d081e)]
    runtimeclass FileOperationStatus
    {
        Windows.Internal.Storage.FileOperationProgress Progress{ get; };
        Windows.Storage.IStorageItem CurrentItem{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Internal.Storage.IFileOperationItemErrorInfo>  ItemsWithErrors{ get; };
        Windows.Internal.Storage.FileOperationState State{ get; };
    }

    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Storage.IFileOperation", 14a029c3-bd5a-4b51-8001-119dcd9a5d0c)]
    runtimeclass FileOperation
    {
        void Start();
        void Cancel();
        Guid Id{ get; };
        Windows.Internal.Storage.FileOperationType Type{ get; };
        Windows.Internal.Storage.FileOperationStatus Status{ get; };
        Windows.Storage.IStorageFolder DestinationFolder{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Storage.FileOperation, Windows.Internal.Storage.FileOperationStatus>  Completed;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Storage.FileOperation, Windows.Internal.Storage.FileOperationStatus>  ProgressChanged;
    }



    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Storage.IFileOperationManagerStatics", 5a1215ab-e82f-4434-8228-dda67acb0e75)]
    [interface_name("Windows.Internal.Storage.IFileOperationManager", cf559460-af04-4ee3-a8a6-cb7550fa124e)]
    runtimeclass FileOperationManager
    {
        static Windows.Internal.Storage.FileOperationManager Current{ get; };
        Windows.Internal.Storage.FileOperation CreateCopyOperation(FileOperationType FileOperationType, Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem>  sourceItems, Windows.Storage.IStorageFolder destinationFolder);
        Windows.Internal.Storage.FileOperation CreateMoveOperation(FileOperationType FileOperationType, Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem>  sourceItems, Windows.Storage.IStorageFolder destinationFolder);
        Windows.Internal.Storage.FileOperation CreateDeleteOperation(FileOperationType FileOperationType, Windows.Foundation.Collections.IVectorView <Windows.Storage.IStorageItem>  sourceItems);
        Windows.Foundation.Collections.IVectorView <Windows.Internal.Storage.FileOperation>  RunningOperations{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Storage.OperationsInternalContract, 1)]
    runtimeclass FileOperationItemErrorInfo
        : [default]Windows.Internal.Storage.IFileOperationItemErrorInfo
    {
    }

}
