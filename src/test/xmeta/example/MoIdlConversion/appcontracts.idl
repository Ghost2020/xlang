









namespace Windows.ApplicationModel.AppService
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppServiceClosedStatus
    {
        Completed,
        Canceled,
        ResourceLimitsExceeded,
        Unknown,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppServiceConnectionStatus
    {
        Success,
        AppNotInstalled,
        AppUnavailable,
        AppServiceUnavailable,
        Unknown,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        RemoteSystemUnavailable,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        RemoteSystemNotSupportedByApp,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        NotAuthorized,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppServiceResponseStatus
    {
        Success,
        Failure,
        ResourceLimitsExceeded,
        Unknown,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        RemoteSystemUnavailable,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        MessageSizeTooLarge,
    };

    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum StatelessAppServiceResponseStatus
    {
        Success,
        AppNotInstalled,
        AppUnavailable,
        AppServiceUnavailable,
        RemoteSystemUnavailable,
        RemoteSystemNotSupportedByApp,
        NotAuthorized,
        ResourceLimitsExceeded,
        MessageSizeTooLarge,
        Failure,
        Unknown,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x1)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceRequest", 20e58d9d-18de-4b01-80ba-90a76204e3c8)]
    runtimeclass AppServiceRequest
    {
        Windows.Foundation.Collections.ValueSet Message{ get; };
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.AppService.AppServiceResponseStatus>  SendResponseAsync(Windows.Foundation.Collections.ValueSet message);
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceDeferral", 7e1b5322-eab0-4248-ae04-fdf93838e472)]
    runtimeclass AppServiceDeferral
    {
        void Complete();
    }


    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceResponse", 8d503cec-9aa3-4e68-9559-9de63e372ce4)]
    runtimeclass AppServiceResponse
    {
        Windows.Foundation.Collections.ValueSet Message{ get; };
        Windows.ApplicationModel.AppService.AppServiceResponseStatus Status{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [interface_name("Windows.ApplicationModel.AppService.IStatelessAppServiceResponse", 43754af7-a9ec-52fe-82e7-939b68dc9388)]
    runtimeclass StatelessAppServiceResponse
    {
        Windows.Foundation.Collections.ValueSet Message{ get; };
        Windows.ApplicationModel.AppService.StatelessAppServiceResponseStatus Status{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x1)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceRequestReceivedEventArgs", 6e122360-ff65-44ae-9e45-857fe4180681)]
    runtimeclass AppServiceRequestReceivedEventArgs
    {
        Windows.ApplicationModel.AppService.AppServiceRequest Request{ get; };
        Windows.ApplicationModel.AppService.AppServiceDeferral GetDeferral();
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0x1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceClosedEventArgs", de6016f6-cb03-4d35-ac8d-cc6303239731)]
    runtimeclass AppServiceClosedEventArgs
    {
        Windows.ApplicationModel.AppService.AppServiceClosedStatus Status{ get; };
    }


    [dualapipartition(0x1)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceConnection", 9dd474a2-871f-4d52-89a9-9e090531bd27)]
    [threading(both)]
    runtimeclass AppServiceConnection
        : Windows.Foundation.IClosable
    {

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [static_name("Windows.ApplicationModel.AppService.IAppServiceConnectionStatics", adc56ce9-d408-5673-8637-827a4b274168)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.AppService.StatelessAppServiceResponse>  SendStatelessMessageAsync(AppServiceConnection connection, Windows.System.RemoteSystems.RemoteSystemConnectionRequest connectionRequest, Windows.Foundation.Collections.ValueSet message);
        }
        AppServiceConnection();
        String AppServiceName{ get; };
        String AppServiceName{ set; };
        String PackageFamilyName{ get; };
        String PackageFamilyName{ set; };
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.AppService.AppServiceConnectionStatus>  OpenAsync();
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.AppService.AppServiceResponse>  SendMessageAsync(Windows.Foundation.Collections.ValueSet message);
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.AppService.AppServiceConnection, Windows.ApplicationModel.AppService.AppServiceRequestReceivedEventArgs>  RequestReceived;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.AppService.AppServiceConnection, Windows.ApplicationModel.AppService.AppServiceClosedEventArgs>  ServiceClosed;

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.AppService.IAppServiceConnection2", 8bdfcd5f-2302-4fbd-8061-52511c2f8bf9)]
        {
            Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.AppService.AppServiceConnectionStatus>  OpenRemoteAsync(Windows.System.RemoteSystems.RemoteSystemConnectionRequest remoteSystemConnectionRequest);
            Windows.System.User User{ get; };
            Windows.System.User User{ set; };
        }
    }







    [marshaling_behavior(agile)]
    [dualapipartition(0x1)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.AppService.IAppServiceTriggerDetails", 88a2dcac-ad28-41b8-80bb-bdf1b2169e19)]
    runtimeclass AppServiceTriggerDetails
    {
        String Name{ get; };
        String CallerPackageFamilyName{ get; };
        Windows.ApplicationModel.AppService.AppServiceConnection AppServiceConnection{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.AppService.IAppServiceTriggerDetails2", e83d54b2-28cc-43f2-b465-c0482e59e2dc)]
        {
            Boolean IsRemoteSystemConnection{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.ApplicationModel.AppService.IAppServiceTriggerDetails3", fbd71e21-7939-4e68-9e3c-7780147aabb6)]
        {
            Windows.Foundation.IAsyncOperation <Boolean>  CheckCallerForCapabilityAsync(String capabilityName);
        }

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.ApplicationModel.AppService.IAppServiceTriggerDetails4", 1185b180-8861-5e30-ab55-1cf4d08bbf6d)]
        {
            String CallerRemoteConnectionToken{ get; };
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.ApplicationModel.AppService.IAppServiceCatalogStatics", ef0d2507-d132-4c85-8395-3c31d5a1e941)]
    [threading(both)]
    runtimeclass AppServiceCatalog
    {
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.AppInfo> >  FindAppServiceProvidersAsync(String appServiceName);
    }

}
