









namespace WindowsInternal.Shell.UnifiedTile
{
    [contractversion(1)]
    [internal]
    apicontract VerbsInternalContract{};

    [flags]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    enum VerbEnumerationOptions
    {
        None,
        ExcludeNonExecutable,
        ExcludeResources,
        IncludeExtendedVerbs = 4,
    };


    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("WindowsInternal.Shell.UnifiedTile.IVerbEnumerationArgs", a9d9c0b6-c84b-4010-8202-7c23b17dc148)]
    [threading(both)]
    runtimeclass VerbEnumerationArgs
    {
        VerbEnumerationArgs();
        WindowsInternal.Shell.UnifiedTile.VerbEnumerationOptions Options{ get; };
        WindowsInternal.Shell.UnifiedTile.VerbEnumerationOptions Options{ set; };
        String VerbProviderId{ get; };
        String VerbProviderId{ set; };
        String GroupPathPrefix{ get; };
        String GroupPathPrefix{ set; };
        String VerbCanonicalName{ get; };
        String VerbCanonicalName{ set; };
    }

    [uuid(5aaa04b0-acac-40cc-869b-9b71b78bc9cb)]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    interface IVerbSource
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <WindowsInternal.Shell.UnifiedTile.TileVerb> >  GetVerbsAsync(VerbEnumerationArgs args);
        Windows.Foundation.IAsyncOperation <WindowsInternal.Shell.UnifiedTile.TileVerb>  FindVerbAsync(VerbEnumerationArgs args);
    };

    [marshaling_behavior(agile)]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    [interface_name("WindowsInternal.Shell.UnifiedTile.ITileVerb", f9ad7985-244a-4e61-8ba2-55a3f5e1c665)]
    runtimeclass TileVerb
    {
        String VerbProviderId{ get; };
        String GroupPath{ get; };
        String CanonicalName{ get; };
        String DisplayName{ get; };
        String Glyph{ get; };
        String GlyphFontFamily{ get; };
        String AccessKey{ get; };
        String ShortcutText{ get; };
        WindowsInternal.Shell.UnifiedTile.TileVerbFlags Flags{ get; };
        void Execute(VerbExecutionArgs args);
        Windows.Foundation.IAsyncOperation <Boolean>  ExecuteAsync(VerbExecutionArgs args);
    }

    [marshaling_behavior(agile)]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    runtimeclass VerbSource
        : [default]WindowsInternal.Shell.UnifiedTile.IVerbSource
    {
    }


    [marshaling_behavior(agile)]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    [interface_name("WindowsInternal.Shell.UnifiedTile.IVerbExecutionArgs", e98fc955-cda1-4ae8-ae08-292531bc6bb2)]
    [threading(both)]
    runtimeclass VerbExecutionArgs
    {
        VerbExecutionArgs();
        Windows.Foundation.IReference <Windows.Foundation.Point>  Position{ get; };
        Windows.Foundation.IReference <Windows.Foundation.Point>  Position{ set; };
        Windows.System.VirtualKeyModifiers KeyModifiers{ get; };
        Windows.System.VirtualKeyModifiers KeyModifiers{ set; };
        void SetCallerWindow(Windows.UI.Core.ICoreWindow window);
        UInt32 CallerWindowId{ get; };
        UInt32 CallerWindowId{ set; };
    }

    [flags]
    [contract(WindowsInternal.Shell.UnifiedTile.VerbsInternalContract, 1)]
    enum TileVerbFlags
    {
        None,
        CanExecute,
        IsMetadata,
        IsGroup = 4,
        IsSeparator = 8,
        IsDefault = 16,
    };


}
