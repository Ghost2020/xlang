











namespace Windows.Internal.Hub
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum ActivityLevel
    {
        Active,
        Inactive,
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum HumanActivityLevel
    {
        Active,
        Inactive,
        Unknown,
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum WelcomeCommand
    {
        Show,
        Dismiss,
    };


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Hub.IWelcomeStateManagerStatics", eb16ba6c-ff48-4885-8f34-406d7cf96914)]
    [threading(both)]
    runtimeclass WelcomeStateManager
    {
        static event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.WelcomeCommand>  ExternalWelcomeCommand;
        static void Dismiss();
        static void Show();
    }


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Hub.IPrivilegedTestUtilitiesStatics", ae3be900-b3ef-4cb2-8209-1c7631712471)]
    [threading(both)]
    runtimeclass PrivilegedTestUtilities
    {
        static Object Call(String method, Object args);
    }

    [uuid(a4e349af-6131-4214-b3a3-6186708fc58e)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface ISharedBackgroundService
    {
        Object BackgroundVisual{ get; };
    };


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [interface_name("Windows.Internal.Hub.IInboxAppInstaller", 48438730-6a64-4c54-afa8-b12865bfb4b1)]
    runtimeclass InboxAppInstaller
    {
        InboxAppInstaller();
        void InstallInboxApps();
        void Shutdown();
    }


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [interface_name("Windows.Internal.Hub.IActivityService", 12f19904-1d74-4512-bcee-e1a05f520031)]
    runtimeclass ActivityService
    {
        ActivityService();
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.ActivityLevel>  InputActivityLevelChanged;
        Windows.Internal.Hub.ActivityLevel InputActivityLevel{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.HumanActivityLevel>  HumanActivityLevelChanged;
        Windows.Internal.Hub.HumanActivityLevel HumanActivityLevel{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.ActivityLevel>  AnyActivityLevelChanged;
        Windows.Internal.Hub.ActivityLevel AnyActivityLevel{ get; };
        Int64 InputTimeoutInSeconds{ get; };
        Int64 HumanTimeoutInSeconds{ get; };
    }

    [uuid(61146a2f-97ac-45de-bd54-bd82435ca85a)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IHubPanel
    {
        [deprecated("OneCore DisplayManager no longer supported on WCOS platforms", deprecate, Windows.Internal.Hub.InternalContract, 0x10000)]
        Object Display{ get; };
        Windows.Graphics.Display.DisplayOrientations Orientation{ get; };
        Windows.Foundation.Rect WorkArea{ get; };
        Windows.Foundation.Rect ComposerSubRect{ get; };
        Double HardwareBezelWidth{ get; };
        Object BackgroundVisual{ get; };
        Object ComposerControl{ get; };
        [deprecated("OneCore DisplayManager no longer supported on WCOS platforms", deprecate, Windows.Internal.Hub.InternalContract, 0x10000)]
        void UpdateDisplayProperties(Object display, Windows.Graphics.Display.DisplayOrientations orientation, Windows.Foundation.Rect workArea, Windows.Foundation.Rect composerSubRect, Double bezelWidth);
        void UpdateBackgroundVisualElement(Object element);
        String TryGetPersistentId();
    };

    [uuid(e959b804-ec29-460b-810c-252a0804bdb1)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IHubPanelOrientationInterop
    {
        Windows.Graphics.Display.DisplayOrientations NativeOrientation{ get; };
        Windows.Foundation.Rect NativeWorkArea{ get; };
        Windows.Foundation.Rect NativeComposerSubRect{ get; };
        void UpdateAllDisplayProperties(Object display, Windows.Graphics.Display.DisplayOrientations orientation, Windows.Foundation.Rect workArea, Windows.Foundation.Rect composerSubRect, Double bezelWidth, Windows.Graphics.Display.DisplayOrientations nativeOrientation, Windows.Foundation.Rect nativeWorkArea, Windows.Foundation.Rect nativeComposerSubRect);
    };

    [flags]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum HubWorkspaceChangeType
    {
        None,
        DisplayChange,
        WorkAreaChange,
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [uuid(54b35faf-23ac-45f7-ae8c-078ee1dba629)]
    interface IHubWorkspaceChangeEventArgs
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.Hub.IHubPanel>  HubPanels{ get; };
        Windows.Internal.Hub.HubWorkspaceChangeType ChangeType{ get; };
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum HubPanelBindingType
    {
        None,
        WorkArea,
        ComposerSubRect,
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum PersistedLocationReason
    {
        None,
        AppLaunch,
    };

    [uuid(dbeb5c6f-74a7-4d6b-a8e2-d8f97b388760)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IHubPersistedLocation
    {
        Windows.Foundation.Point Location{ get; };
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [uuid(89320d97-b8c5-49ef-852a-7a89c24e4557)]
    interface IHubWorkspaceConfiguration
    {
        void BindElementToPanel(Object element, IHubPanel panel, HubPanelBindingType bindingType);
        void ClearPanelBinding(Object element);
        Windows.Foundation.Collections.IVectorView <Windows.Internal.Hub.IHubPanel>  HubPanels{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.IHubWorkspaceChangeEventArgs>  HubWorkspaceChanging;
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Hub.IHubWorkspaceChangeEventArgs>  HubWorkspaceChanged;
        Windows.Foundation.Point TransformRelativePointToComposerCoordinates(IHubPanel relativePanel, Windows.Foundation.Point relativePoint, HubPanelBindingType bindingType);
        Windows.Foundation.Point TransformComposerPointToRelativeCoordinates(IHubPanel relativePanel, Windows.Foundation.Point composerPoint, HubPanelBindingType bindingType);
        Windows.Internal.Hub.IHubPanel GetHubPanelFromComposerPoint(Windows.Foundation.Point composerPoint);
        void SetLastTappedProximalLocation(Windows.Foundation.Point composerPoint);
        Windows.Foundation.Point GetLastTappedProximalLocation();
        void PersistLastProximalLocation(PersistedLocationReason reason);
        Windows.Internal.Hub.IHubPersistedLocation RetrieveLastProximalLocation(PersistedLocationReason reason);
        void ClearLastProximalLocation(PersistedLocationReason reason);
        Windows.Internal.Hub.IHubPanel GetLastTappedPanel();
        Windows.Foundation.Size GetWorkspaceSize();
    };


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [interface_name("Windows.Internal.Hub.IAppointmentList", ad222886-25cd-4e77-80d2-94cb4b4c391a)]
    runtimeclass AppointmentList
    {
        AppointmentList();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  GetAppointmentsAsync(Windows.Foundation.DateTime startTime, Windows.Foundation.TimeSpan duration, UInt32 count);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentStore>  GetAppointmentStoreAsync();
    }

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    struct InjectedKey
    {
        Windows.System.VirtualKey Key;
        UInt32 ScanCode;
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    struct InjectedKeyboardInput
    {
        UInt8 Modifiers;
        InjectedKey Key1;
        InjectedKey Key2;
        InjectedKey Key3;
        InjectedKey Key4;
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    struct InjectedMouseInput
    {
        UInt32 Flags;
        UInt32 X;
        UInt32 Y;
    };


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [interface_name("Windows.Internal.Hub.IInputInjector", bdfbabb0-ed37-42e1-8824-eb4f4b9cb847)]
    runtimeclass InputInjector
    {
        InputInjector();
        Windows.Foundation.IAsyncOperation <Boolean>  SendKeyboardInputAsync(InjectedKeyboardInput input);
        Windows.Foundation.IAsyncOperation <Boolean>  SendMouseInputAsync(InjectedMouseInput input);
        Boolean UseExtendedKeyboardMap{ get; };
        Boolean UseExtendedKeyboardMap{ set; };
    }

    [uuid(63ba2604-3c3e-4d55-a97a-96c0b1bf8b52)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface ISurfaceHubProductShellExtensions
    {
        void AddToRotation(Object element);
        void SetSensorOverride(String sensorOverride);
        void Tare();
        void SetNamedValue(String name, String value);
        String GetNamedValue(String name);
        Boolean ProductLevelDiagnosticOverlayEnabled{ get; };
        Boolean ProductLevelDiagnosticOverlayEnabled{ set; };
        event Windows.Foundation.TypedEventHandler <Object, Boolean>  ProductLevelDiagnosticOverlayEnabledChanged;
    };

    [uuid(9ceca24c-983e-449e-afd4-601f41f7deae)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IAppointmentInformation
    {
        String Subject{ get; };
        String Location{ get; };
        String RoamingId{ get; };
        Windows.Foundation.Uri Uri{ get; };
        Windows.Foundation.DateTime StartTime{ get; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentInvitee>  Invitees{ get; };
        Boolean IsCanceled{ get; };
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [uuid(30821981-a664-4723-8055-9c929a2620e8)]
    interface IAppointmentService
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.Hub.IAppointmentInformation>  Appointments{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Foundation.Collections.IVectorView <Windows.Internal.Hub.IAppointmentInformation> >  AppointmentsChanged;
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [uuid(f773c97a-ca96-42ad-ba19-e1b2fb5be319)]
    interface IShowContentHubForUser
    {
        void ShowContentHubForUser(Windows.System.User user);
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [uuid(f1c1ba4d-6da3-4817-ac25-e178f5127b20)]
    interface IShowUserSignInPrompt
    {
        void ShowUserSignInPrompt();
    };

    [uuid(edec47a1-7654-44b2-8f6f-90cd3668ef64)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IRotationListener
    {
        void RotationChanged(Double angleInDegrees);
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [static_name("Windows.Internal.Hub.IDiagnosticInformationStatics", 4f561a5e-4235-40f0-b573-95957eb5b0c1)]
    [threading(both)]
    runtimeclass DiagnosticInformation
    {
        static UInt32 GetWatsonDumpFileCount();
        static event Windows.Foundation.TypedEventHandler <Object, UInt32>  WatsonDumpCountChanged;
    }


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [interface_name("Windows.Internal.Hub.IHubLogWatcher", b011ac64-f0e6-4901-9689-f0379e845ccf)]
    runtimeclass HubLogWatcher
    {
        HubLogWatcher();
        void Start();
        void Stop();
    }


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Hub.IHubUpdateScheduler", 683a1c8c-3fd1-4508-9c77-afd351009abf)]
    [threading(both)]
    runtimeclass HubUpdateScheduler
    {
        HubUpdateScheduler();
        void InitiateRebootIfNecessary();
        void StartUpdateWatcher(Int32 intervalMinutes);
        void StopUpdateWatcher();
    }


    [contract(Windows.Internal.Hub.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Hub.IHubResetHelperStatics", 871c63ee-9289-4a06-b50b-0fbba8d4c04e)]
    [threading(both)]
    runtimeclass ResetHelper
    {
        static void ResetDevice();
    }

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum HubComposerState
    {
        None,
        Startup,
        Hub,
        Oobe,
        License,
    };

    [contract(Windows.Internal.Hub.InternalContract, 1)]
    enum HubComposerStateEvent
    {
        StartupCompleted,
        StartOobe,
        OobeCompleted,
        LicenseExpired,
        LicenseVerified,
    };

    [uuid(ec4ed4a3-9548-4933-b21f-e017d2f8be4a)]
    [contract(Windows.Internal.Hub.InternalContract, 1)]
    interface IHubComposerStateMachine
    {
        void HandleEvent(HubComposerStateEvent stateEvent);
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Hub.HubComposerState, Windows.Internal.Hub.HubComposerState>  StateChanged;
        Windows.Internal.Hub.HubComposerState CurrentState{ get; };
    };

}
