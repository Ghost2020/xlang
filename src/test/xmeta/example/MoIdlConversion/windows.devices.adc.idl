









namespace Windows.Devices.Adc
{
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum AdcChannelMode
    {
        SingleEnded,
        Differential,
    };


    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Devices.Adc.IAdcChannel", 040bf414-2588-4a56-abef-73a260acc60a)]
    runtimeclass AdcChannel
        : Windows.Foundation.IClosable
    {
        Windows.Devices.Adc.AdcController Controller{ get; };
        Int32 ReadValue();
        Double ReadRatio();
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [static_name("Windows.Devices.Adc.IAdcControllerStatics", cce98e0c-01f8-4891-bc3b-be53ef279ca4)]
    [interface_name("Windows.Devices.Adc.IAdcController", 2a76e4b0-a896-4219-86b6-ea8cdce98f56)]
    runtimeclass AdcController
    {

        [contract(Windows.Devices.DevicesLowLevelContract, 2)]
        [static_name("Windows.Devices.Adc.IAdcControllerStatics2", a2b93b1d-977b-4f5a-a5fe-a6abaffe6484)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Devices.Adc.AdcController>  GetDefaultAsync();
        }
        static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.Adc.AdcController> >  GetControllersAsync(Windows.Devices.Adc.Provider.IAdcProvider provider);
        Int32 ChannelCount{ get; };
        Int32 ResolutionInBits{ get; };
        Int32 MinValue{ get; };
        Int32 MaxValue{ get; };
        Windows.Devices.Adc.AdcChannelMode ChannelMode{ get; };
        Windows.Devices.Adc.AdcChannelMode ChannelMode{ set; };
        Boolean IsChannelModeSupported(AdcChannelMode channelMode);
        Windows.Devices.Adc.AdcChannel OpenChannel(Int32 channelNumber);
    }



}
