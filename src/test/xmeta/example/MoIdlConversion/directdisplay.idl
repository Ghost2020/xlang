












namespace Windows.Devices.Display.Core
{
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayRotation
    {
        None,
        Clockwise90Degrees,
        Clockwise180Degrees,
        Clockwise270Degrees,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayPathScaling
    {
        Identity,
        Centered,
        Stretched,
        AspectRatioStretched,
        Custom,
        DriverPreferred,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayTargetPersistence
    {
        None,
        BootPersisted,
        TemporaryPersisted,
        PathPersisted,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayManagerOptions
    {
        None,
        EnforceSourceOwnership,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayModeQueryOptions
    {
        None,
        OnlyPreferredResolution,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayStateApplyOptions
    {
        None,
        FailIfStateChanged,
        ForceReapply,
        ForceModeEnumeration = 4,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayStateFunctionalizeOptions
    {
        None,
        FailIfStateChanged,
        ValidateTopologyOnly,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayPathStatus
    {
        Unknown,
        Succeeded,
        Pending,
        Failed,
        FailedAsync,
        InvalidatedAsync,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayWireFormatPixelEncoding
    {
        Rgb444,
        Ycc444,
        Ycc422,
        Ycc420,
        Intensity,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayWireFormatColorSpace
    {
        BT709,
        BT2020,
        ProfileDefinedWideColorGamut,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayWireFormatEotf
    {
        Sdr,
        HdrSmpte2084,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayWireFormatHdrMetadata
    {
        None,
        Hdr10,
        Hdr10Plus,
        DolbyVisionLowLatency,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayBitsPerChannel
    {
        None,
        Bpc6,
        Bpc8,
        Bpc10 = 4,
        Bpc12 = 8,
        Bpc14 = 16,
        Bpc16 = 32,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayDeviceCapability
    {
        FlipOverride,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayTaskSignalKind
    {
        OnPresentFlipAway,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    struct DisplayPresentationRate
    {
        Windows.Foundation.Numerics.Rational VerticalSyncRate;
        Int32 VerticalSyncsPerPresentation;
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayStateOperationStatus
    {
        Success,
        PartialFailure,
        UnknownFailure,
        TargetOwnershipLost,
        SystemStateChanged,
        TooManyPathsForAdapter,
        ModesNotSupported,
        RemoteSessionNotSupported,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    enum DisplayComplexScanoutSubFeature
    {
        MultiplaneComposition,
        PostComposition,
        Hdr,
        MaxImmediateFlipLine,
    };

    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayPostCompositionCapability
    {
        Rotation,
        VerticalFlip,
        HorizontalFlip,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    enum DisplayPostCompositionOptions
    {
        None,
        VerticalFlip,
        HorizontalFlip,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    enum DisplayBlendMode
    {
        Opaque,
        AlphaBlend,
    };

    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [flags]
    enum DisplayScanoutOptions
    {
        None,
        EnableFrontBufferRendering,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    enum FrontBufferRenderingCapability
    {
        Disallowed,
        Allowed,
        AllowedWithPredictableTiming,
    };



    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Devices.Display.Core.IDisplayWireFormatStatics", c575a22d-c3e6-5f7a-bdfb-87c6ab8661d5)]
    [constructor_name("Windows.Devices.Display.Core.IDisplayWireFormatFactory", b2efc8d5-09d6-55e6-ad22-9014b3d25229)]
    [interface_name("Windows.Devices.Display.Core.IDisplayWireFormat", 1acc967d-872c-5a38-bbb9-1d4872b76255)]
    [threading(both)]
    runtimeclass DisplayWireFormat
    {
        static Windows.Devices.Display.Core.DisplayWireFormat CreateWithProperties(Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <Guid, Object> >  extraProperties, DisplayWireFormatPixelEncoding pixelEncoding, Int32 bitsPerChannel, DisplayWireFormatColorSpace colorSpace, DisplayWireFormatEotf eotf, DisplayWireFormatHdrMetadata hdrMetadata);
        [method_name( "CreateInstance" )] DisplayWireFormat(DisplayWireFormatPixelEncoding pixelEncoding, Int32 bitsPerChannel, DisplayWireFormatColorSpace colorSpace, DisplayWireFormatEotf eotf, DisplayWireFormatHdrMetadata hdrMetadata);
        Windows.Devices.Display.Core.DisplayWireFormatPixelEncoding PixelEncoding{ get; };
        Int32 BitsPerChannel{ get; };
        Windows.Devices.Display.Core.DisplayWireFormatColorSpace ColorSpace{ get; };
        Windows.Devices.Display.Core.DisplayWireFormatEotf Eotf{ get; };
        Windows.Devices.Display.Core.DisplayWireFormatHdrMetadata HdrMetadata{ get; };
        Windows.Foundation.Collections.IMapView <Guid, Object>  Properties{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayPath", b3dfd64a-7460-5cde-811b-d5ae9f3d9f84)]
    runtimeclass DisplayPath
    {
        Windows.Devices.Display.Core.DisplayView View{ get; };
        Windows.Devices.Display.Core.DisplayTarget Target{ get; };
        Windows.Devices.Display.Core.DisplayPathStatus Status{ get; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  SourceResolution{ get; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  SourceResolution{ set; };
        Windows.Graphics.DirectX.DirectXPixelFormat SourcePixelFormat{ get; };
        Windows.Graphics.DirectX.DirectXPixelFormat SourcePixelFormat{ set; };
        Boolean IsStereo{ get; };
        Boolean IsStereo{ set; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  TargetResolution{ get; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  TargetResolution{ set; };
        Windows.Foundation.IReference <Windows.Devices.Display.Core.DisplayPresentationRate>  PresentationRate{ get; };
        Windows.Foundation.IReference <Windows.Devices.Display.Core.DisplayPresentationRate>  PresentationRate{ set; };
        Windows.Foundation.IReference <Boolean>  IsInterlaced{ get; };
        Windows.Foundation.IReference <Boolean>  IsInterlaced{ set; };
        Windows.Devices.Display.Core.DisplayWireFormat WireFormat{ get; };
        Windows.Devices.Display.Core.DisplayWireFormat WireFormat{ set; };
        Windows.Devices.Display.Core.DisplayRotation Rotation{ get; };
        Windows.Devices.Display.Core.DisplayRotation Rotation{ set; };
        Windows.Devices.Display.Core.DisplayPathScaling Scaling{ get; };
        Windows.Devices.Display.Core.DisplayPathScaling Scaling{ set; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayModeInfo>  FindModes(DisplayModeQueryOptions flags);
        void ApplyPropertiesFromMode(DisplayModeInfo modeResult);
        Windows.Foundation.Collections.IMap <Guid, Object>  Properties{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.Devices.Display.Core.IDisplayView", b0c98ca1-b759-5b59-b1ad-f0786aa9e53d)]
    runtimeclass DisplayView
    {
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayPath>  Paths{ get; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  ContentResolution{ get; };
        Windows.Foundation.IReference <Windows.Graphics.SizeInt32>  ContentResolution{ set; };
        void SetPrimaryPath(DisplayPath path);
        Windows.Foundation.Collections.IMap <Guid, Object>  Properties{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [static_name("Windows.Devices.Display.Core.IDisplayAdapterStatics", 1dac3cda-481f-5469-8470-82c4ba680a28)]
    [interface_name("Windows.Devices.Display.Core.IDisplayAdapter", a56f5287-f000-5f2e-b5ac-3783a2b69af5)]
    [threading(both)]
    runtimeclass DisplayAdapter
    {
        static Windows.Devices.Display.Core.DisplayAdapter FromId(Windows.Graphics.DisplayAdapterId id);
        Windows.Graphics.DisplayAdapterId Id{ get; };
        String DeviceInterfacePath{ get; };
        UInt32 SourceCount{ get; };
        UInt32 PciVendorId{ get; };
        UInt32 PciDeviceId{ get; };
        UInt32 PciSubSystemId{ get; };
        UInt32 PciRevision{ get; };
        Windows.Foundation.Collections.IMapView <Guid, Object>  Properties{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplayAdapter2", 6c34cfa0-3089-545f-af1c-7a054d2eb868)]
        {
            Boolean IsIndirectDisplayDevice{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayTarget", aec57c6f-47b4-546b-987c-e73fa791fe3a)]
    runtimeclass DisplayTarget
    {
        Windows.Devices.Display.Core.DisplayAdapter Adapter{ get; };
        String DeviceInterfacePath{ get; };
        UInt32 AdapterRelativeId{ get; };
        Boolean IsConnected{ get; };
        Boolean IsVirtualModeEnabled{ get; };
        Boolean IsVirtualTopologyEnabled{ get; };
        Windows.Devices.Display.DisplayMonitorUsageKind UsageKind{ get; };
        Windows.Devices.Display.Core.DisplayTargetPersistence MonitorPersistence{ get; };
        String StableMonitorId{ get; };
        Windows.Devices.Display.DisplayMonitor TryGetMonitor();
        Windows.Foundation.Collections.IMapView <Guid, Object>  Properties{ get; };
        Boolean IsStale{ get; };
        Boolean IsSame(DisplayTarget otherTarget);
        Boolean IsEqual(DisplayTarget otherTarget);
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayModeInfo", 48d513a0-f79b-5a74-a05e-da821f470868)]
    runtimeclass DisplayModeInfo
    {
        Windows.Graphics.SizeInt32 SourceResolution{ get; };
        Boolean IsStereo{ get; };
        Windows.Graphics.DirectX.DirectXPixelFormat SourcePixelFormat{ get; };
        Windows.Graphics.SizeInt32 TargetResolution{ get; };
        Windows.Devices.Display.Core.DisplayPresentationRate PresentationRate{ get; };
        Boolean IsInterlaced{ get; };
        Windows.Devices.Display.Core.DisplayBitsPerChannel GetWireFormatSupportedBitsPerChannel(DisplayWireFormatPixelEncoding encoding);
        Boolean IsWireFormatSupported(DisplayWireFormat wireFormat);
        Windows.Foundation.Collections.IMapView <Guid, Object>  Properties{ get; };
    }






    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayStateOperationResult", fcadbfdf-dc27-5638-b7f2-ebdfa4f7ea93)]
    runtimeclass DisplayStateOperationResult
    {
        Windows.Devices.Display.Core.DisplayStateOperationStatus Status{ get; };
        HRESULT ExtendedErrorCode{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayState", 08129321-11b5-5cb2-99f8-e90b479a8a1d)]
    runtimeclass DisplayState
    {
        Boolean IsReadOnly{ get; };
        Boolean IsStale{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayTarget>  Targets{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayView>  Views{ get; };
        Windows.Foundation.Collections.IMap <Guid, Object>  Properties{ get; };
        [method_name("ConnectTarget")] [default_overload]
        Windows.Devices.Display.Core.DisplayPath ConnectTarget(DisplayTarget target);
        [method_name("ConnectTargetToView")] Windows.Devices.Display.Core.DisplayPath ConnectTarget(DisplayTarget target, DisplayView view);
        Boolean CanConnectTargetToView(DisplayTarget target, DisplayView view);
        Windows.Devices.Display.Core.DisplayView GetViewForTarget(DisplayTarget target);
        Windows.Devices.Display.Core.DisplayPath GetPathForTarget(DisplayTarget target);
        void DisconnectTarget(DisplayTarget target);
        Windows.Devices.Display.Core.DisplayStateOperationResult TryFunctionalize(DisplayStateFunctionalizeOptions options);
        Windows.Devices.Display.Core.DisplayStateOperationResult TryApply(DisplayStateApplyOptions options);
        Windows.Devices.Display.Core.DisplayState Clone();
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManagerEnabledEventArgs", f0cf3f6f-42fa-59a2-b297-26e1713de848)]
    runtimeclass DisplayManagerEnabledEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManagerDisabledEventArgs", 8726dde4-6793-5973-a11f-5ffbc93fdb90)]
    runtimeclass DisplayManagerDisabledEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManagerChangedEventArgs", 6abfa285-6cca-5731-bcdc-42e5d2f5c50f)]
    runtimeclass DisplayManagerChangedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManagerPathsFailedOrInvalidatedEventArgs", 03a65659-1dec-5c15-b2a2-8fe9129869fe)]
    runtimeclass DisplayManagerPathsFailedOrInvalidatedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    enum DisplayManagerResult
    {
        Success,
        UnknownFailure,
        TargetAccessDenied,
        TargetStale,
        RemoteSessionNotSupported,
    };


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManagerResultWithState", 8e656aa6-6614-54be-bfef-4994547f7be1)]
    runtimeclass DisplayManagerResultWithState
    {
        Windows.Devices.Display.Core.DisplayManagerResult ErrorCode{ get; };
        HRESULT ExtendedErrorCode{ get; };
        Windows.Devices.Display.Core.DisplayState State{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayDevice", a4c9b62c-335f-5731-8cb4-c1ccd4731070)]
    runtimeclass DisplayDevice
    {
        Windows.Devices.Display.Core.DisplaySource CreateScanoutSource(DisplayTarget target);
        Windows.Devices.Display.Core.DisplaySurface CreatePrimary(DisplayTarget target, DisplayPrimaryDescription desc);
        Windows.Devices.Display.Core.DisplayTaskPool CreateTaskPool();
        Windows.Devices.Display.Core.DisplayFence CreatePeriodicFence(DisplayTarget target, Windows.Foundation.TimeSpan offsetFromVBlank);
        void WaitForVBlank(DisplaySource source);
        Windows.Devices.Display.Core.DisplayScanout CreateSimpleScanout(DisplaySource pSource, DisplaySurface pSurface, UInt32 SubResourceIndex, UInt32 SyncInterval);
        Boolean IsCapabilitySupported(DisplayDeviceCapability capability);

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplayDevice2", b1cabc53-2f31-5444-a6fa-ebf9aeb6bc6e)]
        {
            Windows.Devices.Display.Core.DisplayGammaControlCapabilities GetGammaControlCapabilities(DisplaySource source);
            Windows.Devices.Display.Core.DisplayScanout CreateComplexScanout(DisplaySource source);
            Boolean IsComplexScanoutSubFeatureSupported(DisplayComplexScanoutSubFeature feature);
            Windows.Graphics.DisplayAdapterId RenderAdapter{ get; };
            [method_name("CreateSimpleScanout2")] Windows.Devices.Display.Core.DisplayScanout CreateSimpleScanout(DisplaySource source, DisplaySurface surface, UInt32 subResourceIndex, UInt32 syncInterval, DisplayScanoutOptions options);
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [static_name("Windows.Devices.Display.Core.IDisplayManagerStatics", 2b6b9446-b999-5535-9d69-53f092c780a1)]
    [interface_name("Windows.Devices.Display.Core.IDisplayManager", 4ed9245b-15ec-56e2-9072-7fe5084a31a7)]
    [threading(both)]
    runtimeclass DisplayManager
        : Windows.Foundation.IClosable
    {
        static Windows.Devices.Display.Core.DisplayManager Create(DisplayManagerOptions options);
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayTarget>  GetCurrentTargets();
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayAdapter>  GetCurrentAdapters();
        Windows.Devices.Display.Core.DisplayManagerResult TryAcquireTarget(DisplayTarget target);
        void ReleaseTarget(DisplayTarget target);
        Windows.Devices.Display.Core.DisplayManagerResultWithState TryReadCurrentStateForAllTargets();
        Windows.Devices.Display.Core.DisplayManagerResultWithState TryAcquireTargetsAndReadCurrentState(Windows.Foundation.Collections.IIterable <Windows.Devices.Display.Core.DisplayTarget>  targets);
        Windows.Devices.Display.Core.DisplayManagerResultWithState TryAcquireTargetsAndCreateEmptyState(Windows.Foundation.Collections.IIterable <Windows.Devices.Display.Core.DisplayTarget>  targets);
        Windows.Devices.Display.Core.DisplayManagerResultWithState TryAcquireTargetsAndCreateSubstate(DisplayState existingState, Windows.Foundation.Collections.IIterable <Windows.Devices.Display.Core.DisplayTarget>  targets);
        Windows.Devices.Display.Core.DisplayDevice CreateDisplayDevice(DisplayAdapter adapter);
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs>  Enabled;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs>  Disabled;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Core.DisplayManagerChangedEventArgs>  Changed;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs>  PathsFailedOrInvalidated;
        void Start();
        void Stop();

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplayManager2", 88fe2fba-af65-5bb9-b417-19c76803f487)]
        {
            Windows.Devices.Display.Core.DisplayDevice CreateDisplayDeviceForIndirectAdapter(DisplayAdapter indirectAdapter, DisplayAdapter renderAdapter);
        }
    }





    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [constructor_name("Windows.Devices.Display.Core.IDisplayPrimaryDescriptionFactory", 1a6aff7b-3637-5c46-b479-76d576216e65)]
    [static_name("Windows.Devices.Display.Core.IDisplayPrimaryDescriptionStatics", e60e4cfb-36c9-56dd-8fa1-6ff8c4e0ff07)]
    [interface_name("Windows.Devices.Display.Core.IDisplayPrimaryDescription", 872591d2-d533-50ff-a85e-06696194b77c)]
    [threading(both)]
    runtimeclass DisplayPrimaryDescription
    {
        [method_name( "CreateInstance" )] DisplayPrimaryDescription(UInt32 width, UInt32 height, Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat, Windows.Graphics.DirectX.DirectXColorSpace colorSpace, Boolean isStereo, Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription multisampleDescription);
        static Windows.Devices.Display.Core.DisplayPrimaryDescription CreateWithProperties(Windows.Foundation.Collections.IIterable <Windows.Foundation.Collections.IKeyValuePair <Guid, Object> >  extraProperties, UInt32 width, UInt32 height, Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat, Windows.Graphics.DirectX.DirectXColorSpace colorSpace, Boolean isStereo, Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription multisampleDescription);
        UInt32 Width{ get; };
        UInt32 Height{ get; };
        Windows.Graphics.DirectX.DirectXPixelFormat Format{ get; };
        Windows.Graphics.DirectX.DirectXColorSpace ColorSpace{ get; };
        Boolean IsStereo{ get; };
        Windows.Graphics.DirectX.Direct3D11.Direct3DMultisampleDescription MultisampleDescription{ get; };
        Windows.Foundation.Collections.IMapView <Guid, Object>  Properties{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.Devices.Display.Core.IDisplaySurface", 594f6cc6-139a-56d6-a4b1-15fe2cb76adb)]
    runtimeclass DisplaySurface
    {
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [default_interface]
    [interface_name("Windows.Devices.Display.Core.IDisplayFence", 04dcf9ef-3406-5700-8fec-77eba4c5a74b)]
    runtimeclass DisplayFence
    {
    }



    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.Devices.Display.Core.IDisplayScanout", e3051828-1ba5-50e7-8a39-bb1fd2f4f8b9)]
    runtimeclass DisplayScanout
    {

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplayScanout2", 0b4dd9a2-4619-52b3-b989-94330c81a2ff)]
        {
            void SetPlaneParameters(Boolean Enabled, UInt32 PlaneIndex, DisplaySurface pScanoutSurface, UInt32 SubResourceIndex, Windows.Graphics.RectInt32 SrcRect, Windows.Graphics.RectInt32 DstRect, DisplayBlendMode Blend, DisplayScanoutOptions Options);
            void SetPlaneSync(UInt32 PlaneIndex, UInt32 SyncInterval, UInt32 MaxImmediateFlipLine);
            void SetPostCompositionParameters(DisplayPostCompositionOptions Flags, Windows.Graphics.RectInt32 SrcRect, Windows.Graphics.RectInt32 DstRect, DisplayRotation RotationValue);
            void CloseAndVerify();
            Boolean IsClosed{ get; };
            Windows.Devices.Display.Core.FrontBufferRenderingCapability GetFrontBufferRenderingCapability(UInt32 PlaneIndex);
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplaySource", ecd15fc1-eadc-51bc-971d-3bc628db2dd4)]
    runtimeclass DisplaySource
    {
        Windows.Graphics.DisplayAdapterId AdapterId{ get; };
        UInt32 SourceId{ get; };
        Windows.Storage.Streams.IBuffer GetMetadata(Guid Key);

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplaySource2", 70008ade-de8f-5aaa-bc8d-e60695382a4a)]
        {
            UInt32 MultiplaneCompositionMaxPlanes{ get; };
            UInt32 MultiplaneCompositionMaxRgbPlanes{ get; };
            UInt32 MultiplaneCompositionMaxYuvPlanes{ get; };
            Double MultiplaneCompositionMaxStretchFactor{ get; };
            Double MultiplaneCompositionMaxShrinkFactor{ get; };
            Boolean IsPostCompositionCapabilitySupported(DisplayPostCompositionCapability capability);
            Double PostCompositionMaxStretchFactor{ get; };
            Double PostCompositionMaxShrinkFactor{ get; };
            Boolean IsHardwareProtectionEnabled{ get; };
        }
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.Devices.Display.Core.IDisplayTask", 5e087448-135b-5bb0-bf63-637f84227c7a)]
    runtimeclass DisplayTask
    {
        void SetScanout(DisplayScanout scanout);
        void SetWait(DisplayFence readyFence, UInt64 readyFenceValue);

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.Devices.Display.Core.IDisplayTask2", 05fa4929-ff99-5c85-b0b0-748861321c10)]
        {
            void SetSignal(DisplayTaskSignalKind signalKind, DisplayFence signalFence, UInt64 signalFenceValue);
            void SetScanoutTime(Windows.Foundation.DateTime ScanoutTime);
            void SetScanoutTimeAsQpc(Int64 ScanoutTimeQpc);
            [default_overload]
            [method_name("SetGammaControl")] void SetGammaControl(DisplaySource source, Windows.Foundation.Numerics.Vector3 scale, Windows.Foundation.Numerics.Vector3 offset, Windows.Foundation.Numerics.Vector3[] gammaCurve);
            [method_name("SetGammaControlModifyOnly")] void SetGammaControl(DisplaySource source, Windows.Foundation.Numerics.Vector3 scale, Windows.Foundation.Numerics.Vector3 offset);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [interface_name("Windows.Devices.Display.Core.IDisplayTaskPool", c676253d-237d-5548-aafa-3e517fefef1c)]
    runtimeclass DisplayTaskPool
    {
        Windows.Devices.Display.Core.DisplayTask CreateTask();
        void ExecuteTask(DisplayTask task);
    }


    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Core.IDisplayGammaControlCapabilities", 3f1c0293-f2b7-5799-bf19-5065eb5c0b9a)]
    runtimeclass DisplayGammaControlCapabilities
    {
        Boolean AreScaleAndOffsetSupported{ get; };
        Double MaxConvertedValue{ get; };
        Double MinConvertedValue{ get; };
        Single[] ControlPointPositions{ get; };
    }



}
namespace Windows.Devices.Display.Internal
{
    [contractversion(1)]
    [internal]
    apicontract InternalDisplayContract{};

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [flags]
    enum SetDisplayStateFromDatabaseFlags
    {
        None,
        TopologyInternal,
        TopologyClone,
        TopologyExtend = 4,
        TopologyExternal = 8,
        TopologySupplied = 16,
        TopologyCurrent = 15,
        TopologyMask = 31,
        FailIfNoDatabaseEntry,
        AllowPathOrderChanges = 8192,
    };

    [flags]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    enum SetDisplayStateFlags
    {
        None,
        Validate = 64,
        Apply = 128,
        NoOptimization = 256,
        SaveToDatabase = 512,
        AllowChanges = 1024,
        ForceModeEnumeration = 4096,
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [flags]
    enum QueryDatabaseFlags
    {
        Current,
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    enum DisplayVirtualization
    {
        ModeAndTopology,
        ModeOnly,
        TopologyOnly,
        HardwareOnly,
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    enum DisplayTelemetryScenario
    {
        Unknown,
        AppTriggeredSdc,
        KernelTriggeredSdc,
        Hotplug,
    };


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayTelemetryInfo", 236f67d3-4956-58b8-a41e-62b44d9b1545)]
    [threading(both)]
    runtimeclass DisplayTelemetryInfo
    {
        DisplayTelemetryInfo();
        Windows.Devices.Display.Internal.DisplayTelemetryScenario Scenario{ get; };
        Windows.Devices.Display.Internal.DisplayTelemetryScenario Scenario{ set; };
        Guid TrackingGuid{ get; };
        Guid TrackingGuid{ set; };
    }

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    struct DisplayCdsMode
    {
        UInt32 Fields;
        Windows.Graphics.PointInt32 Position;
        Windows.Devices.Display.Core.DisplayRotation DisplayOrientation;
        Windows.Devices.Display.Core.DisplayPathScaling DisplayFixedOutput;
        UInt32 BitsPerPixel;
        UInt32 PixelWidth;
        UInt32 PixelHeight;
        UInt32 DisplayFrequency;
        Boolean IsInterlaced;
    };

    [uuid(36b6e598-074f-5f0f-95fa-454ff159a702)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    interface IDisplayViewForDesktop
    {
        Windows.Devices.Display.Internal.DisplayVirtualization Virtualization{ get; };
        Windows.Foundation.IReference <Windows.Graphics.PointInt32>  InputOffsetHint{ get; };
        Windows.Foundation.IReference <Windows.Graphics.PointInt32>  InputOffsetHint{ set; };
    };

    [uuid(79ca04ae-b8c9-56e5-9584-e42487a68217)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    interface IDisplayViewInternal
    {
        Windows.Devices.Display.Core.DisplayPath TryAddNativePath(UInt8[] buffer);
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [flags]
    enum DisplayPathProperties
    {
        None,
        TargetResolution,
        PresentationRate,
        IsInterlaced = 4,
        WireFormat = 8,
        TargetMode = 135,
        SourceMode = 256,
        InputOffsetHint = 2048,
        ScalingIntent = 65536,
        ContentSize = 131072,
        DesktopImageRegion = 8388608,
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [flags]
    enum DisplayPathAdvancedFlags
    {
        UserSourceMode = 1024,
    };

    [uuid(c4f2fc3f-4bb0-5e93-93e6-510a211cf552)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    interface IDisplayPathForDesktop
    {
        Windows.Foundation.IReference <Windows.Graphics.RectInt32>  DesktopImageRegion{ get; };
        Windows.Foundation.IReference <Windows.Graphics.RectInt32>  DesktopImageRegion{ set; };
        void SetAdvancedFlags(DisplayPathAdvancedFlags flags);
        void ClearAdvancedFlags(DisplayPathAdvancedFlags flags);
        void SetVariationAllowed(DisplayPathProperties pathProperties);
        void ClearVariationAllowed(DisplayPathProperties pathProperties);
    };


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDesktopContext", 39af1941-8a18-5c12-b22e-29e19e31bc76)]
    runtimeclass DesktopContext
    {
        void ClearQdcDatabaseCache();
        void SetLegacyWin32RotationState(UInt32 RotationState);
    }

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [uuid(479005ee-504e-5fa7-87e4-f3806d44ff40)]
    interface IHasDesktopContext
    {
        Windows.Devices.Display.Internal.DesktopContext Context{ get; };
    };


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayManagerRotationStateRefreshedEventArgs", 23a11e90-b8b6-529a-a2b2-d5dc35e606bf)]
    runtimeclass DisplayManagerRotationStateRefreshedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
        UInt32 ActiveProcessId{ get; };
        UInt32 ActiveProcessPreference{ get; };
    }


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayManagerStateRequestedEventArgs", 641bf776-5b42-54c8-ab00-f2869414b157)]
    runtimeclass DisplayManagerStateRequestedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
        Windows.Devices.Display.Internal.SetDisplayStateFlags Flags{ get; };
        Windows.Devices.Display.Core.DisplayState ProposedState{ get; };
    }


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayManagerStateFromDatabaseRequestedEventArgs", dc1728a7-0f46-5731-b704-e00413da1ddb)]
    runtimeclass DisplayManagerStateFromDatabaseRequestedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
        Windows.Devices.Display.Internal.SetDisplayStateFlags Flags{ get; };
        Windows.Devices.Display.Internal.SetDisplayStateFromDatabaseFlags DatabaseFlags{ get; };
        Windows.Devices.Display.Core.DisplayState ProposedState{ get; };
    }


    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayManagerStateDatabaseQueriedEventArgs", e12cf0bf-acfb-5f90-b7c8-2056c48c02cf)]
    runtimeclass DisplayManagerStateDatabaseQueriedEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
        Windows.Devices.Display.Internal.QueryDatabaseFlags Flags{ get; };
        void SetResult(Windows.Devices.Display.Core.DisplayState state);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [interface_name("Windows.Devices.Display.Internal.IDisplayManagerChangeDisplaySettingsEventArgs", db4706d9-f84c-5725-9ac6-a3bbeee9d6f0)]
    runtimeclass DisplayManagerChangeDisplaySettingsEventArgs
    {
        Boolean Handled{ get; };
        Boolean Handled{ set; };
        Windows.Foundation.Deferral GetDeferral();
        String DeviceName{ get; };
        UInt32 Flags{ get; };
        Windows.Foundation.IReference <Windows.Devices.Display.Internal.DisplayCdsMode>  Mode{ get; };
    }

    [uuid(2e9e2b5a-4b4a-5f3e-b127-38cdee8f069e)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    interface IDisplayManagerForDesktop
    {
        Windows.Devices.Display.Core.DisplayManagerResultWithState TryReadCurrentStateForModeQuery();
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Object>  RotationButtonToggled;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Internal.DisplayManagerRotationStateRefreshedEventArgs>  RotationStateRefreshed;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Internal.DisplayManagerStateRequestedEventArgs>  DisplayStateRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Internal.DisplayManagerStateFromDatabaseRequestedEventArgs>  DisplayStateFromDatabaseRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Object>  PresenterViewEntered;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Object>  PresenterViewExited;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Internal.DisplayManagerStateDatabaseQueriedEventArgs>  DisplayStateDatabaseQueried;
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Display.Core.DisplayManager, Windows.Devices.Display.Internal.DisplayManagerChangeDisplaySettingsEventArgs>  ChangeDisplaySettings;
        Windows.Devices.Display.Internal.DesktopContext StartForDesktop();
        void StartForTest();
        Windows.Devices.Display.Internal.DesktopContext StartForDesktopTest();
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [uuid(a6baac9b-c315-5c4b-8b52-96f1a1f1842c)]
    interface IDisplayEventsInternal
    {
        void OnEnabled(Windows.Devices.Display.Core.DisplayManagerEnabledEventArgs args);
        void OnDisabled(Windows.Devices.Display.Core.DisplayManagerDisabledEventArgs args);
        void OnChanged(Windows.Devices.Display.Core.DisplayManagerChangedEventArgs args);
        void OnPathsFailedOrInvalided(Windows.Devices.Display.Core.DisplayManagerPathsFailedOrInvalidatedEventArgs args);
    };

    [uuid(cf2cd41f-320a-5c7c-9054-cc7ec6908160)]
    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    interface IDisplayEventsInternalForDesktop
    {
        void OnRotationButtonToggled();
        void OnRotationStateRefreshed(DisplayManagerRotationStateRefreshedEventArgs args);
        void OnDisplayStateRequested(DisplayManagerStateRequestedEventArgs args);
        void OnDisplayStateFromDatabaseRequested(DisplayManagerStateFromDatabaseRequestedEventArgs args);
        void OnPresenterViewEntered();
        void OnPresenterViewExited();
        void OnDisplayStateDatabaseQueried(DisplayManagerStateDatabaseQueriedEventArgs args);
        void OnChangeDisplaySettings(DisplayManagerChangeDisplaySettingsEventArgs args);
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [uuid(34dd25d3-8367-589a-9c46-1802727fb1ea)]
    interface IDisplayAdapterForDesktop
    {
        Boolean IsDriverCcdSupported{ get; };
        Boolean IsVirtualModeEnabled{ get; };
        Boolean IsVirtualTopologyEnabled{ get; };
        Boolean IsPathIndependentRotationSupported{ get; };
        Boolean IsPostDevice{ get; };
        Boolean IsPostDeviceCertain{ get; };
        Boolean IsSoftGpuDevice{ get; };
        Boolean IsWarpDevice{ get; };
        Boolean IsBddDevice{ get; };
        Boolean IsVirtualMonitorDevice{ get; };
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [uuid(095d9fe6-93f0-588a-a692-a9fcb927ee94)]
    interface IDisplayTargetForDesktop
    {
        Boolean IsForceable{ get; };
        UInt32 TargetPriority{ get; };
        UInt32 TargetForcePriority{ get; };
        UInt32 HpdAwareness{ get; };
    };

    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [uuid(a71009e8-182f-5b12-83d3-404fd4a4b831)]
    interface IDisplayStateForDesktop
    {
        Windows.Foundation.Collections.IVectorView <Windows.Devices.Display.Core.DisplayPath>  GetNewPathsRequiringScanout(Windows.Devices.Display.Core.DisplayState oldState);
        UInt32 PathCount{ get; };
        UInt64 StateToken{ get; };
        UInt8[] SerializeNative();
        Windows.Devices.Display.Core.DisplayPath TryAddNativePath(UInt8[] buffer);
        void Clear();
    };



    [contract(Windows.Devices.Display.Internal.InternalDisplayContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Display.Internal.IVirtualMonitorSetFactory", 6f8628bd-8f87-5ccb-a317-ee03965d828d)]
    [interface_name("Windows.Devices.Display.Internal.IVirtualMonitorSet", a5264214-3e45-5aed-b630-5f985e49343d)]
    [threading(both)]
    runtimeclass VirtualMonitorSet
    {
        [method_name( "CreateInstance" )] VirtualMonitorSet(String adapterName);
        String PnpInstanceId{ get; };
        void Start(Boolean persistCcdDatabase);
    }

}
