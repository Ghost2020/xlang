









namespace Windows.Internal.ComposableShell.CapturePickerData
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [flags]
    enum DisplayScope
    {
        None,
        All,
        Single,
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    enum ViewDataCollectionChangeType
    {
        None,
        ItemChanged,
        ItemRemoved,
        Reset,
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    struct CaptureRegistrationToken
    {
        UInt64 Value;
    };

    [uuid(b0554cd1-4d9d-4d41-a4eb-268611e3c0cd)]
    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    interface ICapturePickerViewData
    {
        String AppId{ get; };
        String DisplayName{ get; };
        UInt32 UniqueId{ get; };
        Windows.Internal.ComposableShell.ComposerContextId ContextId{ get; };
        Windows.Foundation.Size Size{ get; };
        Object ThumbnailFactory{ get; };
        Object IconFactory{ get; };
        Windows.Foundation.DateTime ActivationTimestamp{ get; };
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [uuid(84f7c20b-769e-43db-b8a3-4be0a3755b9d)]
    interface ICapturePickerDisplayData
    {
        Windows.Internal.ComposableShell.CapturePickerData.DisplayScope Scope{ get; };
        String PersistentId{ get; };
        Windows.Foundation.Size Size{ get; };
        Object ThumbnailFactory{ get; };
        Object IconFactory{ get; };
    };

    [uuid(9d243306-9913-4e83-be42-f5b9fdc22040)]
    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    interface IDisplayDataChangeEventArgs
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerDisplayData>  Displays{ get; };
    };

    [uuid(f5e6033d-5198-4788-945d-7c1a77c0ae45)]
    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    interface IViewDataCollectionChangedEventArgs
    {
        Windows.Internal.ComposableShell.CapturePickerData.ViewDataCollectionChangeType ChangeType{ get; };
        Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerViewData ViewData{ get; };
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [uuid(87d2c344-0071-405b-9d25-a617483120d8)]
    interface ICaptureNotificationEventArgs
    {
        String DisplayName{ get; };
    };

    [uuid(09f0361c-64eb-44b3-a11d-8f92387e62ec)]
    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    interface ICaptureAutomationNotifier
    {
        void Notify(String text);
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [uuid(5126b754-0077-4b69-a700-6a35bb4e0763)]
    interface ICapturePickerDataService
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerViewData>  GetDataForAllViews();
        Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerViewData GetDataForView(UInt32 viewId);
        Windows.Foundation.Collections.IVectorView <Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerDisplayData>  GetDataForAllDisplays(DisplayScope scope);
        Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerDisplayData GetDataForDisplay(String persistentId);
        Windows.Internal.ComposableShell.CapturePickerData.CaptureRegistrationToken StartCaptureForDisplay(UInt32 callerProcessId, String persistentId, String displayName, UInt64 captureControllerReference);
        Windows.Internal.ComposableShell.CapturePickerData.CaptureRegistrationToken StartCaptureForView(UInt32 callerProcessId, UInt32 viewId, String displayName, UInt64 captureControllerReference);
        void StopCapture(String displayName, CaptureRegistrationToken token);
        String GetTitleForWindowId(Windows.Internal.ApplicationModel.WindowManagement.WindowId windowId);
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.ComposableShell.CapturePickerData.IDisplayDataChangeEventArgs>  DisplayDataChanged;
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.ComposableShell.CapturePickerData.IViewDataCollectionChangedEventArgs>  ViewDataCollectionChanged;
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.ComposableShell.CapturePickerData.ICaptureNotificationEventArgs>  CaptureStarted;
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.ComposableShell.CapturePickerData.ICaptureNotificationEventArgs>  CaptureStopped;
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [uuid(f35c15cc-a0f1-4d00-8053-48151896fa08)]
    interface ICaptureIndicatorController
    {
        void ShowIndicatorForDisplay(String persistentId);
        void HideIndicatorForDisplay(String persistentId);
    };

    [contract(Windows.Internal.ComposableShell.CapturePickerData.InternalContract, 1)]
    [uuid(8fe0914b-24b7-4be9-8097-9c6127154c6c)]
    interface ICapturePickerDataServiceFacilitator
    {
        Windows.Foundation.Collections.IVectorView <Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerDisplayData>  GetDataForAllDisplays(DisplayScope scope);
        Windows.Internal.ComposableShell.CapturePickerData.ICapturePickerDisplayData GetDataForDisplay(String persistentId);
        Object GetDuplicateVisualForDisplay(String persistentId);
        Windows.Foundation.DateTime GetActivationTimestampForView(UInt32 viewId);
        Windows.Internal.ComposableShell.CapturePickerData.ICaptureIndicatorController CaptureIndicatorController{ get; };
        event Windows.Foundation.TypedEventHandler <Object, Windows.Internal.ComposableShell.CapturePickerData.IDisplayDataChangeEventArgs>  DisplayDataChanged;
    };

}
