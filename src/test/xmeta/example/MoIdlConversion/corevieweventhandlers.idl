










namespace Windows.Internal.OneCore.ViewEventHandlers
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};


    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [uuid(1911c860-a148-42cd-8c12-745b5358e46a)]
    interface IDesktopComponentUIViewEventHandler
    {
        Boolean IsHostGrantedRightsOverComponent(UInt32 hostViewId, UInt32 componentViewId, Windows.UI.Core.HostRightFlags hostRightFlags);
        void ShowWin32HostedComponents(Boolean show);
    };

    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [uuid(a0d3c2c6-1a5e-4966-b767-3e15a063c36a)]
    interface ICoreComponentUIViewEventHandler_CompositionIslands
    {
        Windows.UI.Internal.Core.IslandTransformsMode GetIslandTransformsMode(UInt32 hostProcessId, UInt32 componentViewId);
    };

    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [interface_name("Windows.Internal.OneCore.ViewEventHandlers.ICoreComponentUIViewEventHandler", 08ebf8d6-4d27-4ab3-92c6-1e1d04de4047)]
    runtimeclass CoreCUIViewEventHandler
    {
        void ShowComponent(UInt32 hostProcessId, UInt32 componentViewId);
        void HideComponent(UInt32 hostProcessId, UInt32 componentViewId);
        void CloseComponent(UInt32 hostProcessId, UInt32 componentViewId);
        void SetBoundsComponent(UInt32 hostProcessId, UInt32 componentViewId, Single width, Single height);
        void SetScreenBoundsComponent(UInt32 hostProcessId, UInt32 componentViewId, Windows.Foundation.Rect bounds);
        void RequestActivation(UInt32 hostProcessId, UInt32 activateViewId);
        void RequestBackNavigation(UInt32 hostProcessId, UInt32 componentViewId, Windows.Foundation.EventHandler <Boolean>  handler);
        void SetComponentViewStateToSuspendable(UInt32 hostProcessId, UInt32 componentViewId, Boolean isSuspendable);
        UInt32 GetHostViewInstanceId(UInt32 componentViewId);
        void SetComponentPointerActivationPolicy(UInt32 hostProcessId, UInt32 componentViewId, Windows.UI.Core.ComponentPointerActivationPolicy activationPolicy);
        void RemoveComponent(UInt32 componentViewId);
        void RegisterComponentForHost(UInt32 componentViewId, UInt32 hostViewId, UInt32 hostPid);
        void SetIsModalDialogEnabled(UInt32 hostProcessId, UInt32 componentViewId, Boolean isEnabled);
        void ConfigureHostRightsForComponent(UInt32 requestingProcessId, UInt32 componentViewId, Windows.UI.Core.HostRightFlags hostRightFlagsMask, Windows.UI.Core.HostRightFlags hostRightFlags);
        void TakeFocusFromComponent(UInt32 hostProcessId, UInt32 hostViewId);
    }


    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [interface_name("Windows.Internal.OneCore.ViewEventHandlers.ICoreCUIBrokerProvider", 0a5f9dad-caa7-4537-92eb-2eb6b7d7867c)]
    runtimeclass CoreCUIBrokerProvider
    {
        Windows.Internal.OneCore.ViewEventHandlers.CoreCUIViewEventHandler CUIViewEventHandler{ get; };
        Windows.Internal.OneCore.ViewEventHandlers.CoreCUIViewEventHandler CUIViewEventHandler{ set; };
    }


    [uuid(b49b28d0-3a52-4ea6-9fb1-9b99241c30fe)]
    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    interface IDesktopCUIBroker
    {
        Boolean IsHostGrantedRightsOverComponent(UInt32 hostViewId, UInt32 componentViewId, Windows.UI.Core.HostRightFlags hostRightFlags);
    };

    [uuid(a0f8891c-f94b-47eb-8435-f2c9fbe28535)]
    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    interface ICoreCUIBroker_CompositionIslands
    {
        Windows.UI.Internal.Core.IslandTransformsMode GetIslandTransformsMode(UInt32 componentViewId);
    };

    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [interface_name("Windows.Internal.OneCore.ViewEventHandlers.ICoreCUIBroker", 1f79f7de-20bf-4591-930a-d490b78fb09f)]
    runtimeclass CoreCUIBroker
    {
        void ShowComponent(UInt32 componentViewId);
        void HideComponent(UInt32 componentViewId);
        void CloseComponent(UInt32 componentViewId);
        void SetBoundsComponent(UInt32 componentViewId, Single width, Single height);
        void SetScreenBoundsComponent(UInt32 componentViewId, Windows.Foundation.Rect bounds);
        void RequestActivation(UInt32 activateViewId);
        void RequestBackNavigation(UInt32 componentViewId, Windows.Foundation.EventHandler <Boolean>  handler);
        void SetComponentViewStateToSuspendable(UInt32 componentViewId, Boolean isSuspendable);
        UInt32 GetHostViewInstanceId(UInt32 componentViewId);
        void SetComponentPointerActivationPolicy(UInt32 componentViewId, Windows.UI.Core.ComponentPointerActivationPolicy activationPolicy);
        void RemoveComponent(UInt32 componentViewId);
        void RegisterComponentForHost(UInt32 componentViewId, UInt32 hostViewId, UInt32 hostPid);
        void SetIsModalDialogEnabled(UInt32 componentViewId, Boolean isEnabled);
        void ConfigureHostRightsForComponent(UInt32 componentViewId, Windows.UI.Core.HostRightFlags hostRightFlagsMask, Windows.UI.Core.HostRightFlags hostRightFlags);
        void TakeFocusFromComponent(UInt32 hostViewId);
        void TakeHamActivity(UInt32 processId);
        void ReleaseHamActivity(UInt32 processId);
        void TakeHamActivityByViewId(UInt32 componentAppViewId);
        void ReleaseHamActivityByViewId(UInt32 componentAppViewId);
    }

    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    enum CRSIdType
    {
        ViewInstanceId,
        ProcessId,
    };

    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    struct tagHostIdentifier
    {
        CRSIdType type;
        UInt32 vid;
        UInt32 pid;
    };

    [flags]
    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    enum CRSComponentStateFlags
    {
        none,
        isShowRequested,
        isReadyForPresentation,
        componentStateFlagsMax = 2,
    };

    [flags]
    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    enum CRSComponentRelationshipFlags
    {
        None,
        IsComponent,
    };


    [contract(Windows.Internal.OneCore.ViewEventHandlers.InternalContract, 1)]
    [interface_name("Windows.Internal.OneCore.ViewEventHandlers.IComponentRelationshipStore", 998b4eac-6ac8-4db4-a28d-cf69c0d23e4b)]
    runtimeclass ComponentRelationshipStore
    {
        void RegisterHostComponentPair(tagHostIdentifier idHost, UInt32 pidHost, UInt32 vidComponent, Object componentView);
        void UnregisterComponent(UInt32 component);
        Windows.Foundation.Collections.IVectorView <UInt32>  GetComponentsForHost(tagHostIdentifier idHost);
        [return_name("returnValue")] Windows.Internal.OneCore.ViewEventHandlers.tagHostIdentifier GetHostIdentifierForComponent(UInt32 vidComponent, out CRSComponentRelationshipFlags componentRelationship);
        UInt32 GetHostProcessIdForComponent(UInt32 vidComponent);
        Object GetViewForComponent(UInt32 vidComponent);
        EventRegistrationToken GetTokenClientWindowReadyForPresentationChangedForComponent(UInt32 vidComponent);
        void SetTokenClientWindowReadyForPresentationChangedForComponent(UInt32 component, EventRegistrationToken token);
        Windows.Internal.OneCore.ViewEventHandlers.CRSComponentStateFlags GetComponentStateFlagsForComponent(UInt32 vidComponent);
        void SetComponentStateFlagsForComponent(UInt32 component, CRSComponentStateFlags componentStateFlags);
        Boolean IsHostProcessOwnerOfComponent(UInt32 pidHost, UInt32 vidComponent);
        Boolean IsComponentRegistered(UInt32 vidComponent);
        void RegisterComponentForHost(UInt32 componentViewInstanceId, UInt32 hostViewInstanceId, UInt32 hostPid);
        Boolean GetIsModalDialogEnabled(UInt32 componentViewId);
        void SetIsModalDialogEnabled(UInt32 componentViewId, Boolean isEnabled);
        void ConfigureHostRightsForComponent(UInt32 componentViewInstanceId, Windows.UI.Core.HostRightFlags hostRightFlagsMask, Windows.UI.Core.HostRightFlags hostRightFlags);
        Windows.UI.Core.HostRightFlags GetHostRightsForComponent(UInt32 componentViewInstanceId);
        void RegisterDisconnectedComponent(tagHostIdentifier idHost, UInt32 componentViewInstanceId, Object componentView);
        void DisconnectComponent(UInt32 component);
        Boolean IsComponentDisconnected(UInt32 vidComponent);
    }

}
