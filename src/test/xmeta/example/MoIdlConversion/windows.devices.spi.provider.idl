








namespace Windows.Devices.Spi.Provider
{
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderSpiMode
    {
        Mode0,
        Mode1,
        Mode2,
        Mode3,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    enum ProviderSpiSharingMode
    {
        Exclusive,
        Shared,
    };


    [dualapipartition(0xa000000)]
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Spi.Provider.IProviderSpiConnectionSettingsFactory", 66456b5a-0c79-43e3-9f3c-e59780ac18fa)]
    [interface_name("Windows.Devices.Spi.Provider.IProviderSpiConnectionSettings", f6034550-a542-4ec0-9601-a4dd68f8697b)]
    runtimeclass ProviderSpiConnectionSettings
    {
        [method_name( "Create" )] ProviderSpiConnectionSettings(Int32 chipSelectLine);
        Int32 ChipSelectLine{ get; };
        Int32 ChipSelectLine{ set; };
        Windows.Devices.Spi.Provider.ProviderSpiMode Mode{ get; };
        Windows.Devices.Spi.Provider.ProviderSpiMode Mode{ set; };
        Int32 DataBitLength{ get; };
        Int32 DataBitLength{ set; };
        Int32 ClockFrequency{ get; };
        Int32 ClockFrequency{ set; };
        Windows.Devices.Spi.Provider.ProviderSpiSharingMode SharingMode{ get; };
        Windows.Devices.Spi.Provider.ProviderSpiSharingMode SharingMode{ set; };
    }


    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [uuid(0d1c3443-304b-405c-b4f7-f5ab1074461e)]
    interface ISpiDeviceProvider requires Windows.Foundation.IClosable
    {
        String DeviceId{ get; };
        Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings ConnectionSettings{ get; };
        void Write(UInt8[] buffer);
        void Read([range(0, 2147483647)]ref UInt8[] buffer);
        void TransferSequential(UInt8[] writeBuffer, [range(0, 2147483647)]ref UInt8[] readBuffer);
        void TransferFullDuplex(UInt8[] writeBuffer, [range(0, 2147483647)]ref UInt8[] readBuffer);
    };

    [uuid(c1686504-02ce-4226-a385-4f11fb04b41b)]
    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    interface ISpiControllerProvider
    {
        Windows.Devices.Spi.Provider.ISpiDeviceProvider GetDeviceProvider(ProviderSpiConnectionSettings settings);
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 2)]
    [uuid(96b461e2-77d4-48ce-aaa0-75715a8362cf)]
    interface ISpiProvider
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.Spi.Provider.ISpiControllerProvider> >  GetControllersAsync();
    };

}
