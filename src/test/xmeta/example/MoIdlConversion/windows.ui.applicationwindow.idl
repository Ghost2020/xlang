










namespace Windows.UI.WindowManagement
{
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    enum AppWindowClosedReason
    {
        Other,
        AppInitiated,
        UserInitiated,
    };

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    enum AppWindowFrameStyle
    {
        Default,
        NoFrame,
    };

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    enum AppWindowPresentationKind
    {
        Default,
        CompactOverlay,
        FullScreen,
    };

    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum AppWindowTitleBarVisibility
    {
        Default,
        AlwaysHidden,
    };

    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum WindowingEnvironmentKind
    {
        Unknown,
        Overlapped,
        Tiled,
    };

    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum BoundsPreference
    {
        Default,
        SizeFirst,
        PositionFirst,
    };

    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum ApplicationWindowPresenterKind
    {
        Default,
        CompactOverlay,
        FullScreen,
        Projection,
        Maximized,
    };

    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    enum ShowMode
    {
        Default,
        Minimized,
        Maximized,
        Hidden,
    };


    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowChangedEventArgs", 1de1f3be-a655-55ad-b2b6-eb240f880356)]
    runtimeclass AppWindowChangedEventArgs
    {
        Boolean DidAvailableWindowPresentationsChange{ get; };
        Boolean DidDisplayRegionsChange{ get; };
        Boolean DidFrameChange{ get; };
        Boolean DidSizeChange{ get; };
        Boolean DidTitleBarChange{ get; };
        Boolean DidVisibilityChange{ get; };
        Boolean DidWindowingEnvironmentChange{ get; };
        Boolean DidWindowPresentationChange{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IAppWindowClosedEventArgs", cc7df816-9520-5a06-821e-456ad8b358aa)]
    runtimeclass AppWindowClosedEventArgs
    {
        Windows.UI.WindowManagement.AppWindowClosedReason Reason{ get; };
    }


    [webhosthidden]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowCloseRequestedEventArgs", e9ff01da-e7a2-57a8-8b5e-39c4003afdbb)]
    runtimeclass AppWindowCloseRequestedEventArgs
    {
        Boolean Cancel{ get; };
        Boolean Cancel{ set; };
        Windows.Foundation.Deferral GetDeferral();
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.WindowManagement.IDisplayRegion", db50c3a2-4094-5f47-8cb1-ea01ddafaa94)]
    runtimeclass DisplayRegion
    {
        String DisplayMonitorDeviceId{ get; };
        Boolean IsVisible{ get; };
        Windows.Foundation.Point WorkAreaOffset{ get; };
        Windows.Foundation.Size WorkAreaSize{ get; };
        Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.DisplayRegion, Object>  Changed;
    }

    [marshaling_behavior(agile)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowPlacement", 03dc815e-e7a9-5857-9c03-7d670594410e)]
    runtimeclass AppWindowPlacement
    {
        Windows.UI.WindowManagement.DisplayRegion DisplayRegion{ get; };
        Windows.Foundation.Point Offset{ get; };
        Windows.Foundation.Size Size{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [interface_name("Windows.UI.WindowManagement.IRemoteApplicationWindowConfiguration", b051e468-2eed-51cd-bec2-524dfa44562b)]
    runtimeclass RemoteApplicationWindowConfiguration
    {
        Windows.Foundation.Size FrameSize{ get; };
        Windows.Foundation.Point FrameOffset{ get; };
        Boolean IsDisabled{ get; };
        Boolean IsDisabled{ set; };
        Boolean IsResizable{ get; };
        Boolean IsResizable{ set; };
        Boolean IsShownInTaskSwitcher{ get; };
        Boolean IsShownInTaskSwitcher{ set; };
        Boolean ShouldSuppressCaptionControls{ get; };
        Boolean ShouldSuppressCaptionControls{ set; };
        void SetRelativeZOrderBeneath(AppWindow appWindow);
        void SetPreferredTopMost();
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IAppWindowFrame", 9ee22601-7e5d-52af-846b-01dc6c296567)]
    runtimeclass AppWindowFrame
    {

        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.WindowManagement.IAppWindowFrameStyle", ac412946-e1ac-5230-944a-c60873dcf4a9)]
        {
            Windows.UI.WindowManagement.AppWindowFrameStyle GetFrameStyle();
            void SetFrameStyle(AppWindowFrameStyle frameStyle);
        }
        Windows.Foundation.Collections.IVector <Windows.UI.Composition.IVisualElement>  DragRegionVisuals{ get; };
    }

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowPresenter", 5ae9ed73-e1fd-5317-ad78-5a3ed271bbde)]
    runtimeclass AppWindowPresenter
    {
        Windows.UI.WindowManagement.AppWindowPresentationConfiguration GetConfiguration();
        Boolean IsPresentationSupported(AppWindowPresentationKind presentationKind);
        [method_name("RequestPresentation")] Boolean RequestPresentation(AppWindowPresentationConfiguration configuration);
        [default_overload]
        [method_name("RequestPresentationByKind")] Boolean RequestPresentation(AppWindowPresentationKind presentationKind);
    }

    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IAppWindowTitleBar", 6e932c84-f644-541d-a2d7-0c262437842d)]
    runtimeclass AppWindowTitleBar
    {

        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.WindowManagement.IAppWindowTitleBarVisibility", a215a4e3-6e7e-5651-8c3b-624819528154)]
        {
            Windows.UI.WindowManagement.AppWindowTitleBarVisibility GetPreferredVisibility();
            void SetPreferredVisibility(AppWindowTitleBarVisibility visibilityMode);
        }
        Windows.Foundation.IReference <Windows.UI.Color>  BackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  BackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonBackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonBackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonForegroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverBackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverBackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverForegroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveBackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveBackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveForegroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedBackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedBackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedForegroundColor{ set; };
        Boolean ExtendsContentIntoTitleBar{ get; };
        Boolean ExtendsContentIntoTitleBar{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  ForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  ForegroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  InactiveBackgroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  InactiveBackgroundColor{ set; };
        Windows.Foundation.IReference <Windows.UI.Color>  InactiveForegroundColor{ get; };
        Windows.Foundation.IReference <Windows.UI.Color>  InactiveForegroundColor{ set; };
        Boolean IsVisible{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.AppWindowTitleBarOcclusion>  GetTitleBarOcclusions();
    }

    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.WindowManagement.IWindowingEnvironmentStatics", 874e9fb7-c642-55ab-8aa2-162f734a9a72)]
    [interface_name("Windows.UI.WindowManagement.IWindowingEnvironment", 264363c0-2a49-5417-b3ae-48a71c63a3bd)]
    [threading(both)]
    runtimeclass WindowingEnvironment
    {
        [method_name("FindAll")] static Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.WindowingEnvironment>  FindAll();
        [method_name("FindAllWithKind")] static Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.WindowingEnvironment>  FindAll(WindowingEnvironmentKind kind);

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [static_name("Windows.UI.WindowManagement.IWindowingEnvironmentStatics2", 1ae18337-c9d9-545f-b8cc-c039a0bb931e)]
        {
            static event Windows.Foundation.EventHandler <Windows.UI.WindowManagement.WindowingEnvironmentAddedEventArgs>  Added;
            static event Windows.Foundation.EventHandler <Windows.UI.WindowManagement.WindowingEnvironmentRemovedEventArgs>  Removed;
        }

        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.UI.WindowManagement.IWindowingEnvironmentPartner", ac48135c-8cb2-54da-baaa-38ae8e1a591f)]
        {
            Windows.UI.WindowManagement.WindowChrome GetChrome();
            [method_name("TryApplyChangesAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryApplyChangesAsync();
            [method_name("TryApplyChangesForViewAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryApplyChangesAsync(Int32 viewId);
            Windows.UI.WindowManagement.PositionerBroker TryGetDefaultPositioner();
        }
        Boolean IsEnabled{ get; };
        Windows.UI.WindowManagement.WindowingEnvironmentKind Kind{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.DisplayRegion>  GetDisplayRegions();
        event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.WindowingEnvironment, Windows.UI.WindowManagement.WindowingEnvironmentChangedEventArgs>  Changed;
    }

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.WindowManagement.IAppWindowStatics", ff1f3ea3-b769-50ef-9873-108cd0e89746)]
    [interface_name("Windows.UI.WindowManagement.IAppWindow", 663014a6-b75e-5dbd-995c-f0117fa3fb61)]
    [threading(both)]
    runtimeclass AppWindow
    {
        static Windows.Foundation.IAsyncOperation <Windows.UI.WindowManagement.AppWindow>  TryCreateAsync();
        static void ClearAllPersistedState();
        static void ClearPersistedState(String key);

        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.UI.WindowManagement.IAppWindowRemoteApplicationWindowConfiguration", 19087b8a-be4e-5e6f-8f52-c9310d827de7)]
        {
            Windows.UI.WindowManagement.RemoteApplicationWindowConfiguration RemoteApplicationWindowConfiguration{ get; };
        }
        Windows.UI.UIContentRoot Content{ get; };
        Windows.System.DispatcherQueue DispatcherQueue{ get; };
        Windows.UI.WindowManagement.AppWindowFrame Frame{ get; };
        Boolean IsVisible{ get; };
        String PersistedStateId{ get; };
        String PersistedStateId{ set; };
        Windows.UI.WindowManagement.AppWindowPresenter Presenter{ get; };
        String Title{ get; };
        String Title{ set; };
        Windows.UI.WindowManagement.AppWindowTitleBar TitleBar{ get; };
        Windows.UI.UIContext UIContext{ get; };
        Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment{ get; };
        Windows.Foundation.IAsyncAction CloseAsync();
        Windows.UI.WindowManagement.AppWindowPlacement GetPlacement();
        Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.DisplayRegion>  GetDisplayRegions();
        void RequestMoveToDisplayRegion(DisplayRegion displayRegion);
        void RequestMoveAdjacentToCurrentView();
        void RequestMoveAdjacentToWindow(AppWindow anchorWindow);
        void RequestMoveRelativeToWindowContent(AppWindow anchorWindow, Windows.Foundation.Point contentOffset);
        void RequestMoveRelativeToCurrentViewContent(Windows.Foundation.Point contentOffset);
        void RequestMoveRelativeToDisplayRegion(DisplayRegion displayRegion, Windows.Foundation.Point displayRegionOffset);
        void RequestSize(Windows.Foundation.Size frameSize);
        Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsync();
        event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.AppWindow, Windows.UI.WindowManagement.AppWindowChangedEventArgs>  Changed;
        event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.AppWindow, Windows.UI.WindowManagement.AppWindowClosedEventArgs>  Closed;
        event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.AppWindow, Windows.UI.WindowManagement.AppWindowCloseRequestedEventArgs>  CloseRequested;

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.UI.WindowManagement.IApplicationWindowPartner", 9feaf7f8-aa85-5bb9-be94-881d63096dde)]
        {
            Boolean IsClosed{ get; };
            Int32 Id{ get; };
            event Windows.Foundation.TypedEventHandler <Windows.UI.WindowManagement.AppWindow, Boolean>  Activated;
        }

        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysDisabled)]
        [interface_name("Windows.UI.WindowManagement.IApplicationWindow_ApplicationContent", f76024db-215e-5cbf-88d7-b6b0828e7d05)]
        {
            void SetContent(Windows.UI.UIContentRoot value);
        }
    }





    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [constructor_name("Windows.UI.WindowManagement.IAppWindowPresentationConfigurationFactory", fd3606a6-7875-5de8-84ff-6351ee13dd0d)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowPresentationConfiguration", b5a43ee3-df33-5e67-bd31-1072457300df)]
    [threading(both)]
    unsealed runtimeclass AppWindowPresentationConfiguration
    {
        Windows.UI.WindowManagement.AppWindowPresentationKind Kind{ get; };
    }




    [feature(Velocity_AlwaysAlwaysEnabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.UI.WindowManagement.ICompactOverlayPresentationConfiguration", a7e5750f-5730-56c6-8e1f-d63ff4d7980d)]
    [threading(both)]
    runtimeclass CompactOverlayPresentationConfiguration
        : Windows.UI.WindowManagement.AppWindowPresentationConfiguration
    {
        CompactOverlayPresentationConfiguration();
    }


    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [default_interface]
    [interface_name("Windows.UI.WindowManagement.IDefaultPresentationConfiguration", d8c2b53b-2168-5703-a853-d525589fe2b9)]
    [threading(both)]
    runtimeclass DefaultPresentationConfiguration
        : Windows.UI.WindowManagement.AppWindowPresentationConfiguration
    {
        DefaultPresentationConfiguration();
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [interface_name("Windows.UI.WindowManagement.IFullScreenPresentationConfiguration", 43d3dcd8-d2a8-503d-a626-15533d6d5f62)]
    [threading(both)]
    runtimeclass FullScreenPresentationConfiguration
        : Windows.UI.WindowManagement.AppWindowPresentationConfiguration
    {
        FullScreenPresentationConfiguration();
        Boolean IsExclusive{ get; };
        Boolean IsExclusive{ set; };
    }



    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IAppWindowTitleBarOcclusion", fea3cffd-2ccf-5fc3-aeae-f843876bf37e)]
    runtimeclass AppWindowTitleBarOcclusion
    {
        Windows.Foundation.Rect OccludingRect{ get; };
    }






    [webhosthidden]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.WindowManagement.IAppWindowPositioner", 3f58b344-a328-5cb6-9657-211f2124da06)]
    runtimeclass AppWindowPositioner
    {
        Windows.UI.WindowManagement.RemoteApplicationWindowConfiguration RemoteApplicationWindowConfiguration{ get; };
        void RequestMoveToDisplayRegion(DisplayRegion displayRegion);
        void RequestMoveAdjacentToWindow(AppWindow anchorWindow);
        void RequestMoveAdjacentToCurrentView();
        void RequestMoveRelativeToContent(AppWindow anchorWindow, Windows.Foundation.Point contentOffset);
        void RequestMoveRelativeToContentInCurrentView(Windows.Foundation.Point contentOffset);
        void RequestMoveRelativeToDisplayRegion(DisplayRegion displayRegion, Windows.Foundation.Point displayRegionOffset);
        void RequestSize(Windows.Foundation.Size size);
    }


    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [webhosthidden]
    [static_name("Windows.UI.WindowManagement.IApplicationWindowExperienceStatics", 54fe6de2-b08f-5f4e-aa65-c6676d7775ec)]
    [interface_name("Windows.UI.WindowManagement.IApplicationWindowExperience", 9c26381e-5c22-5f77-a23f-46190d8c205c)]
    [threading(both)]
    runtimeclass ApplicationWindowExperience
    {
        static Windows.UI.WindowManagement.ApplicationWindowExperience FromWindow(AppWindow applicationWindow);
        Windows.UI.WindowManagement.AppWindowFrame Frame{ get; };
        Windows.UI.WindowManagement.AppWindowPositioner Positioner{ get; };
        Windows.UI.WindowManagement.AppWindowPresenter Presenter{ get; };
        String Title{ get; };
        String Title{ set; };
        Windows.UI.WindowManagement.AppWindowTitleBar TitleBar{ get; };
        void SetPreferredMinSize(Windows.Foundation.Size size);
    }



    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IWindowChrome", 4af0163b-ea8a-51e0-9c3e-2908438cec07)]
    runtimeclass WindowChrome
    {
        void SetSuppressCaptionControls(Int32 viewId, Boolean value);
        void SetShowAsResizable(Int32 viewId, Boolean value);
        void SetIsDisabled(Int32 viewId, Boolean value);
        void SetIsRightToLeft(Int32 viewId, Boolean value);
        void SetIsTopmost(Int32 viewId, Boolean value);
        void SetIsNonActivatable(Int32 viewId, Boolean value);
        void SetIsLayered(Int32 viewId, Boolean value);
    }

    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.WindowManagement.IPositionerBrokerFactory", ede17619-2ee8-57f4-a836-0307602d3997)]
    [interface_name("Windows.UI.WindowManagement.IPositionerBroker", 49b226e5-b1b8-5b86-91c7-256652c26435)]
    [threading(both)]
    unsealed runtimeclass PositionerBroker
    {
        Windows.Foundation.Size GetDefaultFullScreenSize(DisplayRegion displayRegion);
        Windows.Foundation.Size GetFullScreenSize(Int32 viewId);
        void SetWindowingEnvironment(Int32 viewId);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [webhosthidden]
    [default_interface]
    [interface_name("Windows.UI.WindowManagement.IWindowingEnvironmentChangedEventArgs", 4160cfc6-023d-5e9a-b431-350e67dc978a)]
    runtimeclass WindowingEnvironmentChangedEventArgs
    {
    }



    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IWindowingEnvironmentAddedEventArgs", ff2a5b7f-f183-5c66-99b2-429082069299)]
    runtimeclass WindowingEnvironmentAddedEventArgs
    {
        Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment{ get; };
    }

    [feature(Velocity_AlwaysAlwaysEnabled)]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IWindowingEnvironmentRemovedEventArgs", 2e5b5473-beff-5e53-9316-7e775fe568b3)]
    runtimeclass WindowingEnvironmentRemovedEventArgs
    {
        Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment{ get; };
    }








    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.WindowManagement.ITilingPositionerBroker", 8920f32e-deaa-58b2-a925-eb453e14805b)]
    runtimeclass TilingPositionerBroker
        : Windows.UI.WindowManagement.PositionerBroker
    {
        void SetDisplayRegion(Int32 viewId, DisplayRegion displayRegion);
        void SetDisplayRegions(Int32 viewId, Windows.Foundation.Collections.IIterable <Windows.UI.WindowManagement.DisplayRegion>  displayRegions);
    }


    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [interface_name("Windows.UI.WindowManagement.IOverlappedPositionerBroker", 56a026b3-ccbf-599d-9601-2447b55191e1)]
    runtimeclass OverlappedPositionerBroker
        : Windows.UI.WindowManagement.PositionerBroker
    {
        void SetDisplayRegion(Int32 viewId, DisplayRegion displayRegion);
        void SetViewRelativePosition(Int32 viewId, Int32 anchorViewId, Windows.Foundation.Point offset);
        void SetSize(Int32 viewId, Windows.Foundation.Size size);
        void SetDisplayRegionRelativePosition(Int32 viewId, DisplayRegion displayRegion, Windows.Foundation.Point offset);
        void SetViewAdjacentPosition(Int32 viewId, Int32 anchorViewId);
    }


    [feature(Velocity_AlwaysAlwaysDisabled)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.WindowManagement.IAppStreamingPositionerBroker", a7debb02-795b-55d2-8de6-f3f0be6fe325)]
    runtimeclass AppStreamingPositionerBroker
    {
        void SetDesiredSize(Int32 viewId, Windows.Foundation.Size size);
        void SetDesiredPosition(Int32 viewId, Windows.Foundation.Point position);
        void SetDesiredBounds(Int32 viewId, Windows.Foundation.Rect bounds);
        void SetAbsoluteZOrder(Int32 viewId, Int32 order);
        void SetRequestedTopMost(Int32 viewId, Boolean topMost);
        void SetActivatable(Int32 viewId, Boolean activatable);
        void SetShowMode(Int32 viewId, ShowMode showMode);
    }




}
namespace Windows.UI.WindowManagement.Preview
{
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [static_name("Windows.UI.WindowManagement.Preview.IWindowManagementPreviewStatics", 0f9725c6-c004-5a23-8fd2-8d092ce2704a)]
    [default_interface]
    [interface_name("Windows.UI.WindowManagement.Preview.IWindowManagementPreview", 4ef55b0d-561d-513c-a67c-2c02b69cef41)]
    [threading(both)]
    runtimeclass WindowManagementPreview
    {
        static void SetPreferredMinSize(Windows.UI.WindowManagement.AppWindow window, Windows.Foundation.Size preferredFrameMinSize);
    }



}
namespace Windows.UI.Core.Preview
{
    [feature(Velocity_AlwaysAlwaysEnabled)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 8)]
    [static_name("Windows.UI.Core.Preview.ICoreAppWindowPreviewStatics", 33ac21be-423b-5db6-8a8e-4dc87353b75b)]
    [default_interface]
    [interface_name("Windows.UI.Core.Preview.ICoreAppWindowPreview", a4f6e665-365e-5fde-87a5-9543c3a15aa8)]
    [threading(both)]
    runtimeclass CoreAppWindowPreview
    {
        static Int32 GetIdFromWindow(Windows.UI.WindowManagement.AppWindow window);
    }

}
