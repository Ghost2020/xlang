














namespace Windows.Internal.ComposableShell
{
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    struct ComposableViewId
    {
        UInt32 Value;
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    enum ViewVisibility
    {
        Visible,
        NotVisible,
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    enum PresentationClass
    {
        Hidden = 2,
        Concealed,
        Full,
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    enum ProximityClass
    {
        Distant = 1,
        Immediate,
    };


    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ComposableShell.ISystemKeyPressResult", b822aea7-c59d-4b42-9a8a-895838cd5472)]
    runtimeclass SystemKeyPressResult
    {
        Boolean Handled{ get; };
    }


    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ComposableShell.ISplashScreenDeferral", 1a07c3b2-e989-471d-a7f4-ae18553d1999)]
    runtimeclass SplashScreenDeferral
    {
        void NotifyDismissed();
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(caf55d52-6a1f-485a-840a-9c18b376b5eb)]
    interface IComposableView requires Windows.Internal.ComposableShell.ITreeNode
    {
        String AppId{ get; };
        Windows.Internal.ComposableShell.ComposableViewId UniqueId{ get; };
        Windows.Internal.ComposableShell.ComposerContextId Owner{ get; };
        UInt32 CompositionId{ get; };
        Windows.UI.Internal.Core.IslandTransformsMode TransformsMode{ get; };
        Boolean ReadyToPresent{ get; };
        Windows.Internal.Shell.ViewManagerInterop.ViewFrameworkViewType ViewFrameworkViewType{ get; };
        Boolean IsForegroundPriority{ set; };
        Boolean IsForegroundPriority{ get; };
        UInt8 RelativeImportance{ set; };
        UInt8 RelativeImportance{ get; };
        Windows.Internal.ComposableShell.PresentationClass PresentationClass{ set; };
        Windows.Internal.ComposableShell.PresentationClass PresentationClass{ get; };
        Windows.Internal.ComposableShell.ProximityClass ProximityClass{ set; };
        Windows.Internal.ComposableShell.ProximityClass ProximityClass{ get; };
        Boolean IsXboxShellExperience{ set; };
        Boolean IsXboxShellExperience{ get; };
        UInt32 ViewId{ get; };
        UInt32 WindowId{ get; };
        String CustomResourceSet{ get; };
        void SetCustomResourceSet(String resourceSetName, Windows.Foundation.Collections.ValueSet resourceSetOverrides);
        UInt64 UserContextToken{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Internal.ComposableShell.SystemKeyPressResult>  TryBackAsync();
        Windows.Internal.ComposableShell.SplashScreenDeferral NotifySplashScreenVisible();
        Windows.Internal.ComposableShell.SizeChangeBatch GetSizeChangeBatch();
        void UpdateEngagementTelemetryFlags(UInt64 flagsToUpdate, UInt64 flagValues);
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IComposableView, Object>  BackRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IComposableView, Object>  CompositionIdChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IComposableView, Object>  PresentationReadyChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IComposableView, Object>  LayoutCompleted;
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IComposableView, Object>  ViewFrameworkViewTypeChanged;
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [interface_name("Windows.Internal.ComposableShell.ISizeChangeBatch", e848abd5-1849-44d8-9f55-23090513d21c)]
    runtimeclass SizeChangeBatch
    {
        void Complete();
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(b0e2f956-d4f9-41a6-978a-4ff42435f25f)]
    interface IComposableViewCustomProperties requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Windows.Foundation.Collections.IPropertySet Properties{ get; };
    };



    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ComposableShell.ISizeChangeDeferral", 222e90ce-fd2a-4477-8cbf-75c69df069b6)]
    runtimeclass SizeChangeDeferral
    {
        void SetLogicalSize(Windows.Foundation.Size value);
        void SetPhysicalSize(Windows.Foundation.Size value);
        void SetLogicalVisibleBounds(Windows.Foundation.Rect value);
        void SetPhysicalVisibleBounds(Windows.Foundation.Rect value);
        void SetSplashScreenImageLocation(Windows.Foundation.Rect value);
        void SetDisplayScale(Double value);
        void SetRasterScale(Double value);
        void SetDisplayRegions(Windows.Foundation.Collections.IVectorView <Windows.Internal.ApplicationModel.WindowingEnvironment.DisplayRegionId>  value);
        void SetUserInteractionMode(Windows.UI.ViewManagement.UserInteractionMode value);
        void SetApplicationViewMode(Windows.Internal.Shell.ViewManagerInterop.AppViewMode value);
        void SetAllowedApplicationViewModes(Windows.Internal.Shell.ViewManagerInterop.ApplicationViewModeFlags value);
        void SetHolographicPresentationMode(Windows.Internal.Holographic.UI.PresentationMode value);
        void SetViewState(Windows.Internal.Shell.ViewManagerInterop.ViewState value);
        void SetPhysicalPosition(Windows.Foundation.Point value);
        void SetAdjacentDisplayFlags(Windows.Internal.Shell.ViewManagerInterop.AdjacentDisplayFlags value);
        void Complete();
    }


    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ComposableShell.IViewSizePreferencesChangedEventArgs", 6003d940-024d-4fc2-97b5-c7262230ae5a)]
    runtimeclass ViewSizePreferencesChangedEventArgs
    {
        Windows.Foundation.Size RequestedSize{ get; };
        void ResizeAttemptHonored();
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(2fc04548-eef3-4910-aa2b-4437448b0890)]
    interface IResizableView requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Windows.Foundation.Size MinSize{ get; };
        Windows.Foundation.Size MaxSize{ get; };
        Windows.Foundation.Size Size{ get; };
        Windows.Foundation.Rect VisibleBounds{ get; };
        Double DisplayScale{ get; };
        Double RasterScale{ get; };
        Windows.UI.ViewManagement.UserInteractionMode UserInteractionMode{ get; };
        Windows.Internal.Holographic.UI.PresentationMode HolographicPresentationMode{ get; };
        Windows.Internal.ComposableShell.SizeChangeDeferral GetSizeChangeDeferral();
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IResizableView, Windows.Internal.ComposableShell.ViewSizePreferencesChangedEventArgs>  SizePreferencesChanged;
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [interface_name("Windows.Internal.ComposableShell.IViewCloseResult", 81e5aa29-9597-4937-b7f3-c5bd7deddf03)]
    runtimeclass ViewCloseResult
    {
        Boolean Succeeded{ get; };
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(dbbfe311-ddf4-4b7f-9fd0-a40212d7c8eb)]
    interface IClosableView requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Windows.Foundation.IAsyncOperation <Windows.Internal.ComposableShell.ViewCloseResult>  TryCloseAsync();
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(e636d510-2b53-45b5-9365-304544e9e758)]
    interface IViewPointerActivationPolicy requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Windows.Internal.Shell.ViewManagerInterop.PointerActivationPolicy PointerActivationPolicy{ get; };
        Windows.Internal.Shell.ViewManagerInterop.PointerActivationPolicy PointerActivationPolicy{ set; };
    };

    [uuid(2fe1f56b-a3de-4a79-a697-422e83675d31)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    interface IRotatableView requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Windows.Internal.Shell.ViewManagerInterop.Orientations CurrentOrientation{ set; };
        Windows.Internal.Shell.ViewManagerInterop.Orientations CurrentOrientation{ get; };
        Windows.Internal.Shell.ViewManagerInterop.Orientations SupportedOrientations{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.IRotatableView, Object>  SupportedOrientationsChanged;
    };

    [uuid(6b2d1c78-3576-4417-841c-3cf804725d86)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    interface IKeepAliveView requires Windows.Internal.ComposableShell.IComposableView, Windows.Internal.ComposableShell.ITreeNode
    {
        Boolean KeepAlive{ get; };
        Boolean KeepAlive{ set; };
        void KeepAliveFor(UInt64 durationInMs);
    };

}
