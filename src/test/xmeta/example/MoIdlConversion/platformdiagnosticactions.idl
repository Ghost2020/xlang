






namespace Windows.System.Diagnostics.TraceReporting
{
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticEscalationType
    {
        OnCompletion,
        OnFailure,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticTraceSlotType
    {
        Alternative,
        AlwaysOn,
        Mini,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticTracePriority
    {
        Normal,
        UserElevated,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticTraceSlotState
    {
        NotRunning,
        Running,
        Throttled,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticActionState
    {
        Success,
        FreeNetworkNotAvailable,
        ACPowerNotAvailable,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum PlatformDiagnosticEventBufferLatencies
    {
        Normal = 1,
        CostDeferred,
        Realtime = 4,
    };



    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [interface_name("Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceInfo", f870ed97-d597-4bf7-88dc-cf5c7dc2a1d2)]
    runtimeclass PlatformDiagnosticTraceInfo
    {
        Guid ScenarioId{ get; };
        UInt64 ProfileHash{ get; };
        Boolean IsExclusive{ get; };
        Boolean IsAutoLogger{ get; };
        Int64 MaxTraceDurationFileTime{ get; };
        Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTracePriority Priority{ get; };
    }

    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [interface_name("Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticTraceRuntimeInfo", 3d4d5e2d-01d8-4768-8554-1eb1ca610986)]
    runtimeclass PlatformDiagnosticTraceRuntimeInfo
    {
        Int64 RuntimeFileTime{ get; };
        Int64 EtwRuntimeFileTime{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000003)]
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [static_name("Windows.System.Diagnostics.TraceReporting.IPlatformDiagnosticActionsStatics", c1145cfa-9292-4267-890a-9ea3ed072312)]
    [threading(both)]
    runtimeclass PlatformDiagnosticActions
    {
        static Boolean IsScenarioEnabled(Guid scenarioId);
        static Boolean TryEscalateScenario(Guid scenarioId, PlatformDiagnosticEscalationType escalationType, String outputDirectory, Boolean timestampOutputDirectory, Boolean forceEscalationUpload, Windows.Foundation.Collections.IMapView <String, String>  triggers);
        static Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState DownloadLatestSettingsForNamespace(String partner, String feature, Boolean isScenarioNamespace, Boolean downloadOverCostedNetwork, Boolean downloadOverBattery);
        static Windows.Foundation.Collections.IVectorView <Guid>  GetActiveScenarioList();
        static Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticActionState ForceUpload(PlatformDiagnosticEventBufferLatencies latency, Boolean uploadOverCostedNetwork, Boolean uploadOverBattery);
        static Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceSlotState IsTraceRunning(PlatformDiagnosticTraceSlotType slotType, Guid scenarioId, UInt64 traceProfileHash);
        static Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceRuntimeInfo GetActiveTraceRuntime(PlatformDiagnosticTraceSlotType slotType);
        static Windows.Foundation.Collections.IVectorView <Windows.System.Diagnostics.TraceReporting.PlatformDiagnosticTraceInfo>  GetKnownTraceList(PlatformDiagnosticTraceSlotType slotType);
    }

}
