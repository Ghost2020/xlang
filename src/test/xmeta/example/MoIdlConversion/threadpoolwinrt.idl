






namespace Windows.System.Threading
{
    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WorkItemPriority
    {
        Low = -1,
        Normal,
        High,
    };

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [flags]
    enum WorkItemOptions
    {
        None,
        TimeSliced,
    };

    [webhosthidden]
    [uuid(faaea667-fbeb-49cb-adb2-71184c556e43)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void TimerElapsedHandler(ThreadPoolTimer timer);

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [webhosthidden]
    [static_name("Windows.System.Threading.IThreadPoolTimerStatics", 1a8a9d02-e482-461b-b8c7-8efad1cce590)]
    [interface_name("Windows.System.Threading.IThreadPoolTimer", 594ebe78-55ea-4a88-a50d-3402ae1f9cf2)]
    [threading(both)]
    runtimeclass ThreadPoolTimer
    {
        [method_name("CreatePeriodicTimer")] static Windows.System.Threading.ThreadPoolTimer CreatePeriodicTimer(TimerElapsedHandler handler, Windows.Foundation.TimeSpan period);
        [method_name("CreateTimer")] static Windows.System.Threading.ThreadPoolTimer CreateTimer(TimerElapsedHandler handler, Windows.Foundation.TimeSpan delay);
        [method_name("CreatePeriodicTimerWithCompletion")] static Windows.System.Threading.ThreadPoolTimer CreatePeriodicTimer(TimerElapsedHandler handler, Windows.Foundation.TimeSpan period, TimerDestroyedHandler destroyed);
        [method_name("CreateTimerWithCompletion")] static Windows.System.Threading.ThreadPoolTimer CreateTimer(TimerElapsedHandler handler, Windows.Foundation.TimeSpan delay, TimerDestroyedHandler destroyed);
        Windows.Foundation.TimeSpan Period{ get; };
        Windows.Foundation.TimeSpan Delay{ get; };
        void Cancel();
    }

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(34ed19fa-8384-4eb9-8209-fb5094eeec35)]
    delegate void TimerDestroyedHandler(ThreadPoolTimer timer);

    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(1d1a8b8b-fa66-414f-9cbd-b65fc99d17fa)]
    delegate void WorkItemHandler(Windows.Foundation.IAsyncAction operation);




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [static_name("Windows.System.Threading.IThreadPoolStatics", b6bf67dd-84bd-44f8-ac1c-93ebcb9dba91)]
    [threading(both)]
    runtimeclass ThreadPool
    {
        [method_name("RunAsync")] static Windows.Foundation.IAsyncAction RunAsync(WorkItemHandler handler);
        [method_name("RunWithPriorityAsync")] static Windows.Foundation.IAsyncAction RunAsync(WorkItemHandler handler, WorkItemPriority priority);
        [method_name("RunWithPriorityAndOptionsAsync")] static Windows.Foundation.IAsyncAction RunAsync(WorkItemHandler handler, WorkItemPriority priority, WorkItemOptions options);
    }

}
namespace Windows.System.Threading.Core
{
    [webhosthidden]
    [uuid(923c402e-4721-440e-9dda-55b6f2e07710)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    delegate void SignalHandler(SignalNotifier signalNotifier, Boolean timedOut);

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [webhosthidden]
    [marshaling_behavior(agile)]
    [static_name("Windows.System.Threading.Core.ISignalNotifierStatics", 1c4e4566-8400-46d3-a115-7d0c0dfc9f62)]
    [interface_name("Windows.System.Threading.Core.ISignalNotifier", 14285e06-63a7-4713-b6d9-62f64b56fb8b)]
    [threading(both)]
    runtimeclass SignalNotifier
    {
        [method_name("AttachToEvent")] static Windows.System.Threading.Core.SignalNotifier AttachToEvent(String name, SignalHandler handler);
        [method_name("AttachToEventWithTimeout")] static Windows.System.Threading.Core.SignalNotifier AttachToEvent(String name, SignalHandler handler, Windows.Foundation.TimeSpan timeout);
        [method_name("AttachToSemaphore")] static Windows.System.Threading.Core.SignalNotifier AttachToSemaphore(String name, SignalHandler handler);
        [method_name("AttachToSemaphoreWithTimeout")] static Windows.System.Threading.Core.SignalNotifier AttachToSemaphore(String name, SignalHandler handler, Windows.Foundation.TimeSpan timeout);
        void Enable();
        void Terminate();
    }



    [webhosthidden]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.System.Threading.Core.IPreallocatedWorkItemFactory", e3d32b45-dfea-469b-82c5-f6e3cefdeafb)]
    [interface_name("Windows.System.Threading.Core.IPreallocatedWorkItem", b6daa9fc-bc5b-401a-a8b2-6e754d14daa6)]
    [threading(both)]
    runtimeclass PreallocatedWorkItem
    {
        [method_name( "CreateWorkItem" )] PreallocatedWorkItem(Windows.System.Threading.WorkItemHandler handler);
        [method_name( "CreateWorkItemWithPriority" )] PreallocatedWorkItem(Windows.System.Threading.WorkItemHandler handler, Windows.System.Threading.WorkItemPriority priority);
        [method_name( "CreateWorkItemWithPriorityAndOptions" )] PreallocatedWorkItem(Windows.System.Threading.WorkItemHandler handler, Windows.System.Threading.WorkItemPriority priority, Windows.System.Threading.WorkItemOptions options);
        Windows.Foundation.IAsyncAction RunAsync();
    }



}
