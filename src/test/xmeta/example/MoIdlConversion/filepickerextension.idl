









namespace Windows.Storage.Pickers.Provider
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [deprecated("Since Windows 10, only apps can remove files, not end users so the FileRemoved event will not be raised.", deprecate, Windows.Foundation.UniversalApiContract, 0x30000)]
    [interface_name("Windows.Storage.Pickers.Provider.IFileRemovedEventArgs", 13043da7-7fca-4c2b-9eca-6890f9f00185)]
    runtimeclass FileRemovedEventArgs
    {
        [deprecated("Since Windows 10, only apps can remove files, not end users so the FileRemoved event will not be raised.", deprecate, Windows.Foundation.UniversalApiContract, 0x30000)]
        String Id{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AddFileResult
    {
        Added,
        AlreadyAdded,
        NotAllowed,
        Unavailable,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FileSelectionMode
    {
        Multiple,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.IFileOpenPickerUI", dda45a10-f9d4-40c4-8af5-c5b6b5a61d1d)]
    runtimeclass FileOpenPickerUI
    {
        Windows.Storage.Pickers.Provider.AddFileResult AddFile(String id, Windows.Storage.IStorageFile file);
        void RemoveFile(String id);
        Boolean ContainsFile(String id);
        Boolean CanAddFile(Windows.Storage.IStorageFile file);
        Windows.Foundation.Collections.IVectorView <String>  AllowedFileTypes{ get; };
        Windows.Storage.Pickers.Provider.FileSelectionMode SelectionMode{ get; };
        String SettingsIdentifier{ get; };
        String Title{ get; };
        String Title{ set; };
        [deprecated("Since Windows 10, only apps can remove files, not end users so the FileRemoved event will not be raised.", deprecate, Windows.Foundation.UniversalApiContract, 0x30000)]
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Pickers.Provider.FileOpenPickerUI, Windows.Storage.Pickers.Provider.FileRemovedEventArgs>  FileRemoved;
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Pickers.Provider.FileOpenPickerUI, Windows.Storage.Pickers.Provider.PickerClosingEventArgs>  Closing;
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.IPickerClosingEventArgs", 7e59f224-b332-4f12-8b9f-a8c2f06b32cd)]
    runtimeclass PickerClosingEventArgs
    {
        Windows.Storage.Pickers.Provider.PickerClosingOperation ClosingOperation{ get; };
        Boolean IsCanceled{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.IPickerClosingOperation", 4ce9fb84-beee-4e39-a773-fc5f0eae328d)]
    runtimeclass PickerClosingOperation
    {
        Windows.Storage.Pickers.Provider.PickerClosingDeferral GetDeferral();
        Windows.Foundation.DateTime Deadline{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.IPickerClosingDeferral", 7af7f71e-1a67-4a31-ae80-e907708a619b)]
    runtimeclass PickerClosingDeferral
    {
        void Complete();
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum SetFileNameResult
    {
        Succeeded,
        NotAllowed,
        Unavailable,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.IFileSavePickerUI", 9656c1e7-3e56-43cc-8a39-33c73d9d542b)]
    runtimeclass FileSavePickerUI
    {
        String Title{ get; };
        String Title{ set; };
        Windows.Foundation.Collections.IVectorView <String>  AllowedFileTypes{ get; };
        String SettingsIdentifier{ get; };
        String FileName{ get; };
        Windows.Storage.Pickers.Provider.SetFileNameResult TrySetFileName(String value);
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Pickers.Provider.FileSavePickerUI, Object>  FileNameChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Pickers.Provider.FileSavePickerUI, Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs>  TargetFileRequested;
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs", b163dbc1-1b51-4c89-a591-0fd40b3c57c9)]
    runtimeclass TargetFileRequestedEventArgs
    {
        Windows.Storage.Pickers.Provider.TargetFileRequest Request{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.ITargetFileRequest", 42bd3355-7f88-478b-8e81-690b20340678)]
    runtimeclass TargetFileRequest
    {
        Windows.Storage.IStorageFile TargetFile{ get; };
        Windows.Storage.IStorageFile TargetFile{ set; };
        Windows.Storage.Pickers.Provider.TargetFileRequestDeferral GetDeferral();
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral", 4aee9d91-bf15-4da9-95f6-f6b7d558225b)]
    runtimeclass TargetFileRequestDeferral
    {
        void Complete();
    }


}
namespace Windows.Storage.Provider
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum CachedFileTarget
    {
        Local,
        Remote,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum UIStatus
    {
        Unavailable,
        Hidden,
        Visible,
        Complete,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Provider.ICachedFileUpdaterUI", 9e6f41e6-baf2-4a97-b600-9333f5df80fd)]
    runtimeclass CachedFileUpdaterUI
    {
        String Title{ get; };
        String Title{ set; };
        Windows.Storage.Provider.CachedFileTarget UpdateTarget{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Provider.CachedFileUpdaterUI, Windows.Storage.Provider.FileUpdateRequestedEventArgs>  FileUpdateRequested;
        event Windows.Foundation.TypedEventHandler <Windows.Storage.Provider.CachedFileUpdaterUI, Object>  UIRequested;
        Windows.Storage.Provider.UIStatus UIStatus{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Storage.Provider.ICachedFileUpdaterUI2", 8856a21c-8699-4340-9f49-f7cad7fe8991)]
        {
            Windows.Storage.Provider.FileUpdateRequest UpdateRequest{ get; };
            Windows.Storage.Provider.FileUpdateRequestDeferral GetDeferral();
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Provider.IFileUpdateRequestedEventArgs", 7b0a9342-3905-438d-aaef-78ae265f8dd2)]
    runtimeclass FileUpdateRequestedEventArgs
    {
        Windows.Storage.Provider.FileUpdateRequest Request{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Provider.IFileUpdateRequest", 40c82536-c1fe-4d93-a792-1e736bc70837)]
    runtimeclass FileUpdateRequest
    {
        String ContentId{ get; };
        Windows.Storage.StorageFile File{ get; };
        Windows.Storage.Provider.FileUpdateStatus Status{ get; };
        Windows.Storage.Provider.FileUpdateStatus Status{ set; };
        Windows.Storage.Provider.FileUpdateRequestDeferral GetDeferral();
        void UpdateLocalFile(Windows.Storage.IStorageFile value);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.Storage.Provider.IFileUpdateRequest2", 82484648-bdbe-447b-a2ee-7afe6a032a94)]
        {
            String UserInputNeededMessage{ get; };
            String UserInputNeededMessage{ set; };
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.Storage.Provider.IFileUpdateRequestDeferral", ffcedb2b-8ade-44a5-bb00-164c4e72f13a)]
    runtimeclass FileUpdateRequestDeferral
    {
        void Complete();
    }




}
