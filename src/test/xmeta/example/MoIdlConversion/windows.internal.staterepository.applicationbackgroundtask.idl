










namespace Windows.Internal.StateRepository
{
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [static_name("Windows.Internal.StateRepository.IApplicationBackgroundTaskStatics", 92db0912-63ca-485c-b2a3-9e51a35c7127)]
    [interface_name("Windows.Internal.StateRepository.IApplicationBackgroundTask", 3ff4ffb5-a734-4ee0-b8dc-b29d313ea111)]
    [threading(both)]
    runtimeclass ApplicationBackgroundTask
    {
        static Boolean Exists(Int64 applicationBackgroundTaskID);
        static Boolean ExistsByExtension(ApplicationExtension Extension);
        static Boolean ExistsByExtensionAndIndex(ApplicationExtension Extension, Int32 Index);
        static Boolean ExistsByType(String Type);
        static Boolean ExistsByTypeAndExtension(String Type, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask Get(Int64 applicationBackgroundTaskID);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask TryGet(Int64 applicationBackgroundTaskID);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask GetByExtensionAndIndex(ApplicationExtension Extension, Int32 Index);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask TryGetByExtensionAndIndex(ApplicationExtension Extension, Int32 Index);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask GetByTypeAndExtension(String Type, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.ApplicationBackgroundTask TryGetByTypeAndExtension(String Type, ApplicationExtension Extension);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationBackgroundTask>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationBackgroundTask>  FindByExtension(ApplicationExtension Extension);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationBackgroundTask>  FindByType(String Type);
        static Boolean ExistsByUserAndType(User User, String Type);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationBackgroundTask>  FindByUserAndType(User User, String Type);
        ApplicationBackgroundTask();
        Int64 _BackgroundTaskID{ get; };
        Int64 _BackgroundTaskID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        String Type{ get; };
        String Type{ set; };
        Int64 Extension{ get; };
        Int64 Extension{ set; };
        Windows.Internal.StateRepository.ApplicationExtension GetExtension();
        void SetExtension(ApplicationExtension value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
