












namespace Windows.ApplicationModel.Store.Preview.InstallControl.Internal
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    enum AppImageType
    {
        Tile,
        Logo,
    };


    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.Internal.IAppImage", b2d3eafa-ee17-41be-8212-eb3e28f4bbd7)]
    runtimeclass AppImage
    {
        Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppImageType AppImageType{ get; };
        UInt32 Width{ get; };
        UInt32 Height{ get; };
        String BackgroundColor{ get; };
        String ForegroundColor{ get; };
        String Uri{ get; };
        Windows.Foundation.IAsyncOperation <String>  DownloadAsync();
    }

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    enum PackageFormat
    {
        Unknown,
        Xap,
        Appx,
        AppxBundle,
    };


    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.Internal.IAppData", 30ee2287-5993-4a25-b150-96d09a53e851)]
    runtimeclass AppData
    {
        String ProductId{ get; };
        String PackageIdentityName{ get; };
        String PackageFamilyName{ get; };
        String PackageFullName{ get; };
        String CategoryId{ get; };
        Windows.ApplicationModel.Store.Preview.InstallControl.Internal.PackageFormat PackageFormat{ get; };
        Windows.Foundation.Collections.IVectorView <String>  PackageRelativeAppIds{ get; };
        String PublisherCertificateName{ get; };
        String LegacyWindowsStoreProductId{ get; };
        String LegacyWindowsPhoneProductId{ get; };
        String Title{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppImage>  Images{ get; };
        UInt64 DownloadSizeInBytes{ get; };
        Boolean IsDeviceCompanionApp{ get; };
        Windows.Foundation.IAsyncOperation <Boolean>  GetIsApplicableAsync(String correlationVector);
        Windows.Foundation.IAsyncAction GetFreeEntitlementAsync(Boolean useDeviceId, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartInstallAsync(Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(Boolean userInteractive, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartRestoreAsync(String correlationVector);
        String PlatformDependencyXmlBlob{ get; };
        String MainPackageFamilyName{ get; };
        Boolean IsVisibleInAppList{ get; };
        Boolean IsExclusivityFailed{ get; };
        Boolean IsAllowedToInstall{ get; };
    }

    [uuid(8e755074-4616-4b46-b1ac-a6169348b35b)]
    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    interface IAppInstallItemInternal
    {
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData>  GetAppDataAsync();
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(d13f6fe9-1273-4de1-ba6c-009381be86ea)]
    interface IAppInstallItemInternal2
    {
        Boolean Mandatory{ get; };
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallStatus>  EnsureDownloadAsync(String correlationVector);
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(3bbe4288-ce98-4115-8003-e096bed950a5)]
    interface IAppInstallItemInternal3
    {
        Boolean IsValidForUser(Windows.System.User user);
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(edbade77-d999-4c16-93ab-26270b0e4dc8)]
    interface IAppInstallItemInternal4
    {
        UInt32 Flags{ get; };
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    enum AppIdType
    {
        ProductId,
        PackageFamilyName,
        LegacyWindowsStoreProductId,
        LegacyWindowsPhoneProductId,
        LegacyWindowsPhonePackageId,
    };


    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.Internal.IInstallAppInfo", 2b7a9a4b-b688-42bc-8b8e-b3439137d20e)]
    runtimeclass InstallAppInfo
    {
        String AppId{ get; };
        String AppId{ set; };
        String CatalogId{ get; };
        String CatalogId{ set; };
        String BundleId{ get; };
        String BundleId{ set; };
        String SkuId{ get; };
        String SkuId{ set; };
        Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem Item{ get; };
        HRESULT HResult{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Store.Preview.InstallControl.Internal.IOEMHardwareInfo", 853d073f-02eb-4061-89b4-4c6e057f487f)]
    runtimeclass OEMHardwareInfo
    {
        String OemId{ get; };
        String ScmId{ get; };
    }

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(57b15f7a-3367-48f6-bb71-bacba1331a6e)]
    interface IAppInstallManagerInternal
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData> >  GetAppDataAsync(Windows.Foundation.Collections.IVectorView <String>  pIds, AppIdType idType, Boolean checkApplicability, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData>  GetFreeEntitlementAsync(String appId, AppIdType idType, Boolean useDeviceId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData>  GetFreeEntitlementByProductSkuAvailabilityAsync(String productId, String skuId, String availabilityId, Boolean useDeviceId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartAppInstallAsync(String appId, AppIdType idType, Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, String catalogId, String bundleId, String skuId, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(String appId, AppIdType idType, Boolean userInteractive, String catalogId, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesAsync(Boolean userInteractive, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartAppRestoreAsync(String appId, AppIdType idType);
    };

    [uuid(e5362e53-1657-4c6c-b537-ddb132eb14de)]
    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    interface IAppInstallManagerInternal2
    {
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  GetAppInstallItemsForUser(Windows.System.User user);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallAsync(String productId, String catalogId, String flightId, String clientId, Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, Boolean forceUseOfNonRemovableStorage, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallForUserAsync(Windows.System.User user, String productId, String catalogId, String flightId, String clientId, Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, Boolean forceUseOfNonRemovableStorage, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InstallAppInfo> >  StartAppInstallsAsync(Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InstallAppInfo>  apps, AppIdType idType, Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForUpdatesWithPausedAddAsync(Windows.System.User user, Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Package>  pPackages, Boolean addAsPaused, String correlationVector);
        void ResumeWithFlags(String productId, UInt32 dwSetFlags, UInt32 dwResetFlags, String correlationVector);
    };

    [uuid(8ae50234-8fd5-4743-9f5a-d6bb44f24f29)]
    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    interface IAppInstallManagerInternal3
    {
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData>  GetFreeEntitlementAsync(String appId, AppIdType idType, Boolean useDeviceId, String correlationVector, String campaignId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.OEMHardwareInfo>  GetOEMHardwareInfoAsync();
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  SearchForUpdatesAsync(String appId, AppIdType idType, Boolean userInteractive, Boolean allowCachedResults, String catalogId, String correlationVector);
        void ResumeByCategoryId(String categoryId);
        Object SuspendQueue(UInt32 timeoutInMs);
        WindowsUpdate.Internal.IInstallItem Fulfill(UInt64 userContext, WindowsUpdate.Internal.IFulfillmentDataInfo fulfillmentData, Boolean hide, Boolean userInteractive, String clientId, String correlationVector);
        Windows.Foundation.Collections.IVectorView <WindowsUpdate.Internal.IInstallItem>  ActiveInstalls{ get; };
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(74367b75-5f04-437a-a982-e62c0faf49fa)]
    interface IAppInstallManagerInternal4
    {
        void RegisterCurrentUser();
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartDiscInstallForUserAsync(Windows.System.User user, Windows.Foundation.Uri sourceUri, Windows.Foundation.Collections.IIterable <Windows.Foundation.Uri>  dependencies, Windows.Management.Deployment.PackageVolume targetVolume, Windows.Foundation.Collections.PropertySet metadataProperties);
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(c345b3e2-a8a9-40b6-b583-4a564fe2b375)]
    interface IAppInstallManagerInternal5
    {
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  StartAppInstallForDeviceAsync(String productId, String skuId, Boolean allowDownloadOnAnyNetwork, Boolean forceUseOfNonRemovableStorage, String clientId, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem>  InstallPackageByPackageFullNameForUserAsync(Windows.System.User user, String packageFullName, String clientId, String correlationVector, Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions installOptions);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartProductInstallWithOptionsForUserAsync(Windows.System.User user, String productId, String flightId, String clientId, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, String correlationVector, Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallOptions installOptions);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesAsync(Boolean userInteractive, String clientId, String correlationVector);
        void SetQueueOrder(String correlationVector, Windows.Foundation.Collections.IIterable <String>  orderedProductIds);
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(e06ec10c-d5c0-4fb3-945e-6b88b1803f4a)]
    interface IAppInstallManagerInternal6
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  StartBundleInstallForDeviceAsync(String productId, String catalogId, String flightId, String clientId, Boolean repair, Boolean userInteractive, Boolean allowDownloadOnAnyNetwork, Boolean forceUseOfNonRemovableStorage, String correlationVector, Windows.Management.Deployment.PackageVolume targetVolume);
    };

    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    [uuid(5935c6e7-acaf-4244-baa4-2e73209906b4)]
    interface IAppInstallStatusInternal
    {
        Boolean IsDownloaded{ get; };
    };

    [uuid(20e1713b-cbcc-442d-b441-6440689b8912)]
    [contract(Windows.ApplicationModel.Store.Preview.InstallControl.Internal.InternalContract, 1)]
    interface IAppInstallManagerInternal7
    {
        void UnblockLowPriorityWorkItems(String clientId, String correlationVector);
        void BlockLowPriorityWorkItems(String clientId, String correlationVector);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallItem> >  SearchForAllUpdatesWithUpdateOptionsAsync(Boolean userInteractive, String correlationVector, String clientId, Windows.ApplicationModel.Store.Preview.InstallControl.AppUpdateOptions updateOptions);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Store.Preview.InstallControl.Internal.AppData> >  GetAppDataForUserAsync(Windows.System.User user, Windows.Foundation.Collections.IVectorView <String>  pIds, AppIdType idType, Boolean checkApplicability, String correlationVector);
    };

}
