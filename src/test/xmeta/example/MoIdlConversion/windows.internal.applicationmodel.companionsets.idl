








namespace Windows.Internal.ApplicationModel.CompanionSets
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    enum ConfidenceLevel
    {
        Low,
        High,
    };

    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    enum SaveType
    {
        UpdateOnly,
        UpdateAndArchive,
        PreserveAndMarkLowConfidence,
    };

    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    enum LoadOptions
    {
        AnchorMatch,
        AnchorAndCompanionMatch,
    };


    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    [constructor_name("Windows.Internal.ApplicationModel.CompanionSets.ICompanionSetFactory", f1c59d09-61c0-4c73-8091-a2099484a40f)]
    [static_name("Windows.Internal.ApplicationModel.CompanionSets.ICompanionSetStatics", ac5cf826-876d-4d7d-8140-ef14fc261b45)]
    [interface_name("Windows.Internal.ApplicationModel.CompanionSets.ICompanionSet", 00119f69-02d1-4db2-a10b-559fc761c4a5)]
    runtimeclass CompanionSet
    {
        [method_name( "CreateWithAnchor" )] CompanionSet(Windows.ApplicationModel.UserActivities.UserActivity anchor);
        static Windows.Internal.ApplicationModel.CompanionSets.CompanionSet CopyCompanionSet(CompanionSet companionSet);
        static Boolean IsAnchorEligible(Windows.ApplicationModel.UserActivities.UserActivity activity);
        static Windows.Foundation.IAsyncAction SaveAsync(CompanionSet companionSet, SaveType saveType);
        static Windows.Foundation.IAsyncOperation <Boolean>  TryDeleteAsync(Windows.ApplicationModel.UserActivities.UserActivity activity);
        static Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.CompanionSets.GetCompanionSetResult>  TryGetCompanionSetByActivityAsync(Windows.ApplicationModel.UserActivities.UserActivity activity, LoadOptions loadOptions);
        static Windows.Internal.ApplicationModel.CompanionSets.ReadOnlyCompanionSet TryGetReadOnlyCompanionSetFromUserActivityCollection(Windows.Internal.ApplicationModel.Sets.UserActivityCollection collection);
        static Windows.Internal.ApplicationModel.CompanionSets.CompanionSet TryGetCompanionSetFromUserActivityCollection(Windows.Internal.ApplicationModel.Sets.UserActivityCollection collection);
        String Id{ get; };
        Windows.ApplicationModel.UserActivities.UserActivity Anchor{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  UserActivities{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  CompanionUserActivities{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  ArchivedUserActivities{ get; };
        Windows.Internal.ApplicationModel.CompanionSets.ConfidenceLevel ConfidenceLevel{ get; };
        void SetUserActivities(Windows.Foundation.Collections.IVector <Windows.ApplicationModel.UserActivities.UserActivity>  activities);
        void ClearCompanions();
        Boolean TryRemoveUserActivityById(Guid activityId);
        void AddRelatedUserActivity(Windows.ApplicationModel.UserActivities.UserActivity relatedActivity);
        Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.Sets.UserActivityCollectionTimelineActivity>  GetTimelineActivityAsync();
        Windows.Foundation.IAsyncAction UpdateTimelineActivityAsync();
        Windows.Foundation.IAsyncAction DeleteTimelineActivityAsync();
    }

    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    [interface_name("Windows.Internal.ApplicationModel.CompanionSets.IGetCompanionSetResult", 44c12b09-e481-44d4-8972-ef50630599df)]
    runtimeclass GetCompanionSetResult
    {
        Windows.Internal.ApplicationModel.CompanionSets.CompanionSet AnchorMatch{ get; };
        Windows.Internal.ApplicationModel.CompanionSets.CompanionSet CompanionMatch{ get; };
    }

    [contract(Windows.Internal.ApplicationModel.CompanionSets.InternalContract, 1)]
    [interface_name("Windows.Internal.ApplicationModel.CompanionSets.IReadOnlyCompanionSet", 13c7b5d8-67b4-4a7c-9307-996f931bec8e)]
    runtimeclass ReadOnlyCompanionSet
    {
        String Id{ get; };
        Windows.ApplicationModel.UserActivities.UserActivity Anchor{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  UserActivities{ get; };
        Windows.Internal.ApplicationModel.CompanionSets.ConfidenceLevel ConfidenceLevel{ get; };
    }





}
