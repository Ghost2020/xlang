








namespace Windows.Security.Authentication.Web.Core
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum WebTokenRequestPromptType
    {
        Default,
        ForceAuthentication,
    };





    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [constructor_name("Windows.Security.Authentication.Web.Core.IWebTokenRequestFactory", 6cf2141c-0ff0-4c67-b84f-99ddbe4a72c9)]
    [interface_name("Windows.Security.Authentication.Web.Core.IWebTokenRequest", b77b4d68-adcb-4673-b364-0cf7b35caf97)]
    [threading(both)]
    runtimeclass WebTokenRequest
    {
        [method_name( "Create" )] WebTokenRequest(Windows.Security.Credentials.WebAccountProvider provider, String scope, String clientId);
        [method_name( "CreateWithPromptType" )] WebTokenRequest(Windows.Security.Credentials.WebAccountProvider provider, String scope, String clientId, WebTokenRequestPromptType promptType);
        [method_name( "CreateWithProvider" )] WebTokenRequest(Windows.Security.Credentials.WebAccountProvider provider);
        [method_name( "CreateWithScope" )] WebTokenRequest(Windows.Security.Credentials.WebAccountProvider provider, String scope);
        Windows.Security.Credentials.WebAccountProvider WebAccountProvider{ get; };
        String Scope{ get; };
        String ClientId{ get; };
        Windows.Security.Authentication.Web.Core.WebTokenRequestPromptType PromptType{ get; };
        Windows.Foundation.Collections.IMap <String, String>  Properties{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [interface_name("Windows.Security.Authentication.Web.Core.IWebTokenRequest2", d700c079-30c8-4397-9654-961c3be8b855)]
        {
            Windows.Foundation.Collections.IMap <String, String>  AppProperties{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.Security.Authentication.Web.Core.IWebTokenRequest3", 5a755b51-3bb1-41a5-a63d-90bc32c7db9a)]
        {
            String CorrelationId{ get; };
            String CorrelationId{ set; };
        }
    }


    [dualapipartition(0xa000002)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.Security.Authentication.Web.Core.IWebAccountEventArgs", 6fb7037d-424e-44ec-977c-ef2415462a5a)]
    runtimeclass WebAccountEventArgs
    {
        Windows.Security.Credentials.WebAccount Account{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 6)]
    enum FindAllWebAccountsStatus
    {
        Success,
        NotAllowedByProvider,
        NotSupportedByProvider,
        ProviderError,
    };


    [contract(Windows.Foundation.UniversalApiContract, 6)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Core.IFindAllAccountsResult", a5812b5d-b72e-420c-86ab-aac0d7b7261f)]
    runtimeclass FindAllAccountsResult
    {
        Windows.Foundation.Collections.IVectorView <Windows.Security.Credentials.WebAccount>  Accounts{ get; };
        Windows.Security.Authentication.Web.Core.FindAllWebAccountsStatus Status{ get; };
        Windows.Security.Authentication.Web.Core.WebProviderError ProviderError{ get; };
    }




    [dualapipartition(0xa000002)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Security.Authentication.Web.Core.IWebAccountMonitor", 7445f5fd-aa9d-4619-8d5d-c138a4ede3e5)]
    runtimeclass WebAccountMonitor
    {
        event Windows.Foundation.TypedEventHandler <Windows.Security.Authentication.Web.Core.WebAccountMonitor, Windows.Security.Authentication.Web.Core.WebAccountEventArgs>  Updated;
        event Windows.Foundation.TypedEventHandler <Windows.Security.Authentication.Web.Core.WebAccountMonitor, Windows.Security.Authentication.Web.Core.WebAccountEventArgs>  Removed;
        event Windows.Foundation.TypedEventHandler <Windows.Security.Authentication.Web.Core.WebAccountMonitor, Object>  DefaultSignInAccountChanged;
    }


    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics2", f584184a-8b57-4820-b6a4-70a5b6fcf44a)]
    [threading(both)]
    runtimeclass WebAuthenticationCoreManager
    {

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics3", 2404eeb2-8924-4d93-ab3a-99688b419d56)]
        {
            static Windows.Security.Authentication.Web.Core.WebAccountMonitor CreateWebAccountMonitor(Windows.Foundation.Collections.IIterable <Windows.Security.Credentials.WebAccount>  webAccounts);
        }

        [contract(Windows.Foundation.UniversalApiContract, 6)]
        [static_name("Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics4", 54e633fe-96e0-41e8-9832-1298897c2aaf)]
        {
            [method_name("FindAllAccountsAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.FindAllAccountsResult>  FindAllAccountsAsync(Windows.Security.Credentials.WebAccountProvider provider);
            [method_name("FindAllAccountsWithClientIdAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.FindAllAccountsResult>  FindAllAccountsAsync(Windows.Security.Credentials.WebAccountProvider provider, String clientId);
            [method_name("FindSystemAccountProviderAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindSystemAccountProviderAsync(String webAccountProviderId);
            [method_name("FindSystemAccountProviderWithAuthorityAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindSystemAccountProviderAsync(String webAccountProviderId, String authority);
            [method_name("FindSystemAccountProviderWithAuthorityForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindSystemAccountProviderAsync(String webAccountProviderId, String authority, Windows.System.User user);
        }
        [method_name("FindAccountProviderWithAuthorityForUserAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindAccountProviderAsync(String webAccountProviderId, String authority, Windows.System.User user);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.Security.Authentication.Web.Core.IWebAuthenticationCoreManagerStatics", 6aca7c92-a581-4479-9c10-752eff44fd34)]
        {
            [method_name("GetTokenSilentlyAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.WebTokenRequestResult>  GetTokenSilentlyAsync(WebTokenRequest request);
            [method_name("GetTokenSilentlyWithWebAccountAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.WebTokenRequestResult>  GetTokenSilentlyAsync(WebTokenRequest request, Windows.Security.Credentials.WebAccount webAccount);
            [method_name("RequestTokenAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.WebTokenRequestResult>  RequestTokenAsync(WebTokenRequest request);
            [method_name("RequestTokenWithWebAccountAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Authentication.Web.Core.WebTokenRequestResult>  RequestTokenAsync(WebTokenRequest request, Windows.Security.Credentials.WebAccount webAccount);
            static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  FindAccountAsync(Windows.Security.Credentials.WebAccountProvider provider, String webAccountId);
            [method_name("FindAccountProviderAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindAccountProviderAsync(String webAccountProviderId);
            [method_name("FindAccountProviderWithAuthorityAsync")] static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccountProvider>  FindAccountProviderAsync(String webAccountProviderId, String authority);
        }
    }


}
