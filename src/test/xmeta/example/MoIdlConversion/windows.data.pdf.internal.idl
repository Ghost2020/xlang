


















namespace Windows.Data.Pdf.Internal
{
    [contractversion(1)]
    [internal]
    apicontract PdfContract{};

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum ReadingDirection
    {
        LeftToRight,
        RightToLeft,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum FindFlag
    {
        None,
        MatchWord,
        MatchCase,
        MatchDiacritic = 4,
        MatchCompat = 8,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum ContextMenuType
    {
        Default,
        Link,
        Image,
        Page = 4,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfDocumentState
    {
        Dirty,
        Clean,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PointerProperties
    {
        None,
        Eraser,
        MouseLeftButton,
        MouseMiddleButton,
        MouseRightButton,
        MouseWheelButton,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum NavigationOption
    {
        InPlace,
        NewTab,
        NewWindow,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum SaveType
    {
        Full,
        Incremental,
    };

    [flags]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfAnnotationType
    {
        None,
        Static,
        Watermark,
        Ink = 4,
        Sticky = 8,
        Link = 16,
        FileAttachment = 32,
        TextBox = 64,
        ListBox = 128,
        ComboBox = 256,
        CheckBox = 512,
        RadioButton = 1024,
        PushButton = 2048,
        Signature = 4096,
        Form = 8128,
        Highlight = 8192,
        Underline = 16384,
        Squiggly = 32768,
        Strikeout = 65536,
        Markup = 122880,
        All = 16777215,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    struct FindResultArgs
    {
        Int32 resultCount;
        Int32 resultSelectedIndex;
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    struct ZoomInformation
    {
        Single minZoom;
        Single maxZoom;
        Single currentZoom;
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum RenderOptions
    {
        Default,
        Immediate,
        Print,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum DocumentPermissionFlags
    {
        None,
        Print,
        Copy = 16,
        Outline = 32,
        Annotate = 64,
        FormFill = 128,
        All = 65535,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum LayoutInitializationOptions
    {
        Default,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum ViewMode
    {
        None,
        FitToWidth,
        FitToPage,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum Layout
    {
        Default,
        SinglePageContinuous,
        SinglePageDiscrete,
        TwoPageDiscrete,
        TwoPageWithCoverPage,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum AnnotationMode
    {
        None,
        Highlight,
        TextComment,
        Ink,
        Erase,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum CommandBarAction
    {
        Show,
        Hide,
        Toggle,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [uuid(42a5bb06-8ce3-4925-b3a6-d9a23222fb44)]
    interface IPdfContentSource
    {
        String DocumentMetadata{ get; };
    };

    [uuid(98beb0a8-c061-4e9c-babf-555389179d0d)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    interface IPdfHost
    {
        Windows.Foundation.Rect GetPageRect(UInt32 pageIndex);
        Windows.Foundation.Rect GetViewportRect();
        Windows.Foundation.Rect GetBufferRect();
        Windows.Foundation.Size GetHostSize();
        void InvalidatePageRect(UInt32 pageIndex, Windows.Foundation.Rect invalidRect);
        void NavigateTo(NavigationOption navigationOption, Windows.Foundation.Uri uri);
        Windows.Foundation.Point TransformPdfPointToContent(Windows.Data.Pdf.PdfPage pdfPage, Windows.Foundation.Point pointInPdfPage);
        Windows.Foundation.Rect TransformPdfRectToContent(Windows.Data.Pdf.PdfPage pdfPage, Windows.Foundation.Rect rc);
        void ScrollBy(Windows.Foundation.Size sizeInContentCoordinates);
        void ChangeView(UInt32 pageIndex, Windows.Foundation.Point offsetInPage, Single zoom);
        Windows.UI.Core.CoreCursorType Cursor{ get; };
        Windows.UI.Core.CoreCursorType Cursor{ set; };
        void CapturePointer(Windows.Devices.Input.PointerDeviceType type, UInt32 pointerId);
        void ReleasePointer(Windows.Devices.Input.PointerDeviceType type, UInt32 pointerId);
        void OnPageSizeChanged(Windows.Data.Pdf.PdfPage pdfPage);
        void HitTestPoint(Windows.Foundation.Point pointInViewport, out Boolean isOnPage, out Windows.Data.Pdf.PdfPage pdfPage, out Windows.Foundation.Point pointInPdfPage);
        void GetDpi(out Single dpiX, out Single dpiY);
        Windows.Foundation.Point TransformContentPointToScreen(Windows.Foundation.Point pointContent);
        Windows.Foundation.Rect TransformContentRectToScreen(Windows.Foundation.Rect contentRect);
        Windows.Foundation.Point TransformScreenPointToContent(Windows.Foundation.Point pointInScreen);
        Windows.Foundation.Rect TransformScreenRectToContent(Windows.Foundation.Rect rectInScreen);
        void Print();
        void ShowContextMenu(Windows.Foundation.Point pointInContent, ContextMenuType menuType);
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum MessageId
    {
        Generic,
        FileAttachmentError,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [uuid(b6d9a0e8-f105-4448-b2e1-468d1af225be)]
    interface IPdfHost2 requires Windows.Data.Pdf.Internal.IPdfHost
    {
        void HandleFileAttachment(String filename, Boolean containerPdfPasswordProtected, Windows.Storage.Streams.IRandomAccessStream attachedFileAccessStream);
        void ShowDialog(MessageId msgId, HRESULT errorCode);
        void SetCaretVisible(Boolean visible);
    };


    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [uuid(2327dd8c-1a3e-4925-89de-296eeda3a7f0)]
    delegate void DownloadProgressHandler(UInt64 unitsDownloaded, UInt64 total);


    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [uuid(ed463e34-a60a-4f97-86b1-e1a4b895436d)]
    interface IInitializeObject
    {
        void Initialize(Object param);
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Data.Pdf.Internal.IPdfStreamWrapperStatics", d140b2d5-f6bc-4a10-83a0-534a2898c132)]
    runtimeclass PdfStreamWrapper
    {
        [method_name("CreateInstance")] static Windows.Storage.Streams.IRandomAccessStream CreateInstance(Boolean streamIsFullyDownloaded, Windows.Storage.Streams.IRandomAccessStream pdfStream, Windows.Foundation.Uri pdfUri, DownloadProgressHandler progressHandler);
        [method_name("CreateInstanceWithPropertySet")] static Windows.Storage.Streams.IRandomAccessStream CreateInstance(Boolean streamIsFullyDownloaded, Windows.Storage.Streams.IRandomAccessStream pdfStream, Windows.Foundation.Uri pdfUri, DownloadProgressHandler progressHandler, Windows.Foundation.Collections.PropertySet propertySet);
        [method_name("CreateInstanceWithPropertySetAndRecoveryStream")] static Windows.Storage.Streams.IRandomAccessStream CreateInstance(Boolean streamIsFullyDownloaded, Windows.Storage.Streams.IRandomAccessStream pdfStream, Windows.Storage.Streams.IRandomAccessStream pdfRecoveryStream, Windows.Foundation.Uri pdfUri, DownloadProgressHandler progressHandler, Windows.Foundation.Collections.PropertySet propertySet);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [static_name("Windows.Data.Pdf.Internal.IPdfControlsStatics", 18d31a9f-2e9a-4036-b464-958037cdeb3d)]
    [interface_name("Windows.Data.Pdf.Internal.IPdfControl", 6f20a70e-270a-4422-800f-b9061139c4f6)]
    runtimeclass PdfControl
    {
        static Windows.Data.Pdf.Internal.PdfControl CreateInstance(Windows.Data.Pdf.PdfDocument pdfDocument, IPdfHost pdfHost);
        void RenderPage(Windows.Data.Pdf.PdfPage pdfPage, Object d2D1DeviceContext, Windows.Foundation.Rect pageBoundsInPixels, Windows.Foundation.Rect dirtyRectInPixels, RenderOptions options);
        void OnHighContrastChanged(Boolean isHighContrast);
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Data.Pdf.Internal.FindResultArgs, Windows.Data.Pdf.Internal.FindResultArgs>  FindAsync(String query, UInt32 startPage, UInt32 endPage, FindFlag flags);
        void SelectFindResult(UInt32 findOperationId, Int32 match);
        void EnableHighlightingFindResults(Boolean enableHighlighting);
        Boolean OnPointerEnter(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc);
        Boolean OnPointerPressed(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc);
        Boolean OnPointerMove(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc);
        Boolean OnPointerReleased(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc);
        Boolean OnPointerExit(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc);
        Boolean OnPointerLost(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId);
        Boolean OnPointerWheelChanged(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, PointerProperties pointerMisc, Int32 mouseWheelDelta);
        void OnTapped(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, out Boolean handled);
        void OnDoubleTapped(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, out Boolean handled);
        void OnRightTapped(Windows.Devices.Input.PointerDeviceType deviceType, UInt32 pointerId, Windows.Foundation.Point pointInContent, Windows.System.VirtualKeyModifiers keyModifiers, out Boolean handled);
        void OnKeyDown(Windows.System.VirtualKey key, Windows.System.VirtualKeyModifiers keyModifiers, out Boolean handled);
        void OnKeyUp(Windows.System.VirtualKey key, Windows.System.VirtualKeyModifiers keyModifiers, out Boolean handled);
        void EnableSelection(Boolean isSelectionEnabled);
        void ClearSelection();
        Windows.ApplicationModel.DataTransfer.DataPackage GetSelection();
        void SetTouchSelectionHandleParams(Windows.Foundation.Size size, UInt32 thickness, Windows.UI.Color color);
        Boolean HasSelection();
        void GetGripperRects(Windows.Data.Pdf.PdfPage pdfPage, out UInt32 gripperCount, out Windows.Foundation.Rect firstGripperRectInPdfPage, out Windows.Foundation.Rect secondGripperRectInPdfPage);
        Object GetAccessibleDocumentRoot(Object windowlessSiteFragment);
        Windows.Graphics.Printing.IPrintDocumentSource GetPrintDocumentSource();
        void Dehydrate();
        void OnLayoutInitialized(LayoutInitializationOptions options);
        void GetSelectionAndContext(UInt32 maxContextlength, out String userSelection, out String contextText, out UInt32 contentOffset);
        void EnableCaretMode(Boolean enable);
        void OnNavigatedToPage(UInt32 pageIndex);
    }

    [uuid(0a623230-d3e7-43fe-864b-3cf6872f1fb3)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    interface IPdfDocumentPriv
    {
        Windows.Data.Pdf.Internal.ReadingDirection ReadingDirection{ get; };
        Boolean IsDataFullyAvailable{ get; };
        Windows.Foundation.IAsyncOperationWithProgress <Int32, Int32>  SaveAsync(Windows.Storage.StorageFile storageFile, SaveType saveType);
        Windows.Foundation.IAsyncOperationWithProgress <Int32, Int32>  SaveRecoveryDataAsync(Windows.Storage.StorageFile storageFile, PdfAnnotationType recoveryAnnotFilter);
        String ContentLanguage{ get; };
        Windows.Data.Pdf.Internal.DocumentPermissionFlags Permissions{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Data.Pdf.Internal.IPdfDocumentPriv, Windows.Data.Pdf.Internal.PdfDocumentState>  DocumentStateChanged;
        Windows.Data.Pdf.Internal.Layout RecommendedLayout{ get; };
    };

    [uuid(7d68a94c-2a0b-4212-be7e-44fd8a6e11fd)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    interface IPdfPagePriv
    {
        String Label{ get; };
    };

    [uuid(3e09eb2f-c414-4766-8c6c-776452ed43be)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    delegate void AnnotationUpdatedHandler(String jsonData, Windows.Storage.Streams.IRandomAccessStream dataStream);

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [uuid(9dabf23a-e384-4b48-84c0-9123eb6a65b4)]
    interface IPdfDataUpdateHandler
    {
        void ApplyChanges(String jsonData, Windows.Storage.Streams.IRandomAccessStream dataStream);
        EventRegistrationToken AddAnnotationUpdatedHandler(PdfAnnotationType annotFilter, AnnotationUpdatedHandler annotUpdatehandler);
        void RemoveAnnotationUpdatedHandler(EventRegistrationToken token);
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfPrintContent
    {
        AllPages,
        CurrentPage,
        CustomPageRange,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfPrintScalingMode
    {
        FitToPage,
        ActualSize,
    };

    [uuid(2c597b4c-cc4c-4697-a3ed-21f2b3efbcc9)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    interface IPdfPrintDocumentSource
    {
        Windows.Data.Pdf.Internal.PdfPrintContent Content{ set; };
        Windows.Data.Pdf.Internal.PdfPrintContent Content{ get; };
        String PageRange{ get; };
        Boolean TrySetPageRange(String value);
        Windows.Graphics.Printing.PrintOrientation PreferredOrientation{ get; };
        Windows.Data.Pdf.Internal.PdfPrintScalingMode ScalingMode{ set; };
        Windows.Data.Pdf.Internal.PdfPrintScalingMode ScalingMode{ get; };
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfCommand
    {
        None,
        Save,
        SaveAs,
        Print,
        Copy,
        AddHighlight,
        EditHighlight,
        DeleteHighlight,
        AddNote,
        OpenNote,
        CommandCount,
    };

    [flags]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfCommandState
    {
        None,
        Visible,
        Enabled,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    struct PdfCommandInfo
    {
        PdfCommand command;
        PdfCommandState state;
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [flags]
    enum PdfSelectionDirection
    {
        TopToBottom,
        BottomToTop,
    };

    [flags]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum PdfSelectionUIAlignment
    {
        SelectionAligned,
        UserInputAligned,
    };

    [flags]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    enum SelectionInputType
    {
        Mouse,
        Touch,
        KeyBoard,
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    struct PdfSelectionInput
    {
        SelectionInputType inputType;
        Windows.Foundation.Point inputPoint;
    };

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    struct PdfSelectionUIData
    {
        PdfSelectionInput selectionInput;
        Windows.Foundation.Rect selectionStart;
        Windows.Foundation.Rect selectionEnd;
        Windows.Foundation.Rect viewPortRect;
        PdfSelectionDirection selectionDirection;
        PdfSelectionUIAlignment uiAlignment;
    };

    [uuid(82a167ba-d7d4-4fae-8cf0-a559a8038cc1)]
    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    interface IPdfComponentHost
    {
        void HandleFileAttachment(String filename, Boolean containerPdfPasswordProtected, Windows.Storage.Streams.IRandomAccessStream attachedFileAccessStream);
        void NavigateTo(NavigationOption navigationOption, Windows.Foundation.Uri uri);
        void ShowContextMenu(Windows.Foundation.Point ptInPdfContentPixels, Windows.Foundation.Collections.IVectorView <Windows.Data.Pdf.Internal.PdfCommandInfo>  menuCmds, String menuArgs);
        void PageChanged(UInt32 pageIndex);
        void RotationChanged(Windows.Data.Pdf.PdfPageRotation rotation);
        void LayoutChanged(Layout layout);
        void AnnotationModeChanged(AnnotationMode annotationMode);
        void ViewModeChanged(ViewMode viewMode);
        void ZoomInformationChanged(ZoomInformation zoomInformation);
        void SelectedFindResultChanged(UInt32 findOperationId, UInt32 currentIndex);
        void NotifyUser(MessageId msgId, HRESULT errorCode, String optionalMessage);
        void ShowCommandBar(Boolean isFocused, CommandBarAction action);
        void OnPdfEvent(String pdfEvent, String pdfEventArgs);
        void ShowSelectionUI(PdfSelectionUIData selectionUIData, Windows.Foundation.Collections.IVectorView <Windows.Data.Pdf.Internal.PdfCommandInfo>  menuCmds, String selectionUIContext);
        void DismissSelectionUI();
        void SetStatusText(String statusText);
    };


    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Data.Pdf.Internal.IPdfComponent", 46f84ed6-f7ad-4ee1-8b51-2b9e4d616346)]
    runtimeclass PdfComponent
    {
        PdfComponent();
        Windows.Foundation.IAsyncAction LoadAsync(Windows.Storage.Streams.IRandomAccessStream inputStream, String password, IPdfComponentHost host, Windows.Foundation.Collections.IPropertySet settings);
        void UpdateClipRect(Windows.Foundation.Rect rect);
        Windows.Data.Pdf.PdfDocument Document{ get; };
        Windows.Data.Pdf.Internal.IPdfDataUpdateHandler CreatePdfDataUpdateHandler();
        Windows.Foundation.IAsyncOperationWithProgress <Windows.Data.Pdf.Internal.FindResultArgs, Windows.Data.Pdf.Internal.FindResultArgs>  FindAsync(String query, FindFlag flags);
        void SelectPreviousFindResult(UInt32 findOperationId);
        void SelectNextFindResult(UInt32 findOperationId);
        void UpdateBarHoverRects(Windows.Foundation.Rect showRect, Windows.Foundation.Rect hideRect);
        Boolean FindResultsHighlightEnabled{ get; };
        Boolean FindResultsHighlightEnabled{ set; };
        Windows.Foundation.IAsyncOperation <String>  LoadOutlineAsync();
        void HandleOutlineAction(String outlineCommand);
        Boolean HasSelection{ get; };
        Windows.ApplicationModel.DataTransfer.DataPackage GetSelection();
        void GetSelectionAndContext(UInt32 maxContextlength, out String userSelection, out String contextText, out UInt32 contentOffset);
        void CopySelectionToClipboard();
        void HandlePrint();
        void GoToPage(UInt32 pageIndex);
        void GoToAnnotation(String annotationGuid);
        void SetViewMode(ViewMode viewMode);
        void SetRotation(Windows.Data.Pdf.PdfPageRotation rotation);
        void SetLayout(Layout layout);
        void SetAnnotationMode(AnnotationMode annotationMode);
        void SetZoomLevel(Single zoomLevel);
        void OnSelectionMenuVisibilityChanged(Boolean visibility);
        UInt32 CurrentPage{ get; };
        Windows.Data.Pdf.Internal.ViewMode ViewMode{ get; };
        Windows.Data.Pdf.PdfPageRotation Rotation{ get; };
        Windows.Data.Pdf.Internal.Layout Layout{ get; };
        Windows.Data.Pdf.Internal.AnnotationMode AnnotationMode{ get; };
        Single ZoomLevel{ get; };
        void CreateHighlightOnSelection(Windows.UI.Color highlightColor);
        void SetCurrentHighlightColor(Windows.UI.Color highlightColor);
        void DeleteCurrentHighlight();
        void ShowNoteUI();
        void PerformNoteAction(String noteActionArgs);
        void SetCaretMode(Boolean enable);
        void SetPdfFileInfo(String pdfFileInfo);
        void GetCommandState(PdfCommand command, out PdfCommandState state);
        void HandleCommand(String pdfCommand, String pdfCommandArgs);
        void Dehydrate();
    }

    [contract(Windows.Data.Pdf.Internal.PdfContract, 1)]
    [flags]
    enum PdfErrorType
    {
        PDF_E_INVALID_STREAM_LENGTH = -2147188726,
        PDF_E_ZERO_STREAM_LENGTH = -2147188594,
        PDF_E_INVALID_FILE_HEADER = -2147188716,
        ERROR_WRONG_PASSWORD = 1323,
        PDF_E_PAGETREE_CATALOG_ROOT_NODE_MISSING = -2147188615,
        PDF_E_INVALID_XREF_TRAILER = -2147188712,
        PDF_E_WRONG_ENCRYPTION_VALUE = -2147188672,
        PDF_E_UNIDENTIFIED_ENCRYPTION_HANDLER = -2147188670,
        PDF_E_PAGE_TREE_NODE_MISSING_OBJECTID = -2147188614,
        PDF_E_OVERFLOW_PAGETREE_DEPTH = -2147188621,
        BUILDER_E_INVALID_PAGE_COUNT = -2147188217,
        PDF_E_CATALOG_REQUIRED_PARAMETER_MISSING = -2147188704,
        PDF_E_UNEXPECTED_TOKEN = -2147188729,
        PDF_E_PAGETREE_NODE_REQUIRED_PARAMETER_INVALID = -2147188709,
        PDF_E_MISSING_OBJECTID = -2147188629,
        PDF_E_PAGETREE_INVALID_CATALOG = -2147188707,
    };

}
