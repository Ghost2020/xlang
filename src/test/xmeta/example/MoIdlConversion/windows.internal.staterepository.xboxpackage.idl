









namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IXboxPackageStatics", cc4d7eec-098e-4763-95dd-4a6d9c3c08b0)]
    [interface_name("Windows.Internal.StateRepository.IXboxPackage", 5c42ad4a-5a45-4ece-8c16-791fa465d1e0)]
    [threading(both)]
    runtimeclass XboxPackage
    {
        XboxPackage();
        static void Add(XboxPackage value);
        static void Update(XboxPackage value);
        static void Delete(XboxPackage value);
        static void DeleteById(Int64 xboxPackageID);
        static void DeleteByEditionId(String EditionId);
        static Boolean Exists(Int64 xboxPackageID);
        static Boolean ExistsByContentId(Guid ContentId);
        static Boolean ExistsByDeviceId(Guid DeviceId);
        static Boolean ExistsByEditionId(String EditionId);
        static Boolean ExistsByEscrowedKeyBlobId(Guid EscrowedKeyBlobId);
        static Boolean ExistsByPackage(Package Package);
        static Boolean ExistsByProductId(Guid ProductId);
        static Boolean ExistsByTitleId(UInt32 TitleId);
        static Windows.Internal.StateRepository.XboxPackage Get(Int64 xboxPackageID);
        static Windows.Internal.StateRepository.XboxPackage TryGet(Int64 xboxPackageID);
        static Windows.Internal.StateRepository.XboxPackage GetByEditionId(String EditionId);
        static Windows.Internal.StateRepository.XboxPackage TryGetByEditionId(String EditionId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByContentId(Guid ContentId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByDeviceId(Guid DeviceId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByEscrowedKeyBlobId(Guid EscrowedKeyBlobId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByPackage(Package Package);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByProductId(Guid ProductId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByTitleId(UInt32 TitleId);
        static void UpdateWorkId(Int64 xboxPackageID, Int64 workId);
        static void ClearWorkByWorkId(Int64 workId);
        static void DeleteByWorkId(Int64 workId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.XboxPackage>  FindByEditionIdPackageFamilyName(String packageFamilyName);
        Int64 _XboxPackageID{ get; };
        Int64 _XboxPackageID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        String EditionId{ get; };
        String EditionId{ set; };
        Guid BuildId{ get; };
        Guid BuildId{ set; };
        Guid DeviceId{ get; };
        Guid DeviceId{ set; };
        UInt64 BuildVersion{ get; };
        UInt64 BuildVersion{ set; };
        Guid ContentId{ get; };
        Guid ContentId{ set; };
        Guid ProductId{ get; };
        Guid ProductId{ set; };
        Boolean IsMediaIdNull{ get; };
        void SetMediaIdToNull();
        String MediaId{ get; };
        String MediaId{ set; };
        UInt64 PackageSize{ get; };
        UInt64 PackageSize{ set; };
        Boolean IsTitleIdNull{ get; };
        void SetTitleIdToNull();
        UInt32 TitleId{ get; };
        UInt32 TitleId{ set; };
        Boolean IsPrimaryServiceConfigIdNull{ get; };
        void SetPrimaryServiceConfigIdToNull();
        Guid PrimaryServiceConfigId{ get; };
        Guid PrimaryServiceConfigId{ set; };
        UInt64 EraVersion{ get; };
        UInt64 EraVersion{ set; };
        Boolean IsEscrowedKeyBlobIdNull{ get; };
        void SetEscrowedKeyBlobIdToNull();
        Guid EscrowedKeyBlobId{ get; };
        Guid EscrowedKeyBlobId{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
