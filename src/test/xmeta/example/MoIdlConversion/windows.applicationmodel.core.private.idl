












namespace Windows.ApplicationModel.Core
{
    [contractversion(1)]
    [internal]
    apicontract InternalPrivateContract{};

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    enum GetViewFromTidOptions
    {
        None,
        UseWindowThread,
        AllowWhileViewUninitializing,
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(17b0e613-942a-422d-904c-f90dc71a7dae)]
    interface ICoreApplicationPrivate
    {
        Windows.Foundation.Collections.IPropertySet Context{ get; };
        Windows.Foundation.Collections.IPropertySet PrivateProperties{ get; };
        Windows.UI.Core.CoreWindow GetWindowFromThreadId(UInt32 threadId);
        Windows.ApplicationModel.Core.ICoreApplicationViewInternal GetViewFromThreadId(UInt32 threadId);
        String GetAppDisplayName();
        event Windows.Foundation.EventHandler <Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs>  FinalUnhandledErrorDetected;
        Windows.UI.Core.CoreDispatcher GetDispatcherFromHwnd(UInt32 hwnd);
        Boolean IsMainWindowCreated();
        Object GetComponentSiteFromSiteId(Guid componentSiteId);
        Windows.ApplicationModel.Core.CoreApplicationView GetCurrentView(GetViewFromTidOptions options);
        UInt32 GetHwndFromViewOnASTA(CoreApplicationView view);
        Object GetComponentSiteByViewInstanceId(UInt32 componentViewInstanceId);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(2e5500b6-66ad-467f-abb5-022a64283d88)]
    interface ICoreApplicationViewInternal
    {
        Windows.Foundation.Collections.IPropertySet PrivateProperties{ get; };
        void SetWindowAndGetDispatcher(Windows.UI.Core.ICoreWindowFactory factory, out Windows.UI.Core.CoreWindow window, out Windows.UI.Core.CoreDispatcher dispatcher);
        void Load(String entryPoint);
        void Activate(IActivationEventCallback activationCallback, Windows.ApplicationModel.Activation.IActivatedEventArgs eventArgs);
        void CancelMode();
        event Windows.Foundation.EventHandler <Object>  ModeCancelRequested;
    };

    [uuid(fefdc269-a317-4e33-9f50-c285c9c29725)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    interface IActivationEventCallback
    {
        void ActivationHandled();
    };

    [uuid(6090202d-2843-4ba5-9b0d-fc88eecd9ce5)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    interface ICoreApplicationPrivate2
    {
        void InitializeForAttach();
        Windows.UI.Core.CoreWindow WaitForActivate();
        Windows.ApplicationModel.Core.CoreApplicationView CreateNonImmersiveView();
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(5b56f847-f7a4-411a-aeb4-875f35488565)]
    interface ICoreApplicationPrivate3
    {
        [method_name("CreateNewViewWithExperienceId")] Windows.ApplicationModel.Core.CoreApplicationView CreateNewView(String experienceId);
    };

    [uuid(9b52bae1-b3e9-46d8-9230-1954ace63b47)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    interface ICoreApplication_ApplicationWindow
    {
        void GetApplicationWindowWithId(Int32 id, out Object applicationWindow);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(8b09dcbb-1381-4067-8751-faebf8a056f1)]
    interface ICoreApplicationView_ApplicationWindow
    {
        void AddApplicationWindow(Object applicationWindow);
        void RemoveApplicationWindow(Object applicationWindow);
        UInt32 GetActiveWindow();
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(9862ca9f-91c6-4d9f-9533-1f4dff2516f8)]
    interface IComponentPrivate
    {
        Object ActivateSpecific(String ACID, Guid componentSiteId);
        Object ActivateSpecificWithViewId(String ACID, UInt32 viewId);
        void ReceiveSharedVisual(Guid componentSiteId, UInt64 sharedVisualHandle);
        void ConfigureComponentInput(Guid componentSiteId, UInt32 hostViewInstanceId, UInt64 hostInteropWindow, out UInt64 componentInteropWindow, out Object componentDisplayInformation);
        UInt32 GetComponentViewInstanceId(Guid componentSiteId);
        UInt32 Disconnect(Guid componentSiteId);
        void SetComponentSiteIdForComponentViewInstanceId(Guid componentSiteId, UInt32 componentViewInstanceId);
        UInt32 GetComponentViewInstanceIdAndDisconnectSiteId(Guid componentSiteId);
    };

    [uuid(3ee65a6a-be0d-4861-aab4-6efcadf8ccfc)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    interface IHostPrivate
    {
        UInt64 RequestSharedVisual(Guid siteId);
        Object CreateComponentSite(UInt64 hostInteropWindow);
        void AddComponentSite(Object componentSite);
        void RemoveComponentSite(Guid siteId);
        void ConfigureHostInput(Guid siteId, UInt64 componentInteropWindow);
        void SetComponentViewInstanceId(Guid siteId, UInt32 viewInstanceId);
        void CreateAndSendSharedVisual(Guid siteId, UInt32 componentViewInstanceId, Object componentCoreApplication);
        UInt32 GetViewInstanceIdFromComponentSiteId(Guid componentSiteId);
        Guid GetComponentSiteIdFromViewInstanceId(UInt32 viewInstanceId);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(6ef1c57f-e05d-4ed5-940a-5be3b1153659)]
    interface IAssociateViewWithObjectModel
    {
        void ProvideViewForDispatcher(CoreApplicationView value);
    };

    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    runtimeclass DefaultInProcBackgroundTask
        : [default]Windows.ApplicationModel.Background.IBackgroundTask
    {
    }

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(6a4d1606-88d2-4d1a-a07d-7fb49792b4f8)]
    interface IFrameworkViewInternal requires Windows.ApplicationModel.Core.IFrameworkView
    {
        void PreProvideActivatedEventArgs(Windows.ApplicationModel.Activation.IActivatedEventArgs value);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(e2a02097-3198-4a9e-be11-5d082801199d)]
    interface IActivationDispatcher
    {
        void Dispatch(String contractId, Object eventArgs, IActivationEventCallback activationSyncCallback);
    };

    [uuid(92cee296-66e6-4678-984a-579e02c88be6)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [internal]
    interface ICoreApplicationViewForceMarshal
    {
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(92696c00-7578-48e1-ac1a-2ca909e2c8cf)]
    interface IActivatableApplication
    {
        void Activate(String entryPoint, String activatableClassId, String contractId, String runtimeType, Windows.ApplicationModel.Activation.IActivatedEventArgs activatedEventArgs, UInt64 aamActivationId, UInt64 activationOptions);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(febb170f-e5e3-41f7-9a8e-a3582757ec80)]
    interface IDisplayRegionInternal
    {
        Single HiMetricScale{ get; };
        UInt32 Id{ get; };
        void GetDesignatedDisplayMonitor(out String monitorDeviceId, out UInt64 adapterId, out UInt64 sourceId);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(53c92c2e-9e12-5434-a289-e2d4e51c7dab)]
    interface IDisplayRegionInternalStatics
    {
        Windows.Foundation.Collections.IVectorView <Object>  GetRegionsForWindowId(UInt32 windowId);
    };

    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    [uuid(b6650dab-abc4-5ec2-bb51-99a2247ecca1)]
    interface IWindowingEnvironmentInternalStatics
    {
        Object GetForWindowId(UInt32 windowId);
    };

}
namespace Windows.ApplicationModel.Infrastructure
{
    [uuid(a3d3a6b9-d5e8-41c1-8d83-f671664a0c54)]
    [contract(Windows.ApplicationModel.Core.InternalPrivateContract, 1)]
    interface ICoreApplicationInitializationPrivate
    {
        void RunDedicatedBackgroundHostWithBackgroundFactoryAndThreadingModel(Windows.ApplicationModel.Background.IBackgroundTaskFactory backgroundTaskFactory, Boolean useAstaForBackgroundThreads);
        void RunFrameworkViewSourceWithBackgroundFactoryAndThreadingModel(Windows.ApplicationModel.Core.IFrameworkViewSource viewProviderFactory, Windows.ApplicationModel.Background.IBackgroundTaskFactory backgroundTaskFactory, Boolean useAstaForBackgroundThreads);
        void RunBackgroundHostWithActivationFactoriesAndThreadingModel(Windows.ApplicationModel.Background.IBackgroundTaskFactory backgroundTaskFactory, Boolean useAstaForBackgroundThreads, Windows.Foundation.IGetActivationFactory activationFactoryCallback);
    };

}
