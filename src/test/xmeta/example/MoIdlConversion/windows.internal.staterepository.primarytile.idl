











namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IPrimaryTileStatics", 85f5783a-3f42-4934-99dd-859a0d4d709d)]
    [interface_name("Windows.Internal.StateRepository.IPrimaryTile", 2013ea7a-2ec3-4191-b40b-de8fe8aca754)]
    [threading(both)]
    runtimeclass PrimaryTile
    {
        PrimaryTile();
        static void Add(PrimaryTile value);
        static void Update(PrimaryTile value);
        static void Delete(PrimaryTile value);
        static void DeleteById(Int64 primaryTileID);
        static void DeleteByApplication(Application Application);
        static void DeleteByApplicationAndTileId(Application Application, String TileId);
        static Boolean Exists(Int64 primaryTileID);
        static Boolean ExistsByApplication(Application Application);
        static Boolean ExistsByApplicationAndTileId(Application Application, String TileId);
        static Boolean ExistsByPackage(Package Package);
        static Windows.Internal.StateRepository.PrimaryTile Get(Int64 primaryTileID);
        static Windows.Internal.StateRepository.PrimaryTile TryGet(Int64 primaryTileID);
        static Windows.Internal.StateRepository.PrimaryTile GetByApplication(Application Application);
        static Windows.Internal.StateRepository.PrimaryTile TryGetByApplication(Application Application);
        static Windows.Internal.StateRepository.PrimaryTile GetByApplicationAndTileId(Application Application, String TileId);
        static Windows.Internal.StateRepository.PrimaryTile TryGetByApplicationAndTileId(Application Application, String TileId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PrimaryTile>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.PrimaryTile>  FindByPackage(Package Package);
        static void UpdateWorkId(Int64 primaryTileID, Int64 workId);
        static void ClearWorkByWorkId(Int64 workId);
        static void DeleteByWorkId(Int64 workId);
        Int64 _PrimaryTileID{ get; };
        Int64 _PrimaryTileID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Application{ get; };
        Int64 Application{ set; };
        Windows.Internal.StateRepository.Application GetApplication();
        void SetApplication(Application value);
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        Windows.Internal.StateRepository.TileFlags Flags{ get; };
        Windows.Internal.StateRepository.TileFlags Flags{ set; };
        Boolean VisibleInAppList{ get; };
        Boolean VisibleInAppList{ set; };
        Boolean VisibleInSettings{ get; };
        Boolean VisibleInSettings{ set; };
        Boolean SupportsKidZone{ get; };
        Boolean SupportsKidZone{ set; };
        Boolean SupportsLockScreen{ get; };
        Boolean SupportsLockScreen{ set; };
        Windows.Internal.StateRepository.TileTemplate TileTemplate{ get; };
        Windows.Internal.StateRepository.TileTemplate TileTemplate{ set; };
        String TileId{ get; };
        String TileId{ set; };
        Boolean IsArgumentsNull{ get; };
        void SetArgumentsToNull();
        String Arguments{ get; };
        String Arguments{ set; };
        Boolean IsEditionIdNull{ get; };
        void SetEditionIdToNull();
        String EditionId{ get; };
        String EditionId{ set; };
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
        Windows.Internal.StateRepository.TileType TileType{ get; };
    }


}
