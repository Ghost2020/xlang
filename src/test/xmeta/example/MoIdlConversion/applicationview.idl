











namespace Windows.UI.ViewManagement
{
    [deprecated("ApplicationViewState may be altered or unavailable for releases after Windows 8.1. Instead, query for window layout sizes directly.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ApplicationViewState
    {
        FullScreenLandscape,
        Filled,
        Snapped,
        FullScreenPortrait,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ApplicationViewOrientation
    {
        Landscape,
        Portrait,
    };

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ApplicationViewSwitchingOptions
    {
        Default,
        SkipAnimation,
        ConsolidateViews,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ViewSizePreference
    {
        Default,
        UseLess,
        UseHalf,
        UseMore,
        UseMinimum,
        UseNone,
        [contract(Windows.Foundation.UniversalApiContract, 4)]
        Custom,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ApplicationViewBoundsMode
    {
        UseVisible,
        UseCoreWindow,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FullScreenSystemOverlayMode
    {
        Standard,
        Minimal,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum ApplicationViewWindowingMode
    {
        Auto,
        PreferredLaunchViewSize,
        FullScreen,
        [contract(Windows.Foundation.UniversalApiContract, 7)]
        CompactOverlay,
        [contract(Windows.Foundation.UniversalApiContract, 7)]
        Maximized,
    };

    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum ApplicationViewMode
    {
        Default,
        CompactOverlay,
    };

    [contract(Windows.Foundation.UniversalApiContract, 7)]
    [feature(Velocity_AlwaysAlwaysEnabled)]
    enum ViewGrouping
    {
        Default,
        WithSource,
        Separate,
        WithSourceInBackground,
    };




    [contract(Windows.Foundation.UniversalApiContract, 4)]
    [static_name("Windows.UI.ViewManagement.IViewModePreferencesStatics", 69b60a65-5de5-40d8-8306-3833df7a2274)]
    runtimeclass ViewModePreferences
    {
        static Windows.UI.ViewManagement.ViewModePreferences CreateDefault(ApplicationViewMode mode);

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [default]
        [interface_name("Windows.UI.ViewManagement.IViewModePreferences", 878fcd3a-0b99-42c9-84d0-d3f1d403554b)]
        {
            Windows.UI.ViewManagement.ViewSizePreference ViewSizePreference{ get; };
            Windows.UI.ViewManagement.ViewSizePreference ViewSizePreference{ set; };
            Windows.Foundation.Size CustomSize{ get; };
            Windows.Foundation.Size CustomSize{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IViewModePreferences2", ceda8366-33ea-4f99-b2e2-3e83e8838b6f)]
        {
            Windows.UI.ViewManagement.ViewGrouping GroupingPreference{ get; };
            Windows.UI.ViewManagement.ViewGrouping GroupingPreference{ set; };
        }
    }







    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [muse(0x6020000)]
    [threading(both)]
    runtimeclass ApplicationView
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [deprecated("IApplicationViewFullscreenStatics is deprecated after Windows 8. Please use other resize APIs.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewFullscreenStatics", bc792ebd-64fe-4b65-a0c0-901ce2b68636)]
        {
            [deprecated("IApplicationViewFullscreenStatics is deprecated after Windows 8. Please use other resize APIs.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            static Boolean TryUnsnapToFullscreen();
        }

        [webhosthidden]
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewInteropStatics", c446fb5d-4793-4896-a8e2-be57a8bb0f50)]
        {
            static Int32 GetApplicationViewIdForWindow(Windows.UI.Core.ICoreWindow window);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewStatics2", af338ae5-cf64-423c-85e5-f3e72448fb23)]
        {
            static Windows.UI.ViewManagement.ApplicationView GetForCurrentView();
            static Boolean TerminateAppOnFinalViewClose{ get; };
            static Boolean TerminateAppOnFinalViewClose{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [deprecated("ApplicationView static methods may be altered or unavailable for releases after Windows 8.1. Instead, use ApplicationView.GetForCurrentView to get an instance of ApplicationView.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewStatics", 010a6306-c433-44e5-a9f2-bd84d4030a95)]
        {
            [deprecated("Value may be altered or unavailable for releases after Windows 8.1. Instead, query for window layout sizes directly.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            static Windows.UI.ViewManagement.ApplicationViewState Value{ get; };
            [deprecated("TryUnsnap may be altered or unavailable for releases after Windows 8.1. Apps can be continuously resized, but cannot be snapped, starting in Windows 8.1.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            static Boolean TryUnsnap();
        }

        [webhosthidden]
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewStatics4", 08fd8d33-2611-5336-a315-d98e6366c9db)]
        {
            static void ClearAllPersistedState();
            static void ClearPersistedState(String key);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewStatics3", a28d7594-8c41-4e13-9719-5164796fe4c7)]
        {
            static Windows.UI.ViewManagement.ApplicationViewWindowingMode PreferredLaunchWindowingMode{ get; };
            static Windows.UI.ViewManagement.ApplicationViewWindowingMode PreferredLaunchWindowingMode{ set; };
            static Windows.Foundation.Size PreferredLaunchViewSize{ get; };
            static Windows.Foundation.Size PreferredLaunchViewSize{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.UI.ViewManagement.IApplicationView", d222d519-4361-451e-96c4-60f4f9742db0)]
        {
            Windows.UI.ViewManagement.ApplicationViewOrientation Orientation{ get; };
            Boolean AdjacentToLeftDisplayEdge{ get; };
            Boolean AdjacentToRightDisplayEdge{ get; };
            [deprecated("To check full screen mode, use IsFullScreenMode. To check if the view is adjacent to both edges, use AdjacentToLeftDisplayEdge and AdjacentToRightDisplayEdge. For more info, see MSDN.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            Boolean IsFullScreen{ get; };
            Boolean IsOnLockScreen{ get; };
            Boolean IsScreenCaptureEnabled{ get; };
            Boolean IsScreenCaptureEnabled{ set; };
            String Title{ set; };
            String Title{ get; };
            Int32 Id{ get; };
            event Windows.Foundation.TypedEventHandler <Windows.UI.ViewManagement.ApplicationView, Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs>  Consolidated;
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView2", e876b196-a545-40dc-b594-450cba68cc00)]
        {
            [deprecated("Use the TryEnterFullScreen method and IsFullScreenMode property instead of SuppressSystemOverlays. For more info, see MSDN.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            Boolean SuppressSystemOverlays{ get; };
            [deprecated("Use the TryEnterFullScreen method and IsFullScreenMode property instead of SuppressSystemOverlays. For more info, see MSDN.", deprecate, Windows.Foundation.UniversalApiContract, 0x10000)]
            Boolean SuppressSystemOverlays{ set; };
            Windows.Foundation.Rect VisibleBounds{ get; };
            event Windows.Foundation.TypedEventHandler <Windows.UI.ViewManagement.ApplicationView, Object>  VisibleBoundsChanged;
            Boolean SetDesiredBoundsMode(ApplicationViewBoundsMode boundsMode);
            Windows.UI.ViewManagement.ApplicationViewBoundsMode DesiredBoundsMode{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView3", 903c9ce5-793a-4fdf-a2b2-af1ac21e3108)]
        {
            Windows.UI.ViewManagement.ApplicationViewTitleBar TitleBar{ get; };
            Windows.UI.ViewManagement.FullScreenSystemOverlayMode FullScreenSystemOverlayMode{ get; };
            Windows.UI.ViewManagement.FullScreenSystemOverlayMode FullScreenSystemOverlayMode{ set; };
            Boolean IsFullScreenMode{ get; };
            Boolean TryEnterFullScreenMode();
            void ExitFullScreenMode();
            void ShowStandardSystemOverlays();
            Boolean TryResizeView(Windows.Foundation.Size value);
            void SetPreferredMinSize(Windows.Foundation.Size minSize);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView4", 15e5cbec-9e0f-46b5-bc3f-9bf653e74b5e)]
        {
            Windows.UI.ViewManagement.ApplicationViewMode ViewMode{ get; };
            Boolean IsViewModeSupported(ApplicationViewMode viewMode);
            [method_name("TryEnterViewModeAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryEnterViewModeAsync(ApplicationViewMode viewMode);
            [method_name("TryEnterViewModeWithPreferencesAsync")] Windows.Foundation.IAsyncOperation <Boolean>  TryEnterViewModeAsync(ApplicationViewMode viewMode, ViewModePreferences viewModePreferences);
            Windows.Foundation.IAsyncOperation <Boolean>  TryConsolidateAsync();
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView6", d38d9ffd-764a-427f-9be0-7aa640af3db9)]
        {
            Boolean IsTabGroupingSupported{ get; };
            Boolean CanOpenInNewTab{ get; };
        }

        [webhosthidden]
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView7", a0369647-5faf-5aa6-9c38-befbb12a071e)]
        {
            String PersistedStateId{ get; };
            String PersistedStateId{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_SometimesAlwaysDisabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView8", ea7b512f-8f7b-4d34-9705-672190ab2f1c)]
        {
            Boolean TemporaryInputMismatch{ set; };
            Boolean TemporaryInputMismatch{ get; };
            Boolean CriticalInputMismatch{ set; };
            Boolean CriticalInputMismatch{ get; };
            void ApplyApplicationUserModelID(String value);
        }

        [webhosthidden]
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationView9", 9c6516f9-021a-5f01-93e5-9bdad2647574)]
        {
            Windows.UI.WindowManagement.WindowingEnvironment WindowingEnvironment{ get; };
            Windows.Foundation.Collections.IVectorView <Windows.UI.WindowManagement.DisplayRegion>  GetDisplayRegions();
        }

        [webhosthidden]
        [contract(Windows.Foundation.UniversalApiContract, 8)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationViewWithContext", bd55d512-9dc1-44fc-8501-666625df60dc)]
        {
            Windows.UI.UIContext UIContext{ get; };
        }
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs", 514449ec-7ea2-4de7-a6a6-7dfbaaebb6fb)]
    runtimeclass ApplicationViewConsolidatedEventArgs
    {
        Boolean IsUserInitiated{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [interface_name("Windows.UI.ViewManagement.IApplicationViewConsolidatedEventArgs2", 1c199ecc-6dc1-40f4-afee-07d9ea296430)]
        {
            Boolean IsAppInitiated{ get; };
        }
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass ApplicationViewTitleBar
    {

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [default]
        [interface_name("Windows.UI.ViewManagement.IApplicationViewTitleBar", 00924ac0-932b-4a6b-9c4b-dc38c82478ce)]
        {
            Windows.Foundation.IReference <Windows.UI.Color>  ForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  BackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  BackgroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonBackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonBackgroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverBackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonHoverBackgroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedBackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonPressedBackgroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  InactiveForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  InactiveForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  InactiveBackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  InactiveBackgroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveForegroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveForegroundColor{ get; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveBackgroundColor{ set; };
            Windows.Foundation.IReference <Windows.UI.Color>  ButtonInactiveBackgroundColor{ get; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 7)]
        [feature(Velocity_AlwaysAlwaysEnabled)]
        [interface_name("Windows.UI.ViewManagement.IApplicationViewTitleBar2", d6fcf72f-41d6-5179-9bbe-54ddfa7c4611)]
        {
            Windows.Foundation.IAsyncAction SetActiveIconStreamAsync(Windows.Storage.Streams.IRandomAccessStreamReference activeIcon);
        }
    }









    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [muse(0x6030000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.ViewManagement.IApplicationViewSwitcherStatics2", 60e995cd-4fc2-48c4-b8e3-395f2b9f0fc1)]
    [threading(both)]
    runtimeclass ApplicationViewSwitcher
    {
        static void DisableSystemViewActivationPolicy();

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewSwitcherStatics", 975f2f1e-e656-4c5e-a0a1-717c6ffa7d64)]
        {
            static void DisableShowingMainViewOnActivation();
            [method_name("TryShowAsStandaloneAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsStandaloneAsync(Int32 viewId);
            [method_name("TryShowAsStandaloneWithSizePreferenceAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsStandaloneAsync(Int32 viewId, ViewSizePreference sizePreference);
            [method_name("TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsStandaloneAsync(Int32 viewId, ViewSizePreference sizePreference, Int32 anchorViewId, ViewSizePreference anchorSizePreference);
            [method_name("SwitchAsync")] static Windows.Foundation.IAsyncAction SwitchAsync(Int32 viewId);
            [method_name("SwitchFromViewAsync")] static Windows.Foundation.IAsyncAction SwitchAsync(Int32 toViewId, Int32 fromViewId);
            [method_name("SwitchFromViewWithOptionsAsync")] static Windows.Foundation.IAsyncAction SwitchAsync(Int32 toViewId, Int32 fromViewId, ApplicationViewSwitchingOptions options);
            static Windows.Foundation.IAsyncOperation <Boolean>  PrepareForCustomAnimatedSwitchAsync(Int32 toViewId, Int32 fromViewId, ApplicationViewSwitchingOptions options);
        }

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.UI.ViewManagement.IApplicationViewSwitcherStatics3", 92059420-80a7-486d-b21f-c7a4a242a383)]
        {
            [method_name("TryShowAsViewModeAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsViewModeAsync(Int32 viewId, ApplicationViewMode viewMode);
            [method_name("TryShowAsViewModeWithPreferencesAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  TryShowAsViewModeAsync(Int32 viewId, ApplicationViewMode viewMode, ViewModePreferences viewModePreferences);
        }
    }




    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.UI.ViewManagement.IActivationViewSwitcher", dca71bb6-7350-492b-aac7-c8a13d7224ad)]
    runtimeclass ActivationViewSwitcher
    {
        [method_name("ShowAsStandaloneAsync")] Windows.Foundation.IAsyncAction ShowAsStandaloneAsync(Int32 viewId);
        [method_name("ShowAsStandaloneWithSizePreferenceAsync")] Windows.Foundation.IAsyncAction ShowAsStandaloneAsync(Int32 viewId, ViewSizePreference sizePreference);
        Boolean IsViewPresentedOnActivationVirtualDesktop(Int32 viewId);
    }



    [contract(Windows.Foundation.UniversalApiContract, 2)]
    [static_name("Windows.UI.ViewManagement.IApplicationViewTransferContextStatics", 15a89d92-dd79-4b0b-bc47-d5f195f14661)]
    runtimeclass ApplicationViewTransferContext
    {
        ApplicationViewTransferContext();
        static String DataPackageFormatId{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 2)]
        [default]
        [interface_name("Windows.UI.ViewManagement.IApplicationViewTransferContext", 8574bc63-3c17-408e-9408-8a1a9ea81bfa)]
        {
            Int32 ViewId{ get; };
            Int32 ViewId{ set; };
        }
    }

}
