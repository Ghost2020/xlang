





namespace Windows.UI.Internal.Text.Shell
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    struct NaiveTouchModelParameters
    {
        UInt32 ThresholdClose;
        UInt32 ThresholdMax;
        Int32 LogProbDirectHit;
        Int32 LogProbBarelyHit;
        Int32 LogProbNearMiss;
    };

    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    struct GaussianTouchModelParameters
    {
        UInt32 TouchModelType;
        UInt32 SlopeNumerator;
        UInt32 SlopeDenominator;
        UInt32 Offset;
        UInt32 TimeMin;
        UInt32 TimeMax;
        UInt32 DefaultKeyWidth;
        UInt32 DefaultKeyHeight;
        UInt32 DefaultScaleX;
        UInt32 DefaultScaleY;
        UInt32 ResolutionScaleX;
        UInt32 ResolutionScaleY;
        UInt32 SpaceMultiplier;
        UInt32 SpaceOffset;
    };


    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Internal.Text.Shell.IHitTargetLanguageModel", 2185d28d-8e13-5834-a864-30e372954c54)]
    [threading(both)]
    runtimeclass HitTargetLanguageModel
    {
        HitTargetLanguageModel();
        String LanguageName{ get; };
        Boolean IsLoaded{ get; };
        Boolean Load(String bcp47LanguageName);
        void SetKeys(String keysOnScreen);
        Int16[] GetKeysProbabilities(String kidHistory);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [static_name("Windows.UI.Internal.Text.Shell.IHitTargetTouchModelStatics", 82e0ddf2-57ed-5d29-b6eb-35736828176c)]
    [threading(both)]
    runtimeclass HitTargetTouchModel
    {
        static Windows.UI.Internal.Text.Shell.NaiveTouchModelParameters GetNaiveParameters();
        static Boolean HasGaussianParameters(String bcp47LanguageName);
        static Windows.UI.Internal.Text.Shell.GaussianTouchModelParameters GetGaussianParameters(String bcp47LanguageName);
        static UInt8[] GetKeyMeanOffsets(String bcp47LanguageName);
        static UInt8[] GetKeyDeviations(String bcp47LanguageName);
    }

    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    enum WbType
    {
        None,
        Word,
        Symbol,
        WhiteSpace = 4,
        EA = 8,
        Special = 16,
        Emoji = 32,
        Surrogate = 64,
        All = 127,
    };



    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.UI.Internal.Text.Shell.ICharLocaleHelperFactory", b839f1c5-027e-5b64-a3a2-02c8ded2fa07)]
    [interface_name("Windows.UI.Internal.Text.Shell.ICharLocaleHelper", ec350881-b4b5-54d9-a4d8-f37088207f99)]
    [threading(both)]
    runtimeclass CharLocaleHelper
    {
        [method_name( "CreateInstance" )] CharLocaleHelper(String bcp47LanguageName);
        CharLocaleHelper();
        String LanguageName{ get; };
        String LanguageName{ set; };
        UInt16 ChangeCharacterCase(UInt16 ch, Boolean toUpperCase);
        Windows.UI.Internal.Text.Shell.WbType GetCharacterType(UInt16 ch);
    }


    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.UI.Internal.Text.Shell.ITextInputHelperStatics", fedbdb46-e5b5-5c52-b001-ec06ce0af792)]
    [threading(both)]
    runtimeclass TextInputHelper
    {
        static Boolean IsDictionaryReady(String bcp47LanguageName);
        static void ShowImeNotReadyNotificationWithMessage(String title, String text, String toastId, String keyboard);
    }


    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Internal.Text.Shell.IEmojiSearchDataSourceResult", c854a4fd-e519-56fd-99c1-99fb3461fbeb)]
    runtimeclass EmojiSearchDataSourceResult
    {
        String Name{ get; };
        String Code{ get; };
    }


    [contract(Windows.UI.Internal.Text.Shell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.UI.Internal.Text.Shell.IEmojiSearchDataSource", 4bd1a756-0861-5e69-b4f5-f720edc9936d)]
    [threading(both)]
    runtimeclass EmojiSearchDataSource
    {
        EmojiSearchDataSource();
        void Initialize(String bcp47LanguageTag);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.UI.Internal.Text.Shell.EmojiSearchDataSourceResult> >  GetEmoji(String searchQuery, UInt32 maxResults);
    }

}
