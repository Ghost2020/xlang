












namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.StateRepository.IApplicationExtensionStatics", 78662bbb-1464-4279-b5ff-ffccb2bc6529)]
    [interface_name("Windows.Internal.StateRepository.IApplicationExtension", 81aba04c-0d4b-422d-b790-3de217afde4d)]
    [threading(both)]
    runtimeclass ApplicationExtension
    {
        ApplicationExtension();
        static Boolean Exists(Int64 applicationExtensionID);
        static Boolean ExistsByApplication(Application Application);
        static Boolean ExistsByApplicationAndCategory(Application Application, String Category);
        static Boolean ExistsByApplicationAndIndex(Application Application, Int32 Index);
        static Boolean ExistsByCategory(String Category);
        static Windows.Internal.StateRepository.ApplicationExtension Get(Int64 applicationExtensionID);
        static Windows.Internal.StateRepository.ApplicationExtension TryGet(Int64 applicationExtensionID);
        static Windows.Internal.StateRepository.ApplicationExtension GetByApplicationAndIndex(Application Application, Int32 Index);
        static Windows.Internal.StateRepository.ApplicationExtension TryGetByApplicationAndIndex(Application Application, Int32 Index);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByApplication(Application Application);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByApplicationAndCategory(Application Application, String Category);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByCategory(String Category);
        static Boolean ExistsByUserAndCategory(User user, String category);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByUserAndCategory(User user, String category);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByUserAndCategoryAndPackageFullName(User user, String category, String packageFullName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByUserAndCategoryAndApplicationUserModelId(User user, String category, String applicationUserModelId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.ApplicationExtension>  FindByUserOrDefaultAccountAndCategory(User user, String category);
        Int64 _ApplicationExtensionID{ get; };
        Int64 _ApplicationExtensionID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Application{ get; };
        Int64 Application{ set; };
        Windows.Internal.StateRepository.Application GetApplication();
        void SetApplication(Application value);
        Int32 Index{ get; };
        Int32 Index{ set; };
        String Category{ get; };
        String Category{ set; };
        Boolean IsExecutableNull{ get; };
        void SetExecutableToNull();
        String Executable{ get; };
        String Executable{ set; };
        Windows.Storage.StorageFile GetExecutableAsStorageFile();
        void SetExecutableAsStorageFile(Windows.Storage.IStorageFile value);
        Boolean IsEntrypointNull{ get; };
        void SetEntrypointToNull();
        String Entrypoint{ get; };
        String Entrypoint{ set; };
        Boolean IsRuntimeTypeNull{ get; };
        void SetRuntimeTypeToNull();
        String RuntimeType{ get; };
        String RuntimeType{ set; };
        Boolean IsStartPageNull{ get; };
        void SetStartPageToNull();
        String StartPage{ get; };
        String StartPage{ set; };
        Windows.Storage.StorageFile GetStartPageAsStorageFile();
        void SetStartPageAsStorageFile(Windows.Storage.IStorageFile value);
        Boolean IsResourceGroupNull{ get; };
        void SetResourceGroupToNull();
        String ResourceGroup{ get; };
        String ResourceGroup{ set; };
        Windows.Internal.StateRepository.ApplicationExtensionFlags Flags{ get; };
        Windows.Internal.StateRepository.ApplicationExtensionFlags Flags{ set; };
        Boolean LocalizedDictionaryNeedsResolution{ get; };
        Boolean LocalizedDictionaryNeedsResolution{ set; };
        Boolean LocalizedDictionaryIsReady{ get; };
        Boolean LocalizedDictionaryIsReady{ set; };
        Boolean IsCentennialFullTrust{ get; };
        Boolean IsCentennialFullTrust{ set; };
        Boolean IsCentennialPartialTrust{ get; };
        Boolean IsCentennialPartialTrust{ set; };
        Windows.Internal.StateRepository.Subsystem Subsystem{ get; };
        Windows.Internal.StateRepository.Subsystem Subsystem{ set; };
        Boolean Is_LocalizedDictionaryNull{ get; };
        void Set_LocalizedDictionaryToNull();
        void Get_LocalizedDictionary(out UInt8[] value);
        void Set_LocalizedDictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_LocalizedDictionaryAsPropertySet();
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
        Boolean _LocalizedDictionaryNeedsResolution{ get; };
        Boolean _LocalizedDictionaryNeedsResolution{ set; };
        Boolean _LocalizedDictionaryIsReady{ get; };
        Boolean _LocalizedDictionaryIsReady{ set; };
        Boolean IsCentennial{ get; };
    }


}
