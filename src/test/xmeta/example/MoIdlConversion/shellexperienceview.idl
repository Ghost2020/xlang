
















namespace Windows.Internal.ComposableShell
{
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [interface_name("Windows.Internal.ComposableShell.IShellExperienceView", 5e679b8e-773b-449a-944a-3aa2b9247b05)]
    runtimeclass ShellExperienceView
        : Windows.Internal.ComposableShell.IKeepAliveView
        , Windows.Internal.ComposableShell.IComposableView
        , Windows.Internal.ComposableShell.ITreeNode
        , Windows.Internal.ComposableShell.IForegroundTarget
        , Windows.Internal.ComposableShell.IResizableView
        , Windows.Internal.ComposableShell.IClosableView
        , Windows.Internal.ComposableShell.IRotatableView
    {
        Windows.Internal.ComposableShell.ViewVisibility Visibility{ get; };
        Windows.Internal.ComposableShell.ViewVisibility Visibility{ set; };
        Boolean IsActivatable{ get; };
        Boolean IsActivatable{ set; };
        Boolean IsDraggable{ get; };
        Boolean IsDraggable{ set; };
        Boolean IsCriticalExperience{ get; };
        Boolean IsCriticalExperience{ set; };
        Boolean DisableActivationTimeout{ get; };
        Boolean DisableActivationTimeout{ set; };
        Boolean IsDehydratable{ get; };
        Boolean IsDehydratable{ set; };
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    enum ShellExperienceViewCollectionChangedEventType
    {
        Created,
        Destroyed,
        Removed,
    };


    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ComposableShell.IShellExperienceViewCollectionChangedEventArgs", 954cead8-5b7f-4a11-b083-4f41a2b9d1f9)]
    runtimeclass ShellExperienceViewCollectionChangedEventArgs
    {
        Windows.Internal.ComposableShell.ShellExperienceViewCollectionChangedEventType EventType{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [static_name("Windows.Internal.ComposableShell.IShellExperienceViewSource", 982775d8-418a-4df4-9a93-5b6578f65286)]
    [threading(both)]
    runtimeclass ShellExperienceViewSource
    {
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.ComposableShell.ShellExperienceView>  Views{ get; };
        static event Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.ShellExperienceView, Windows.Internal.ComposableShell.ShellExperienceViewCollectionChangedEventArgs>  ViewCollectionChanged;
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    enum ShellExperienceViewEventType
    {
        ViewCreated,
        ViewNavigatedTo,
        ViewNavigatedAway,
        ViewLost,
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(5da7e372-5394-4532-b081-e2e7d72a10b7)]
    interface IShellExperienceViewEventArgs
    {
        Windows.Internal.ComposableShell.ShellExperienceViewEventType EventType{ get; };
        Windows.Foundation.Collections.PropertySet EventContext{ get; };
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [static_name("Windows.Internal.ComposableShell.IShellExperienceViewManager", 54a1a20a-9330-4cd2-85ed-86226e5c2f2f)]
    [threading(both)]
    runtimeclass ShellExperienceViewManager
    {
        [method_name("RegisterForShellExperienceViewEvents")] static EventRegistrationToken RegisterForShellExperienceViewEvents(ComposerContextId context, String experienceId, Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.ShellExperienceView, Windows.Internal.ComposableShell.IShellExperienceViewEventArgs>  handler);
        [method_name("RegisterForShellExperienceViewEventsWithAumid")] static EventRegistrationToken RegisterForShellExperienceViewEvents(ComposerContextId context, String experienceId, String aumid, Boolean isDefaultViewEventHandler, Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.ShellExperienceView, Windows.Internal.ComposableShell.IShellExperienceViewEventArgs>  handler);
        static void UnregisterForShellExperienceViewEvents(ComposerContextId context, EventRegistrationToken token);
        static EventRegistrationToken RegisterForAllViewEvents(ComposerContextId context, Windows.Foundation.Collections.IVectorView <String>  aumids, Windows.Foundation.TypedEventHandler <Windows.Internal.ComposableShell.ShellExperienceView, Windows.Internal.ComposableShell.IShellExperienceViewEventArgs>  handler);
        static void UnregisterForAllViewEvents(ComposerContextId context, EventRegistrationToken token);
        static void Launch(ComposerContextId launchContext, String aumid, String experienceId, String arguments, Boolean allowReuse);
        static Windows.Internal.ComposableShell.ShellExperienceView TryRecover(ComposerContextId launchContext, String aumid, String experienceId);
        static void SetViewExperienceId(UInt32 windowId, String experienceId);
        [method_name("LaunchAsUser")] [default_overload]
        static void LaunchAsUser(ComposerContextId launchContext, String aumid, String experienceId, String arguments, Boolean allowReuse, UInt64 user);
        [method_name("LaunchAsUserWithArguments")] static void LaunchAsUser(ComposerContextId launchContext, String aumid, String experienceId, String contractId, Object arguments, Boolean allowReuse, UInt64 user);
    }

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [uuid(1a4c8dbf-aac3-4bd1-b5d9-149aeeff505b)]
    interface IShellExperienceViewRoutingPolicy
    {
        Windows.Internal.ComposableShell.ComposerContextId SelectTargetForActivation(String experienceId, String aumid, Windows.Foundation.Collections.PropertySet eventContext);
    };

    [contract(Windows.Internal.ComposableShell.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass GenericShellExperienceViewRoutingPolicy
        : [default]Windows.Internal.ComposableShell.IShellExperienceViewRoutingPolicy
    {
        GenericShellExperienceViewRoutingPolicy();
    }

}
