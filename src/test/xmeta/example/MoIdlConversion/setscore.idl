









namespace Windows.Internal.ApplicationModel.Sets
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    enum SaveOptions
    {
        SetOnly,
        SetAndSetMembers,
    };


    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Internal.ApplicationModel.Sets.IUserActivityCollectionFactory", d6c22d10-4701-4677-9382-2d730ba1bcd6)]
    [interface_name("Windows.Internal.ApplicationModel.Sets.IUserActivityCollection", ac784a2c-a482-44a5-b9a1-a94c552710f1)]
    [threading(both)]
    runtimeclass UserActivityCollection
    {
        [method_name( "Create" )] UserActivityCollection(String id, String category);
        String Id{ get; };
        String Category{ get; };
        Windows.Foundation.Uri ActivationUri{ get; };
        Windows.Foundation.Uri ActivationUri{ set; };
        String DisplayText{ get; };
        String DisplayText{ set; };
        String Description{ get; };
        String Description{ set; };
        Windows.UI.Shell.IAdaptiveCard AdaptiveContent{ get; };
        Windows.UI.Shell.IAdaptiveCard AdaptiveContent{ set; };
        UInt32 Size{ get; };
        Guid UniqueId{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  GetUserActivities();
        void Clear();
        Windows.ApplicationModel.UserActivities.UserActivity AppendUserActivity(Windows.ApplicationModel.UserActivities.UserActivity activity);
        void RemoveUserActivity(UInt32 index);
        Windows.Foundation.Collections.IMapView <String, String>  GetPropertiesForSetMember(UInt32 index);
        void UpdatePropertiesForSetMember(UInt32 index, Windows.Foundation.Collections.IMap <String, String>  metadata);
        Windows.Foundation.Collections.IMapView <String, String>  GetPropertiesForSet();
        void UpdatePropertiesForSet(Windows.Foundation.Collections.IMap <String, String>  metadata);
        Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.Sets.UserActivityCollectionTimelineActivity>  GetTimelineActivityAsync();
    }

    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ApplicationModel.Sets.IUserActivityCollectionMemberMatchData", ad75d3b5-a9ba-4df8-a061-909e3122117a)]
    runtimeclass UserActivityCollectionMemberMatchData
    {
        Windows.ApplicationModel.UserActivities.UserActivity MatchedUserActivity{ get; };
        Guid CollectionGuid{ get; };
        Windows.Foundation.DateTime CollectionLastSaveTime{ get; };
        String CollectionSetId{ get; };
    }


    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.ApplicationModel.Sets.IUserActivityCollectionTimelineActivityStatics", 6d9dcf75-d618-4fad-a3dd-14648c3911b2)]
    [interface_name("Windows.Internal.ApplicationModel.Sets.IUserActivityCollectionTimelineActivity", a41e6d9b-0176-4116-a9d2-399de882f34a)]
    [threading(both)]
    runtimeclass UserActivityCollectionTimelineActivity
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.Sets.UserActivityCollectionTimelineActivity>  GetOrCreateActivityAsync(String representedSetId);
        static Windows.Foundation.IAsyncAction DeleteActivityAsync(String representedSetId);
        Windows.ApplicationModel.UserActivities.UserActivityState State{ get; };
        Windows.ApplicationModel.UserActivities.UserActivityVisualElements VisualElements{ get; };
        Windows.Foundation.Uri ContentUri{ get; };
        Windows.Foundation.Uri ContentUri{ set; };
        String ContentType{ get; };
        String ContentType{ set; };
        Windows.Foundation.Uri FallbackUri{ get; };
        Windows.Foundation.Uri FallbackUri{ set; };
        Windows.Foundation.Uri ActivationUri{ get; };
        Windows.Foundation.Uri ActivationUri{ set; };
        Windows.ApplicationModel.UserActivities.IUserActivityContentInfo ContentInfo{ get; };
        Windows.ApplicationModel.UserActivities.IUserActivityContentInfo ContentInfo{ set; };
        Windows.Foundation.IAsyncAction SaveAsync();
        Windows.Internal.ApplicationModel.Sets.UserActivityCollectionSession CreateSession();
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    runtimeclass UserActivityCollectionSession
        : [default]Windows.Foundation.IClosable
    {
    }



    [contract(Windows.Internal.ApplicationModel.Sets.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.ApplicationModel.Sets.IConnectedDevicesUserActivityCollectionStore", bd84aadc-ce9d-438a-a84e-38e348df9820)]
    [threading(both)]
    runtimeclass ConnectedDevicesUserActivityCollectionStore
    {
        ConnectedDevicesUserActivityCollectionStore();
        Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.Sets.UserActivityCollection>  TryGetAsync(String id, String category);
        Windows.Foundation.IAsyncAction SaveAsync(UserActivityCollection collection, SaveOptions options);
        Windows.Foundation.IAsyncOperation <Boolean>  TryDeleteAsync(UserActivityCollection collection);
        Windows.Foundation.IAsyncAction DeleteAllAsync();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.ApplicationModel.Sets.UserActivityCollectionMemberMatchData> >  GetCollectionsWithActivityAsync(Windows.ApplicationModel.UserActivities.UserActivity activity);
        Windows.Foundation.IAsyncOperation <Windows.Internal.ApplicationModel.Sets.UserActivityCollection>  GetCollectionFromGuidAsync(Guid guid);
    }

}
