










namespace Windows.Internal.StateRepository
{
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [static_name("Windows.Internal.StateRepository.IFileStatics", e7f99b73-6464-4b86-a4bc-9ed3651b94db)]
    [interface_name("Windows.Internal.StateRepository.IFile", e7336342-fbb8-45a4-96ff-f54f88007e51)]
    [threading(both)]
    runtimeclass File
    {
        static Boolean Exists(Int64 fileID);
        static Boolean ExistsByDigest(UInt8[] Digest);
        static Boolean ExistsByPackage(Package Package);
        static Boolean ExistsByPackageAndRelativeFilePath(Package Package, String RelativeFilePath);
        static Windows.Internal.StateRepository.File Get(Int64 fileID);
        static Windows.Internal.StateRepository.File TryGet(Int64 fileID);
        static Windows.Internal.StateRepository.File GetByPackageAndRelativeFilePath(Package Package, String RelativeFilePath);
        static Windows.Internal.StateRepository.File TryGetByPackageAndRelativeFilePath(Package Package, String RelativeFilePath);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.File>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.File>  FindByDigest(UInt8[] Digest);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.File>  FindByPackage(Package Package);
        File();
        Int64 _FileID{ get; };
        Int64 _FileID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        Int64 Package{ get; };
        Int64 Package{ set; };
        Windows.Internal.StateRepository.Package GetPackage();
        void SetPackage(Package value);
        String RelativeFilePath{ get; };
        String RelativeFilePath{ set; };
        Windows.Storage.StorageFile GetRelativeFilePathAsStorageFile();
        void SetRelativeFilePathAsStorageFile(Windows.Storage.IStorageFile value);
        Int64 Size{ get; };
        Int64 Size{ set; };
        Boolean IsDigestNull{ get; };
        void SetDigestToNull();
        void GetDigest(out UInt8[] value);
        void SetDigest(UInt8[] value);
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
