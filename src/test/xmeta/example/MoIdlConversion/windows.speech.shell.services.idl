






namespace Windows.Speech.Shell.Services
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    enum DisambiguationResultStatus
    {
        Success,
        Timeout,
        Cancelled,
        Failure,
        Unknown,
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    enum VoiceShellListeningState
    {
        Idle,
        Listening,
    };

    [uuid(bbd2b5d1-4dd0-4fc0-82c0-0f05fadc69dd)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    interface IVoiceShellConfiguration
    {
        Windows.Foundation.TimeSpan Timeout{ set; };
        Windows.Foundation.TimeSpan Timeout{ get; };
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellConfiguration
        : [default]Windows.Speech.Shell.Services.IVoiceShellConfiguration
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(df3b2675-cdff-4061-b521-41166277aac7)]
    interface IVoiceShellHypothesis
    {
        String Text{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellHypothesis
        : [default]Windows.Speech.Shell.Services.IVoiceShellHypothesis
    {
    }

    [uuid(4a42bef8-ca39-425c-9602-6a2393b196b8)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    interface IVoiceShellHypothesisGeneratedEventArgs
    {
        Windows.Speech.Shell.Services.IVoiceShellHypothesis Hypothesis{ get; };
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellHypothesisGeneratedEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellHypothesisGeneratedEventArgs
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(2d22ea43-9ec2-472a-bae7-6c75d2c8552d)]
    interface IVoiceShellListeningStateChangedEventArgs
    {
        Windows.Speech.Shell.Services.VoiceShellListeningState ListeningState{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellListeningStateChangedEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellListeningStateChangedEventArgs
    {
    }

    [uuid(489b1adc-0b5a-4b06-afd1-24093b1ebb08)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    interface IVoiceShellService
    {
        Windows.Speech.Shell.Services.IVoiceShellState State{ get; };
        Windows.Speech.Shell.Services.IVoiceShellUIAutomation UIAutomation{ get; };
        void ShutdownVoiceShell();
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(1844087f-8358-4b94-a309-25907f1cf264)]
    interface IVoiceShellState
    {
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellState, Windows.Speech.Shell.Services.VoiceShellHypothesisGeneratedEventArgs>  HypothesisGenerated;
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellState, Windows.Speech.Shell.Services.VoiceShellListeningStateChangedEventArgs>  ListeningStateChanged;
        Boolean IsListening{ get; };
        void StartListening();
        void StopListening();
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellState
        : [default]Windows.Speech.Shell.Services.IVoiceShellState
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(d1b72f36-7d7f-4edd-ad98-8bcfe4e9af3c)]
    interface IVoiceShellUIAutomation
    {
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellUIAutomation, Windows.Speech.Shell.Services.VoiceShellUIAutomationActiveControlsEventArgs>  ActiveControlsChanged;
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellUIAutomation, Windows.Speech.Shell.Services.VoiceShellUIAutomationDisambiguationStartedEventArgs>  DisambiguationStarted;
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellUIAutomation, Windows.Speech.Shell.Services.VoiceShellUIAutomationDisambiguationEndedEventArgs>  DisambiguationEnded;
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellUIAutomation, Windows.Speech.Shell.Services.VoiceShellUIAutomationPreInvokeEventArgs>  PreInvoke;
        event Windows.Foundation.TypedEventHandler <Windows.Speech.Shell.Services.VoiceShellUIAutomation, String>  VESCommand;
        Windows.Speech.Shell.Services.IVoiceShellConfiguration DisambiguationConfiguration{ get; };
        Windows.Speech.Shell.Services.IVoiceShellConfiguration PreInvokeConfiguration{ get; };
        void Invoke();
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellUIAutomation
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIAutomation
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellUIAutomationActiveControlsEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIAutomationActiveControlsEventArgs
    {
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellUIAutomationDisambiguationStartedEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIAutomationDisambiguationStartedEventArgs
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellUIAutomationDisambiguationEndedEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIAutomationDisambiguationEndedEventArgs
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellUIAutomationPreInvokeEventArgs
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIAutomationPreInvokeEventArgs
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass VoiceShellService
        : [default]Windows.Speech.Shell.Services.IVoiceShellService
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(0acb906f-4fd9-44f3-a0fc-f126d171fbc1)]
    interface IVoiceShellUIAutomationActiveControlsEventArgs
    {
        Windows.Foundation.Collections.IVectorView <Windows.Speech.Shell.Services.VoiceShellUIControl>  ActiveControls{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    runtimeclass VoiceShellUIControl
        : [default]Windows.Speech.Shell.Services.IVoiceShellUIControl
    {
    }

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(dbec2035-34db-420f-9e94-344d348e13fc)]
    interface IVoiceShellUIAutomationDisambiguationEndedEventArgs
    {
        Windows.Speech.Shell.Services.DisambiguationResultStatus DisambiguationStatus{ get; };
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(29ee3961-ee27-4e5b-b757-90d6f783fd09)]
    interface IVoiceShellUIAutomationDisambiguationStartedEventArgs
    {
        Windows.Foundation.Collections.IVectorView <Windows.Speech.Shell.Services.VoiceShellUIControl>  DisambiguationControls{ get; };
    };

    [uuid(cb48ce02-89f3-4649-a8d0-e2deddc63b5c)]
    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    interface IVoiceShellUIAutomationPreInvokeEventArgs
    {
        Windows.Speech.Shell.Services.IVoiceShellUIControl SelectedControl{ get; };
    };

    [contract(Windows.Speech.Shell.Services.InternalContract, 1)]
    [uuid(7f5bf88c-87b9-4625-9858-6740a80f1ef6)]
    interface IVoiceShellUIControl
    {
        String Name{ get; };
        Boolean IsVirtual{ get; };
        UInt32 ViewInstanceId{ get; };
        Windows.Foundation.Rect BoundingRectangle{ get; };
    };

}
