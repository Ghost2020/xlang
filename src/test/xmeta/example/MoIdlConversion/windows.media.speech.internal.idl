








namespace Windows.Media.Speech.Internal
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    enum AudioSource
    {
        None,
        WiredHeadset,
        Handset,
        Bluetooth,
        SpeechApp,
        XboxKinect,
        Max,
    };

    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    enum AudioSourceDirection
    {
        None,
        Capture,
        Render,
        Max,
    };

    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    enum EarConType
    {
        None,
        StartListening,
        StartListeningShort,
        DoneListening,
        DoneListeningShort,
        DoneDisambigError,
        DoneCancel,
        Cancel,
        Error,
        Thinking,
        ShowExamples,
        Look,
        Next,
        Bleep,
        Results,
        AppTransition,
        GoBack,
        GoHome,
        Screenshot,
        Snap,
        UnSnap,
        VolumeUp,
        VolumeDown,
        Rewind,
        FastForward,
    };

    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    enum AudioPlaybackState
    {
        Invalid,
        Completed,
        Running,
        Paused,
        Cancelled,
        Failed,
    };

    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    [uuid(d16c4bdb-81c1-4ba2-a0a0-21065d261f5b)]
    interface IEarConResourceManager
    {
        void GetResourceID(EarConType earConType, out UInt32 resourceID);
        void GetResourceLib(out String path);
    };


    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Speech.Internal.ISoundStateChangedEventArgs", 5b2ced3a-351e-4b1c-b718-587e25fd4c1c)]
    runtimeclass SoundStateChangedEventArgs
    {
        SoundStateChangedEventArgs();
        Windows.Media.Speech.Internal.AudioPlaybackState State{ get; };
        UInt32 Iterations{ get; };
        Windows.Media.Speech.Internal.EarConType EarCon{ get; };
        UInt32 TrackingID{ get; };
        UInt32 StartedTime{ get; };
        UInt32 AudioLengthMS{ get; };
    }

    [uuid(dc3df3af-484b-4a13-baab-b2d41a258e2b)]
    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    interface ISoundControllerEventHandler
    {
        void SoundStateChanged(SoundStateChangedEventArgs state);
    };


    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Media.Speech.Internal.IAudioProperties", 01571c71-13dc-4abb-a8c4-9210a093d04d)]
    runtimeclass AudioProperties
    {
        AudioProperties();
        void GetSource(out AudioSource audioSource);
        void GetName(out String name);
        void GetSourceRate(out UInt64 sourceRate);
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    [interface_name("Windows.Media.Speech.Internal.ISoundController", 5e971899-0b2b-4f1c-86ac-c8780f739ba7)]
    runtimeclass SoundController
    {
        SoundController();
        void ForceInactive();
        void GetAudioProperties(AudioSourceDirection audioSourceDirection, out AudioProperties ppAudioProperties);
        void GetEncodedSsml(String ssml, String domain, String emote, out String encoded);
        void GetTextFromSsml(String ssml, out String text);
        void Initialize(UInt32 langId, IEarConResourceManager pEarConResourceManager, ISoundControllerEventHandler handler);
        void InitializeEarConResourceManager(IEarConResourceManager pEarConResourceManager);
        void LoadAsync();
        void OnStreamFinish();
        void OnStreamStart();
        void PlayEarCon(EarConType earConType);
        void SetIsActive(Boolean isActive);
        void SetIsRenderActive(Boolean isRenderActive);
        void SpeakAsync(String ssml, UInt32 trackingID);
        void StopAudio();
        void Unload();
        void WaitForActivation();
        void RequeryAudioEndpoint();

        [interface_name("Windows.Media.Speech.Internal.ISoundControllerPrivate", eb926f2e-0dfd-4828-887a-b9510b67ad19)]
        {
            void DumpResponseWave(Windows.Storage.Streams.IRandomAccessStream stream);
            void GetAudioLengthFromStream(Windows.Storage.Streams.IRandomAccessStream stream, out UInt32 audioLengthMS);
            void OnNewState(SoundStateChangedEventArgs args);
            void OnReplayIterationCompleted(SoundStateChangedEventArgs args);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Media.Speech.Internal.InternalContract, 1)]
    [static_name("Windows.Media.Speech.Internal.IGeoLocatorHelper", 2de9ea84-29d1-4e3b-88c1-9c2c9ad8c060)]
    runtimeclass GeoLocatorHelper
    {
        static void StartLocationRetrieval();
        static void StartLocationRetrievalCompleted(Windows.Foundation.IAsyncOperation <Windows.Devices.Geolocation.Geoposition>  pGetOperation, AsyncStatus status);
        static void GetLocationData(out Double longitude, out Double latitude, out Double accuracy);
    }

}
