














namespace Windows.ApplicationModel.Appointments
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointment", dd002f2f-2bdd-4076-90a3-22c275312965)]
    runtimeclass Appointment
    {
        Appointment();
        Windows.Foundation.DateTime StartTime{ get; };
        Windows.Foundation.DateTime StartTime{ set; };
        Windows.Foundation.TimeSpan Duration{ get; };
        Windows.Foundation.TimeSpan Duration{ set; };
        String Location{ get; };
        String Location{ set; };
        String Subject{ get; };
        String Subject{ set; };
        String Details{ get; };
        String Details{ set; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  Reminder{ get; };
        Windows.Foundation.IReference <Windows.Foundation.TimeSpan>  Reminder{ set; };
        Windows.ApplicationModel.Appointments.AppointmentOrganizer Organizer{ get; };
        Windows.ApplicationModel.Appointments.AppointmentOrganizer Organizer{ set; };
        Windows.Foundation.Collections.IVector <Windows.ApplicationModel.Appointments.AppointmentInvitee>  Invitees{ get; };
        Windows.ApplicationModel.Appointments.AppointmentRecurrence Recurrence{ get; };
        Windows.ApplicationModel.Appointments.AppointmentRecurrence Recurrence{ set; };
        Windows.ApplicationModel.Appointments.AppointmentBusyStatus BusyStatus{ get; };
        Windows.ApplicationModel.Appointments.AppointmentBusyStatus BusyStatus{ set; };
        Boolean AllDay{ get; };
        Boolean AllDay{ set; };
        Windows.ApplicationModel.Appointments.AppointmentSensitivity Sensitivity{ get; };
        Windows.ApplicationModel.Appointments.AppointmentSensitivity Sensitivity{ set; };
        Windows.Foundation.Uri Uri{ get; };
        Windows.Foundation.Uri Uri{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointment2", 5e85983c-540f-3452-9b5c-0dd7ad4c65a2)]
        {
            String LocalId{ get; };
            String CalendarId{ get; };
            String RoamingId{ get; };
            String RoamingId{ set; };
            Windows.Foundation.IReference <Windows.Foundation.DateTime>  OriginalStartTime{ get; };
            Boolean IsResponseRequested{ get; };
            Boolean IsResponseRequested{ set; };
            Boolean AllowNewTimeProposal{ get; };
            Boolean AllowNewTimeProposal{ set; };
            String OnlineMeetingLink{ get; };
            String OnlineMeetingLink{ set; };
            Windows.Foundation.IReference <Windows.Foundation.DateTime>  ReplyTime{ get; };
            Windows.Foundation.IReference <Windows.Foundation.DateTime>  ReplyTime{ set; };
            Windows.ApplicationModel.Appointments.AppointmentParticipantResponse UserResponse{ get; };
            Windows.ApplicationModel.Appointments.AppointmentParticipantResponse UserResponse{ set; };
            Boolean HasInvitees{ get; };
            Boolean IsCanceledMeeting{ get; };
            Boolean IsCanceledMeeting{ set; };
            Boolean IsOrganizedByUser{ get; };
            Boolean IsOrganizedByUser{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointment3", bfcc45a9-8961-4991-934b-c48768e5a96c)]
        {
            UInt64 ChangeNumber{ get; };
            UInt64 RemoteChangeNumber{ get; };
            UInt64 RemoteChangeNumber{ set; };
            Windows.ApplicationModel.Appointments.AppointmentDetailsKind DetailsKind{ get; };
            Windows.ApplicationModel.Appointments.AppointmentDetailsKind DetailsKind{ set; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentStoreAccessType
    {
        AppCalendarsReadWrite,
        AllCalendarsReadOnly,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        AllCalendarsReadWrite,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStore", a461918c-7a47-4d96-96c9-15cd8a05a735)]
    runtimeclass AppointmentStore
    {
        Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker ChangeTracker{ get; };
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentCalendar>  CreateAppointmentCalendarAsync(String name);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentCalendar>  GetAppointmentCalendarAsync(String calendarId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.Appointment>  GetAppointmentAsync(String localId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.Appointment>  GetAppointmentInstanceAsync(String localId, Windows.Foundation.DateTime instanceStartTime);
        [method_name("FindAppointmentCalendarsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentCalendar> >  FindAppointmentCalendarsAsync();
        [method_name("FindAppointmentCalendarsAsyncWithOptions")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentCalendar> >  FindAppointmentCalendarsAsync(FindAppointmentCalendarsOptions options);
        [method_name("FindAppointmentsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAppointmentsAsync(Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength);
        [method_name("FindAppointmentsAsyncWithOptions")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAppointmentsAsync(Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength, FindAppointmentsOptions options);
        [method_name("FindConflictAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentConflictResult>  FindConflictAsync(Appointment appointment);
        [method_name("FindConflictAsyncWithInstanceStart")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentConflictResult>  FindConflictAsync(Appointment appointment, Windows.Foundation.DateTime instanceStartTime);
        [remote_sync]Windows.Foundation.IAsyncAction MoveAppointmentAsync(Appointment appointment, AppointmentCalendar destinationCalendar);
        [remote_sync]Windows.Foundation.IAsyncOperation <String>  ShowAddAppointmentAsync(Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowReplaceAppointmentAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String localId, Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowReplaceAppointmentWithPlacementAndDateAsync")] [remote_sync]Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String localId, Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        [method_name("ShowRemoveAppointmentAsync")] Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String localId, Windows.Foundation.Rect selection);
        [method_name("ShowRemoveAppointmentWithPlacementAndDateAsync")] Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String localId, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        [method_name("ShowAppointmentDetailsAsync")] Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String localId);
        [method_name("ShowAppointmentDetailsWithDateAsync")] Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String localId, Windows.Foundation.DateTime instanceStartDate);
        [remote_sync]Windows.Foundation.IAsyncOperation <String>  ShowEditNewAppointmentAsync(Appointment appointment);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <String> >  FindLocalIdsFromRoamingIdAsync(String roamingId);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStore2", 25c48c20-1c41-424f-8084-67c1cfe0a854)]
        {
            event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.AppointmentStore, Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs>  StoreChanged;
            [method_name("CreateAppointmentCalendarInAccountAsync")] Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentCalendar>  CreateAppointmentCalendarAsync(String name, String userDataAccountId);
        }

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStore3", 4251940b-b078-470a-9a40-c2e01761f72f)]
        {
            Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker GetChangeTracker(String identity);
        }
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentManagerForUser", 70261423-73cc-4660-b318-b01365302a03)]
    runtimeclass AppointmentManagerForUser
    {
        [method_name("ShowAddAppointmentAsync")] Windows.Foundation.IAsyncOperation <String>  ShowAddAppointmentAsync(Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowAddAppointmentWithPlacementAsync")] Windows.Foundation.IAsyncOperation <String>  ShowAddAppointmentAsync(Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowReplaceAppointmentAsync")] Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowReplaceAppointmentWithPlacementAsync")] Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowReplaceAppointmentWithPlacementAndDateAsync")] Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        [method_name("ShowRemoveAppointmentAsync")] Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection);
        [method_name("ShowRemoveAppointmentWithPlacementAsync")] Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowRemoveAppointmentWithPlacementAndDateAsync")] Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        Windows.Foundation.IAsyncAction ShowTimeFrameAsync(Windows.Foundation.DateTime timeToShow, Windows.Foundation.TimeSpan duration);
        [method_name("ShowAppointmentDetailsAsync")] Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String appointmentId);
        [method_name("ShowAppointmentDetailsWithDateAsync")] Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String appointmentId, Windows.Foundation.DateTime instanceStartDate);
        Windows.Foundation.IAsyncOperation <String>  ShowEditNewAppointmentAsync(Appointment appointment);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentStore>  RequestStoreAsync(AppointmentStoreAccessType options);
        Windows.System.User User{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentSensitivity
    {
        Public,
        Private,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentBusyStatus
    {
        Busy,
        Tentative,
        Free,
        OutOfOffice,
        WorkingElsewhere,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentParticipantResponse
    {
        None,
        Tentative,
        Accepted,
        Declined,
        Unknown,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentParticipantRole
    {
        RequiredAttendee,
        OptionalAttendee,
        Resource,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(615e2902-9718-467b-83fb-b293a19121de)]
    interface IAppointmentParticipant
    {
        String DisplayName{ get; };
        String DisplayName{ set; };
        String Address{ get; };
        String Address{ set; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AppointmentOrganizer
        : [default]Windows.ApplicationModel.Appointments.IAppointmentParticipant
    {
        AppointmentOrganizer();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentInvitee", 13bf0796-9842-495b-b0e7-ef8f79c0701d)]
    runtimeclass AppointmentInvitee
        : Windows.ApplicationModel.Appointments.IAppointmentParticipant
    {
        AppointmentInvitee();
        Windows.ApplicationModel.Appointments.AppointmentParticipantRole Role{ get; };
        Windows.ApplicationModel.Appointments.AppointmentParticipantRole Role{ set; };
        Windows.ApplicationModel.Appointments.AppointmentParticipantResponse Response{ get; };
        Windows.ApplicationModel.Appointments.AppointmentParticipantResponse Response{ set; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentRecurrenceUnit
    {
        Daily,
        Weekly,
        Monthly,
        MonthlyOnDay,
        Yearly,
        YearlyOnDay,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [flags]
    enum AppointmentDaysOfWeek
    {
        None,
        Sunday,
        Monday,
        Tuesday = 4,
        Wednesday = 8,
        Thursday = 16,
        Friday = 32,
        Saturday = 64,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentWeekOfMonth
    {
        First,
        Second,
        Third,
        Fourth,
        Last,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentCalendarSyncStatus
    {
        Idle,
        Syncing,
        UpToDate,
        AuthenticationError,
        PolicyError,
        UnknownError,
        [contract(Windows.Foundation.UniversalApiContract, 2)]
        ManualAccountRemovalRequired,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum RecurrenceType
    {
        Master,
        Instance,
        ExceptionInstance,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentRecurrence", d87b3e83-15a6-487b-b959-0c361e60e954)]
    runtimeclass AppointmentRecurrence
    {
        AppointmentRecurrence();
        Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit Unit{ get; };
        Windows.ApplicationModel.Appointments.AppointmentRecurrenceUnit Unit{ set; };
        Windows.Foundation.IReference <UInt32>  Occurrences{ get; };
        Windows.Foundation.IReference <UInt32>  Occurrences{ set; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Until{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  Until{ set; };
        UInt32 Interval{ get; };
        UInt32 Interval{ set; };
        Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek DaysOfWeek{ get; };
        Windows.ApplicationModel.Appointments.AppointmentDaysOfWeek DaysOfWeek{ set; };
        Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth WeekOfMonth{ get; };
        Windows.ApplicationModel.Appointments.AppointmentWeekOfMonth WeekOfMonth{ set; };
        UInt32 Month{ get; };
        UInt32 Month{ set; };
        UInt32 Day{ get; };
        UInt32 Day{ set; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentRecurrence2", 3df3a2e0-05a7-4f50-9f86-b03f9436254d)]
        {
            Windows.ApplicationModel.Appointments.RecurrenceType RecurrenceType{ get; };
            String TimeZone{ get; };
            String TimeZone{ set; };
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentRecurrence3", 89ff96d9-da4d-4a17-8dd2-1cebc2b5ff9d)]
        {
            String CalendarIdentifier{ get; };
        }
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentDetailsKind
    {
        PlainText,
        Html,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.ApplicationModel.Appointments.IAppointmentManagerStatics", 3a30fa01-5c40-499d-b33f-a43050f74fc4)]
    runtimeclass AppointmentManager
    {
        [method_name("ShowAddAppointmentAsync")] static Windows.Foundation.IAsyncOperation <String>  ShowAddAppointmentAsync(Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowAddAppointmentWithPlacementAsync")] static Windows.Foundation.IAsyncOperation <String>  ShowAddAppointmentAsync(Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowReplaceAppointmentAsync")] static Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection);
        [method_name("ShowReplaceAppointmentWithPlacementAsync")] static Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowReplaceAppointmentWithPlacementAndDateAsync")] static Windows.Foundation.IAsyncOperation <String>  ShowReplaceAppointmentAsync(String appointmentId, Appointment appointment, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        [method_name("ShowRemoveAppointmentAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection);
        [method_name("ShowRemoveAppointmentWithPlacementAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement);
        [method_name("ShowRemoveAppointmentWithPlacementAndDateAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  ShowRemoveAppointmentAsync(String appointmentId, Windows.Foundation.Rect selection, Windows.UI.Popups.Placement preferredPlacement, Windows.Foundation.DateTime instanceStartDate);
        static Windows.Foundation.IAsyncAction ShowTimeFrameAsync(Windows.Foundation.DateTime timeToShow, Windows.Foundation.TimeSpan duration);

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [static_name("Windows.ApplicationModel.Appointments.IAppointmentManagerStatics3", 2f9ae09c-b34c-4dc7-a35d-cafd88ae3ec6)]
        {
            static Windows.ApplicationModel.Appointments.AppointmentManagerForUser GetForUser(Windows.System.User user);
        }

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.ApplicationModel.Appointments.IAppointmentManagerStatics2", 0a81f60d-d04f-4034-af72-a36573b45ff0)]
        {
            [method_name("ShowAppointmentDetailsAsync")] static Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String appointmentId);
            [method_name("ShowAppointmentDetailsWithDateAsync")] static Windows.Foundation.IAsyncAction ShowAppointmentDetailsAsync(String appointmentId, Windows.Foundation.DateTime instanceStartDate);
            static Windows.Foundation.IAsyncOperation <String>  ShowEditNewAppointmentAsync(Appointment appointment);
            static Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.AppointmentStore>  RequestStoreAsync(AppointmentStoreAccessType options);
        }
    }

    [flags]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum FindAppointmentCalendarsOptions
    {
        None,
        IncludeHidden,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentSummaryCardView
    {
        System,
        App,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentCalendarOtherAppReadAccess
    {
        SystemOnly,
        Limited,
        Full,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        None,
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentCalendarOtherAppWriteAccess
    {
        None,
        SystemOnly,
        [contract(Windows.Foundation.UniversalApiContract, 3)]
        Limited,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IFindAppointmentsOptions", 55f7dc55-9942-3086-82b5-2cb29f64d5f5)]
    [threading(both)]
    runtimeclass FindAppointmentsOptions
    {
        FindAppointmentsOptions();
        Windows.Foundation.Collections.IVector <String>  CalendarIds{ get; };
        Windows.Foundation.Collections.IVector <String>  FetchProperties{ get; };
        Boolean IncludeHidden{ get; };
        Boolean IncludeHidden{ set; };
        UInt32 MaxCount{ get; };
        UInt32 MaxCount{ set; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentException", a2076767-16f6-4bce-9f5a-8600b8019fcb)]
    runtimeclass AppointmentException
    {
        Windows.ApplicationModel.Appointments.Appointment Appointment{ get; };
        Windows.Foundation.Collections.IVectorView <String>  ExceptionProperties{ get; };
        Boolean IsDeleted{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager", 2b21b3a0-4aff-4392-bc5f-5645ffcffb17)]
    runtimeclass AppointmentCalendarSyncManager
    {
        Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus Status{ get; };
        Windows.Foundation.DateTime LastSuccessfulSyncTime{ get; };
        Windows.Foundation.DateTime LastAttemptedSyncTime{ get; };
        Windows.Foundation.IAsyncOperation <Boolean>  SyncAsync();
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager, Object>  SyncStatusChanged;

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentCalendarSyncManager2", 647528ad-0d29-4c7c-aaa7-bf996805537c)]
        {
            Windows.ApplicationModel.Appointments.AppointmentCalendarSyncStatus Status{ set; };
            Windows.Foundation.DateTime LastSuccessfulSyncTime{ set; };
            Windows.Foundation.DateTime LastAttemptedSyncTime{ set; };
        }
    }






    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentConflictType
    {
        None,
        Adjacent,
        Overlap,
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum AppointmentStoreChangeType
    {
        AppointmentCreated,
        AppointmentModified,
        AppointmentDeleted,
        ChangeTrackingLost,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        CalendarCreated,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        CalendarModified,
        [contract(Windows.Foundation.UniversalApiContract, 1)]
        CalendarDeleted,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentCalendar", 5273819d-8339-3d4f-a02f-64084452bb5d)]
    runtimeclass AppointmentCalendar
    {
        Windows.UI.Color DisplayColor{ get; };
        String DisplayName{ get; };
        String DisplayName{ set; };
        String LocalId{ get; };
        Boolean IsHidden{ get; };
        Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess OtherAppReadAccess{ get; };
        Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppReadAccess OtherAppReadAccess{ set; };
        Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess OtherAppWriteAccess{ get; };
        Windows.ApplicationModel.Appointments.AppointmentCalendarOtherAppWriteAccess OtherAppWriteAccess{ set; };
        String SourceDisplayName{ get; };
        Windows.ApplicationModel.Appointments.AppointmentSummaryCardView SummaryCardView{ get; };
        Windows.ApplicationModel.Appointments.AppointmentSummaryCardView SummaryCardView{ set; };
        [method_name("FindAppointmentsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAppointmentsAsync(Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength);
        [method_name("FindAppointmentsAsyncWithOptions")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAppointmentsAsync(Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength, FindAppointmentsOptions options);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentException> >  FindExceptionsFromMasterAsync(String masterLocalId);
        [method_name("FindAllInstancesAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAllInstancesAsync(String masterLocalId, Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength);
        [method_name("FindAllInstancesAsyncWithOptions")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindAllInstancesAsync(String masterLocalId, Windows.Foundation.DateTime rangeStart, Windows.Foundation.TimeSpan rangeLength, FindAppointmentsOptions pOptions);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.Appointment>  GetAppointmentAsync(String localId);
        Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Appointments.Appointment>  GetAppointmentInstanceAsync(String localId, Windows.Foundation.DateTime instanceStartTime);
        [method_name("FindUnexpandedAppointmentsAsync")] Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindUnexpandedAppointmentsAsync();
        [method_name("FindUnexpandedAppointmentsAsyncWithOptions")] [remote_sync]Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.Appointment> >  FindUnexpandedAppointmentsAsync(FindAppointmentsOptions options);
        Windows.Foundation.IAsyncAction DeleteAsync();
        Windows.Foundation.IAsyncAction SaveAsync();
        Windows.Foundation.IAsyncAction DeleteAppointmentAsync(String localId);
        Windows.Foundation.IAsyncAction DeleteAppointmentInstanceAsync(String localId, Windows.Foundation.DateTime instanceStartTime);
        [remote_sync]Windows.Foundation.IAsyncAction SaveAppointmentAsync(Appointment pAppointment);

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentCalendar2", 18e7e422-2467-4e1c-a459-d8a29303d092)]
        {
            Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager SyncManager{ get; };
            String RemoteId{ get; };
            String RemoteId{ set; };
            Windows.UI.Color DisplayColor{ set; };
            Boolean IsHidden{ set; };
            String UserDataAccountId{ get; };
            Boolean CanCreateOrUpdateAppointments{ get; };
            Boolean CanCreateOrUpdateAppointments{ set; };
            Boolean CanCancelMeetings{ get; };
            Boolean CanCancelMeetings{ set; };
            Boolean CanForwardMeetings{ get; };
            Boolean CanForwardMeetings{ set; };
            Boolean CanProposeNewTimeForMeetings{ get; };
            Boolean CanProposeNewTimeForMeetings{ set; };
            Boolean CanUpdateMeetingResponses{ get; };
            Boolean CanUpdateMeetingResponses{ set; };
            Boolean CanNotifyInvitees{ get; };
            Boolean CanNotifyInvitees{ set; };
            Boolean MustNofityInvitees{ get; };
            Boolean MustNofityInvitees{ set; };
            [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  TryCreateOrUpdateAppointmentAsync(Appointment appointment, Boolean notifyInvitees);
            [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  TryCancelMeetingAsync(Appointment meeting, String subject, String comment, Boolean notifyInvitees);
            [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  TryForwardMeetingAsync(Appointment meeting, Windows.Foundation.Collections.IIterable <Windows.ApplicationModel.Appointments.AppointmentInvitee>  invitees, String subject, String forwardHeader, String comment);
            [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  TryProposeNewTimeForMeetingAsync(Appointment meeting, Windows.Foundation.DateTime newStartTime, Windows.Foundation.TimeSpan newDuration, String subject, String comment);
            [remote_sync]Windows.Foundation.IAsyncOperation <Boolean>  TryUpdateMeetingResponseAsync(Appointment meeting, AppointmentParticipantResponse response, String subject, String comment, Boolean sendUpdate);
        }

        [contract(Windows.Foundation.UniversalApiContract, 3)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentCalendar3", eb23d22b-a685-42ae-8495-b3119adb4167)]
        {
            Windows.Foundation.IAsyncAction RegisterSyncManagerAsync();
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChange", a5a6e035-0a33-3654-8463-b543e90c3b79)]
    runtimeclass AppointmentStoreChange
    {
        Windows.ApplicationModel.Appointments.Appointment Appointment{ get; };
        Windows.ApplicationModel.Appointments.AppointmentStoreChangeType ChangeType{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChange2", b37d0dce-5211-4402-a608-a96fe70b8ee2)]
        {
            Windows.ApplicationModel.Appointments.AppointmentCalendar AppointmentCalendar{ get; };
        }
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChangeReader", 8b2409f1-65f3-42a0-961d-4c209bf30370)]
    runtimeclass AppointmentStoreChangeReader
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentStoreChange> >  ReadBatchAsync();
        void AcceptChanges();
        void AcceptChangesThrough(AppointmentStoreChange lastChangeToAccept);
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChangedDeferral", 4cb82026-fedb-4bc3-9662-95a9befdf4df)]
    runtimeclass AppointmentStoreChangedDeferral
    {
        void Complete();
    }




    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker", 1b25f4b1-8ece-4f17-93c8-e6412458fd5c)]
    runtimeclass AppointmentStoreChangeTracker
    {
        Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader GetChangeReader();
        void Enable();
        void Reset();

        [contract(Windows.Foundation.UniversalApiContract, 5)]
        [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChangeTracker2", b66aaf45-9542-4cf7-8550-eb370e0c08d3)]
        {
            Boolean IsTracking{ get; };
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentConflictResult", d5cdf0be-2f2f-3b7d-af0a-a7e20f3a46e3)]
    runtimeclass AppointmentConflictResult
    {
        Windows.ApplicationModel.Appointments.AppointmentConflictType Type{ get; };
        Windows.Foundation.DateTime Date{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreChangedEventArgs", 2285f8b9-0791-417e-bfea-cc6d41636c8c)]
    runtimeclass AppointmentStoreChangedEventArgs
    {
        Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral GetDeferral();
    }



    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics2", dffc434b-b017-45dd-8af5-d163d10801bb)]
    [threading(both)]
    runtimeclass AppointmentProperties
    {
        static String ChangeNumber{ get; };
        static String RemoteChangeNumber{ get; };
        static String DetailsKind{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.ApplicationModel.Appointments.IAppointmentPropertiesStatics", 25141fe9-68ae-3aae-855f-bc4441caa234)]
        {
            static String Subject{ get; };
            static String Location{ get; };
            static String StartTime{ get; };
            static String Duration{ get; };
            static String Reminder{ get; };
            static String BusyStatus{ get; };
            static String Sensitivity{ get; };
            static String OriginalStartTime{ get; };
            static String IsResponseRequested{ get; };
            static String AllowNewTimeProposal{ get; };
            static String AllDay{ get; };
            static String Details{ get; };
            static String OnlineMeetingLink{ get; };
            static String ReplyTime{ get; };
            static String Organizer{ get; };
            static String UserResponse{ get; };
            static String HasInvitees{ get; };
            static String IsCanceledMeeting{ get; };
            static String IsOrganizedByUser{ get; };
            static String Recurrence{ get; };
            static String Uri{ get; };
            static String Invitees{ get; };
            static Windows.Foundation.Collections.IVector <String>  DefaultProperties{ get; };
        }
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.ApplicationModel.Appointments.IAppointmentStoreNotificationTriggerDetails", 9b33cb11-c301-421e-afef-047ecfa76adb)]
    runtimeclass AppointmentStoreNotificationTriggerDetails
    {
    }


}
namespace Windows.ApplicationModel.Background
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.ApplicationModel.Background.IAppointmentStoreNotificationTrigger", 64d4040c-c201-42ad-aa2a-e21ba3425b6d)]
    [threading(both)]
    runtimeclass AppointmentStoreNotificationTrigger
        : Windows.ApplicationModel.Background.IBackgroundTrigger
    {
        AppointmentStoreNotificationTrigger();
    }






}
namespace Windows.ApplicationModel.Appointments.AppointmentsProvider
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics", 36dbba28-9e2e-49c6-8ef7-3ab7a5dcc8b8)]
    runtimeclass AppointmentsProviderLaunchActionVerbs
    {
        static String AddAppointment{ get; };
        static String ReplaceAppointment{ get; };
        static String RemoveAppointment{ get; };
        static String ShowTimeFrame{ get; };

        [contract(Windows.Foundation.UniversalApiContract, 1)]
        [static_name("Windows.ApplicationModel.Appointments.AppointmentsProvider.IAppointmentsProviderLaunchActionVerbsStatics2", ef9049a4-af21-473c-88dc-76cd89f60ca5)]
        {
            static String ShowAppointmentDetails{ get; };
        }
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.AppointmentsProvider.IAddAppointmentOperation", ec4a9af3-620d-4c69-add7-9794e918081f)]
    runtimeclass AddAppointmentOperation
    {
        Windows.ApplicationModel.Appointments.Appointment AppointmentInformation{ get; };
        String SourcePackageFamilyName{ get; };
        void ReportCompleted(String itemId);
        void ReportCanceled();
        void ReportError(String value);
        void DismissUI();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [interface_name("Windows.ApplicationModel.Appointments.AppointmentsProvider.IReplaceAppointmentOperation", f4903d9b-9e61-4de2-a732-2687c07d1de8)]
    runtimeclass ReplaceAppointmentOperation
    {
        String AppointmentId{ get; };
        Windows.ApplicationModel.Appointments.Appointment AppointmentInformation{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  InstanceStartDate{ get; };
        String SourcePackageFamilyName{ get; };
        void ReportCompleted(String itemId);
        void ReportCanceled();
        void ReportError(String value);
        void DismissUI();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.AppointmentsProvider.IRemoveAppointmentOperation", 08b66aba-fe33-46cd-a50c-a8ffb3260537)]
    runtimeclass RemoveAppointmentOperation
    {
        String AppointmentId{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  InstanceStartDate{ get; };
        String SourcePackageFamilyName{ get; };
        void ReportCompleted();
        void ReportCanceled();
        void ReportError(String value);
        void DismissUI();
    }

}
namespace Windows.ApplicationModel.Activation
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(3364c405-933c-4e7d-a034-500fb8dcd9f3)]
    interface IAppointmentsProviderActivatedEventArgs requires Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        String Verb{ get; };
    };

    [uuid(a2861367-cee5-4e4d-9ed7-41c34ec18b02)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAppointmentsProviderAddAppointmentActivatedEventArgs requires Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation AddAppointmentOperation{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AppointmentsProviderAddAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [uuid(1551b7d4-a981-4067-8a62-0524e4ade121)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAppointmentsProviderReplaceAppointmentActivatedEventArgs requires Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation ReplaceAppointmentOperation{ get; };
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass AppointmentsProviderReplaceAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(751f3ab8-0b8e-451c-9f15-966e699bac25)]
    interface IAppointmentsProviderRemoveAppointmentActivatedEventArgs requires Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation RemoveAppointmentOperation{ get; };
    };

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass AppointmentsProviderRemoveAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [uuid(3958f065-9841-4ca5-999b-885198b9ef2a)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs requires Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  InstanceStartDate{ get; };
        String LocalId{ get; };
        String RoamingId{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [uuid(9baeaba6-0e0b-49aa-babc-12b1dc774986)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IAppointmentsProviderShowTimeFrameActivatedEventArgs requires Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs, Windows.ApplicationModel.Activation.IActivatedEventArgs
    {
        Windows.Foundation.DateTime TimeToShow{ get; };
        Windows.Foundation.TimeSpan Duration{ get; };
    };

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass AppointmentsProviderShowTimeFrameActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

}
namespace Windows.UI.WebUI
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    runtimeclass WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderAddAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , Windows.UI.WebUI.IActivatedEventArgsDeferral
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    runtimeclass WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , Windows.UI.WebUI.IActivatedEventArgsDeferral
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [marshaling_behavior(standard)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , Windows.UI.WebUI.IActivatedEventArgsDeferral
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(standard)]
    runtimeclass WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , Windows.UI.WebUI.IActivatedEventArgsDeferral
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }

    [marshaling_behavior(standard)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    runtimeclass WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
        : [default]Windows.ApplicationModel.Activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs
        , Windows.ApplicationModel.Activation.IAppointmentsProviderActivatedEventArgs
        , Windows.ApplicationModel.Activation.IActivatedEventArgs
        , Windows.UI.WebUI.IActivatedEventArgsDeferral
        , [contract(Windows.Foundation.UniversalApiContract, 3)]
        Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
    {
    }


}
namespace Windows.ApplicationModel.Appointments.DataProvider
{
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentDataProviderConnection", f3dd9d83-3254-465f-abdb-928046552cf4)]
    runtimeclass AppointmentDataProviderConnection
    {
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequestEventArgs>  SyncRequested;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>  CreateOrUpdateAppointmentRequested;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequestEventArgs>  CancelMeetingRequested;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequestEventArgs>  ForwardMeetingRequested;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>  ProposeNewTimeForMeetingRequested;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection, Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequestEventArgs>  UpdateMeetingResponseRequested;
        void Start();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarSyncManagerSyncRequestEventArgs", ca17c6f7-0284-4edd-87ba-4d8f69dcf5c0)]
    runtimeclass AppointmentCalendarSyncManagerSyncRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarSyncManagerSyncRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs", cf8ded28-002e-4bf7-8e9d-5e20d49aa3ba)]
    runtimeclass AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCreateOrUpdateAppointmentRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCancelMeetingRequestEventArgs", 1a79be16-7f30-4e35-beef-9d2c7b6dcae1)]
    runtimeclass AppointmentCalendarCancelMeetingRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarCancelMeetingRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarForwardMeetingRequestEventArgs", 3109151a-23a2-42fd-9c82-c9a60d59f8a8)]
    runtimeclass AppointmentCalendarForwardMeetingRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarForwardMeetingRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs", d2d777d8-fed1-4280-a3ba-2e1f47609aa2)]
    runtimeclass AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarProposeNewTimeForMeetingRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarUpdateMeetingResponseRequestEventArgs", 88759883-97bf-479d-aed5-0be8ce567d1e)]
    runtimeclass AppointmentCalendarUpdateMeetingResponseRequestEventArgs
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentCalendarUpdateMeetingResponseRequest Request{ get; };
        Windows.Foundation.Deferral GetDeferral();
    }







    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentDataProviderTriggerDetails", b3283c01-7e12-4e5e-b1ef-74fb68ac6f2a)]
    runtimeclass AppointmentDataProviderTriggerDetails
    {
        Windows.ApplicationModel.Appointments.DataProvider.AppointmentDataProviderConnection Connection{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarSyncManagerSyncRequest", 12ab382b-7163-4a56-9a4e-7223a84adf46)]
    runtimeclass AppointmentCalendarSyncManagerSyncRequest
    {
        String AppointmentCalendarLocalId{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync();
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCreateOrUpdateAppointmentRequest", 2e62f2b2-ca96-48ac-9124-406b19fefa70)]
    runtimeclass AppointmentCalendarCreateOrUpdateAppointmentRequest
    {
        String AppointmentCalendarLocalId{ get; };
        Windows.ApplicationModel.Appointments.Appointment Appointment{ get; };
        Boolean NotifyInvitees{ get; };
        Windows.Foundation.Collections.IVectorView <String>  ChangedProperties{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync(Windows.ApplicationModel.Appointments.Appointment createdOrUpdatedAppointment);
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }


    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarCancelMeetingRequest", 49460f8d-6434-40d7-ad46-6297419314d1)]
    runtimeclass AppointmentCalendarCancelMeetingRequest
    {
        String AppointmentCalendarLocalId{ get; };
        String AppointmentLocalId{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  AppointmentOriginalStartTime{ get; };
        String Subject{ get; };
        String Comment{ get; };
        Boolean NotifyInvitees{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync();
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarForwardMeetingRequest", 82e5ee56-26b6-4253-8a8f-6cf5f2ff7884)]
    runtimeclass AppointmentCalendarForwardMeetingRequest
    {
        String AppointmentCalendarLocalId{ get; };
        String AppointmentLocalId{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  AppointmentOriginalStartTime{ get; };
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Appointments.AppointmentInvitee>  Invitees{ get; };
        String Subject{ get; };
        String ForwardHeader{ get; };
        String Comment{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync();
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarProposeNewTimeForMeetingRequest", ce1c63f5-edf6-43c3-82b7-be6b368c6900)]
    runtimeclass AppointmentCalendarProposeNewTimeForMeetingRequest
    {
        String AppointmentCalendarLocalId{ get; };
        String AppointmentLocalId{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  AppointmentOriginalStartTime{ get; };
        Windows.Foundation.DateTime NewStartTime{ get; };
        Windows.Foundation.TimeSpan NewDuration{ get; };
        String Subject{ get; };
        String Comment{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync();
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Appointments.DataProvider.IAppointmentCalendarUpdateMeetingResponseRequest", a36d608c-c29d-4b94-b086-7e9ff7bd84a0)]
    runtimeclass AppointmentCalendarUpdateMeetingResponseRequest
    {
        String AppointmentCalendarLocalId{ get; };
        String AppointmentLocalId{ get; };
        Windows.Foundation.IReference <Windows.Foundation.DateTime>  AppointmentOriginalStartTime{ get; };
        Windows.ApplicationModel.Appointments.AppointmentParticipantResponse Response{ get; };
        String Subject{ get; };
        String Comment{ get; };
        Boolean SendUpdate{ get; };
        Windows.Foundation.IAsyncAction ReportCompletedAsync();
        Windows.Foundation.IAsyncAction ReportFailedAsync();
    }

}
