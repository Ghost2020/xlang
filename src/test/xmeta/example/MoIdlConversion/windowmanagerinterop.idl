














namespace Windows.Internal.Shell.ViewManagerInterop
{
    [contract(Windows.Internal.Shell.ViewManagerInterop.InternalContract, 1)]
    [uuid(3bf22d51-7679-4ce2-8bae-8b78613e83cc)]
    interface IWindowWrapper requires Windows.Internal.Shell.ViewManagerInterop.IViewWrapper, Windows.Internal.Shell.ViewManagerInterop.IClientWindowState, Windows.Internal.Shell.ViewManagerInterop.IViewRecoveryState
    {
        Windows.UI.Internal.Core.IslandTransformsMode IslandTransformsMode{ get; };
        Windows.Internal.ApplicationModel.WindowingEnvironment.ApplicationWindowPresenterKindInternal AppliedPresenterMode{ get; };
        void StartSizingBatch();
        void EndSizingBatch();
        Windows.Foundation.Collections.IVectorView <Windows.Internal.ApplicationModel.WindowingEnvironment.DisplayRegionId>  DisplayRegionIds{ get; };
        void ChangeDisplayRegionIds(Windows.Foundation.Collections.IVectorView <Windows.Internal.ApplicationModel.WindowingEnvironment.DisplayRegionId>  displayRegions);
        [method_name("ChangeBoundsWithPresenter")] void ChangeBounds(ViewBounds bounds, Windows.Internal.ApplicationModel.WindowingEnvironment.ApplicationWindowPresenterKindInternal appliedPresenter);
        void ApplyPresenter(Windows.Internal.ApplicationModel.WindowingEnvironment.ApplicationWindowPresenterKindInternal presenter);
        void UpdateEngagementTelemetryFlags(UInt64 flagsToUpdate, UInt64 flagValues);
        Windows.Foundation.Collections.IPropertySet WindowProperties{ get; };
        Windows.Internal.ApplicationModel.WindowManagement.AppViewExecutionState ExecutionState{ get; };
        String PersistingStateName{ get; };
    };

    [contract(Windows.Internal.Shell.ViewManagerInterop.InternalContract, 1)]
    enum WindowEventType
    {
        ApplyWindowingEnvironmentSettingsRequested,
    };

    [uuid(85fae749-3214-42e8-b1c5-8d5f86b67818)]
    [contract(Windows.Internal.Shell.ViewManagerInterop.InternalContract, 1)]
    interface IWindowEventArgs
    {
        Windows.Internal.Shell.ViewManagerInterop.WindowEventType EventType{ get; };
    };

    [uuid(c7bde17e-fb77-40d2-97c9-5b9c8a855167)]
    [contract(Windows.Internal.Shell.ViewManagerInterop.InternalContract, 1)]
    interface IApplyWindowingEnvironmentSettingsRequestedEventArgs requires Windows.Internal.Shell.ViewManagerInterop.IWindowEventArgs
    {
        Windows.Internal.ApplicationModel.WindowManagement.AppViewApplyWindowingEnvironmentSettingsRequestedEventArgs EventArgs{ get; };
    };

    [contract(Windows.Internal.Shell.ViewManagerInterop.InternalContract, 1)]
    [uuid(aad68fc2-0e5a-4fbd-911e-55b2b45b8106)]
    interface IWindowEventDispatcher requires Windows.Internal.Shell.ViewManagerInterop.IViewEventDispatcher
    {
        EventRegistrationToken RegisterForWindowEvents(Windows.Foundation.TypedEventHandler <Windows.Internal.Shell.ViewManagerInterop.IViewWrapper, Windows.Internal.Shell.ViewManagerInterop.IViewEventArgs>  viewEventHandler, Windows.Foundation.TypedEventHandler <Object, Windows.Internal.Shell.ViewManagerInterop.IWindowEventArgs>  windowEventHandler, String appIdFilter, String experienceIdFilter);
        void UnregisterForWindowEvents(EventRegistrationToken token);
    };

}
