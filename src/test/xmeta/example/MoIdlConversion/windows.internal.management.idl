








namespace Windows.Internal.Management
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

}
namespace Windows.Internal.Management.Enrollment
{
    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum MDMAuthPolicy
    {
        MDMAuthPolicyOnPremise,
        MDMAuthPolicyFederated,
        MDMAuthPolicyCertificate,
        MDMAuthPolicyMax,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementEnrollmentType
    {
        EnrollmentEnrollTypeClassroomManagement = 2,
        EnrollmentEnrollTypeLockdown,
        EnrollmentEnrollTypeMAM = 5,
        EnrollmentEnrollTypeMDMDeviceWithAAD,
        EnrollmentEnrollTypeMDMFullWithAAD = 13,
        EnrollmentEnrollTypeLocalApplication = 23,
        EnrollmentEnrollTypeAllMDM = 4,
        EnrollmentEnrollTypeMDMEvaluate = 22,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementEnrollmentFlags
    {
        EnrollmentEnrollFlagNone,
        EnrollmentEnrollFlagIgnoreUnknownCA = 16,
        EnrollmentEnrollFlagBackcompatToV3 = 32,
        EnrollmentEnrollFlagBackcompatToV4 = 64,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementEnrollmentInformation
    {
        String UPN;
        String DiscoveryServiceFullUrl;
        String Secret;
        MDMAuthPolicy AuthPolicy;
        String DomainUsername;
        String PolicyServiceFullUrl;
        String EnrollmentServiceFullUrl;
        UInt32 EnrollmentFlags;
        String SID;
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum JoinType
    {
        DeviceJoin,
        UserJoin,
        MAMWithDiscovery,
        MAMWithoutDiscovery,
        BulkDeviceJoin,
        DeviceJoinForDomainJoin,
        DeviceJoinFromUX,
        UserJoinFromUX,
        PlugAndForget,
        MDMEvaluate,
        WhiteGlove,
        WhiteGloveHybridJoin,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum CanEnrollType
    {
        CannotEnroll,
        CanEnroll,
        CanEnrollWithEviction,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementDeviceEnrollmentInformation
    {
        String UPN;
        String DiscoveryServiceFullUrl;
        String TokenForMDM;
        String TermsOfUseArtifact;
        JoinType Join;
        String AccountID;
        String AadResourceUrl;
        String OpaqueID;
        String TenantID;
        String CorrelationID;
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementMobileOperatorInformation
    {
        String UserIdentifier;
        Guid EnrollmentId;
    };


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [interface_name("Windows.Internal.Management.Enrollment.IEnrollmentResult", ea3e6f38-0708-4cce-aafa-aa581441f179)]
    runtimeclass EnrollmentResult
    {
        Guid EnrollmentGUID{ get; };
        String EnrollmentGUIDAsString{ get; };
        HRESULT EnrollmentErrorCode{ get; };
        String EnrollmentErrorString{ get; };
        HRESULT EnrollmentInternalError{ get; };
    }

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementUnenrollInformation
    {
        String EnrollmentId;
    };


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Management.Enrollment.IEnrollment", 9cb302b2-e79d-4beb-84c7-3abcb992df4e)]
    [threading(both)]
    runtimeclass Enroller
    {
        Enroller();
        Windows.Foundation.IAsyncAction UnenrollAsync(DeviceManagementUnenrollInformation UnenrollInformation);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Enrollment.EnrollmentResult>  EnrollAsync(DeviceManagementEnrollmentInformation EnrollInformation);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Enrollment.EnrollmentResult>  LocalEnrollAsync(DeviceManagementEnrollmentType Type);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Enrollment.EnrollmentResult>  AADEnrollAsync(DeviceManagementDeviceEnrollmentInformation EnrollInformation);
        Guid BeginMobileOperatorScope(DeviceManagementMobileOperatorInformation scopeInformation);
        Windows.Foundation.Collections.IVectorView <String>  GetEnrollments(DeviceManagementEnrollmentType Type);
        Windows.Foundation.Collections.IVectorView <String>  GetEnrollmentsOfCurrentUser(DeviceManagementEnrollmentType Type);
        [return_name("enrollments")] Windows.Foundation.Collections.IVectorView <String>  CanEnroll(DeviceManagementEnrollmentType Type, DeviceManagementDeviceEnrollmentInformation EnrollInformation, out CanEnrollType CanEnrollResult);
        void Migrate(String certPassword);
        void MigrationNeeded(out Boolean value);
        void MoMigrate();
        void MoMigrationNeeded(out Boolean value);
        String GetEnrollmentFromOpaqueID(String OpaqueID);
        String GetApplicationEnrollment(String applicationId, String accountId, DeviceManagementEnrollmentType Type);
        void DeleteSCEPTask(String scepUniqueId);
        void QueueUnenroll(DeviceManagementUnenrollInformation UnenrollInformation);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Enrollment.EnrollmentResult>  LocalApplicationEnrollAsync(String applicationId, String accountId, DeviceManagementEnrollmentType Type);
        Windows.Foundation.IAsyncAction LocalApplicationUnenrollAsync(String applicationId);
    }

}
namespace Windows.Internal.Management.Orchestration
{
    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum SecureAssessmentPolicyTypes
    {
        All,
        AllowKeyboardTextSuggestions,
        DenyKeyboardTextSuggestions,
    };


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Management.Orchestration.ISecureAssessmentPolicies", e2c05f7f-85ad-48fa-9362-c206249b9e3d)]
    runtimeclass SecureAssessmentPolicies
    {
        void Apply(String enrollmentId, SecureAssessmentPolicyTypes policyType);
    }


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Management.Orchestration.ISecureAssessmentUtilities", b26e8ce1-88c0-4b40-8f4f-c73fd21556f0)]
    runtimeclass SecureAssessmentUtilities
    {
        Boolean IsVMSession();
    }

}
namespace Windows.Internal.Management.Provision
{
    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementSessionUiMode
    {
        SessionUiModeBackground,
        SessionUiModeUserInteractive,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementSessionOrigin
    {
        SessionOriginUser,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementInitiationInformation
    {
        DeviceManagementSessionUiMode UiMode;
        DeviceManagementSessionOrigin Origin;
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementAlertMark
    {
        AlertMarkFatal,
        AlertMarkCritical,
        AlertMarkWarning,
        AlertMarkInformational,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementAlertDataType
    {
        AlertDataTypeInteger,
        AlertDataTypeString,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementAlertEventType
    {
        AlertEventTypeDevice,
        AlertEventTypeGeneric,
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    struct DeviceManagementAlertInformation
    {
        String Type;
        String Source;
        String Target;
        String Correlator;
        UInt32 StatusCode;
        String Data;
        DeviceManagementAlertDataType DataType;
        DeviceManagementAlertEventType EventType;
        DeviceManagementAlertMark Mark;
    };

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum DeviceManagementSessionState
    {
        SessionStateUnknown,
        SessionStateReady,
        SessionStateConnecting,
        SessionStateCommunicating,
        SessionStateAlertStatusAvailable,
        SessionStateCompleted,
        SessionStateRetry,
        SessionState,
    };


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [interface_name("Windows.Internal.Management.Provision.ISessionResult", 14a64ff1-27a8-4253-8e3a-c52eaa66f857)]
    runtimeclass SessionResult
    {
        String Id{ get; };
        Windows.Internal.Management.Provision.DeviceManagementSessionState State{ get; };
        HRESULT StatusCode{ get; };
    }


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Management.Provision.ISessionManager", 7611a5c3-7a06-4585-9149-369c349c5e79)]
    [threading(both)]
    runtimeclass SessionManager
    {
        SessionManager();
        [method_name("InitiateSessionAsync")] Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Provision.SessionResult>  InitiateSessionAsync(String EnrollmentId, DeviceManagementInitiationInformation InitiationInformation);
        [method_name("InitiateSessionAsyncWithAlerts")] Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Provision.SessionResult>  InitiateSessionAsync(String EnrollmentId, DeviceManagementInitiationInformation InitiationInformation, [range(1, 16)]DeviceManagementAlertInformation[] Alerts);
    }

    [contract(Windows.Internal.Management.InternalContract, 1)]
    enum ConfigurationDataKind
    {
        Invalid,
        Binary,
        Boolean,
        Int32,
        Int64,
        String,
    };


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Management.Provision.IConfigurationData", 16d4cfc3-702b-47de-b8b5-7acc62806af0)]
    [threading(both)]
    runtimeclass ConfigurationData
    {
        ConfigurationData();
        Windows.Internal.Management.Provision.ConfigurationDataKind Kind{ get; };
        Boolean GetBoolean();
        Windows.Storage.Streams.IBuffer GetBinary();
        Int32 GetInt32();
        Int64 GetInt64();
        String GetString();
        void SetBoolean(Boolean value);
        void SetBinary(Windows.Storage.Streams.IBuffer value);
        void SetInt32(Int32 value);
        void SetInt64(Int64 value);
        void SetString(String value);
    }


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [interface_name("Windows.Internal.Management.Provision.IConfigurationResult", ca217300-815a-4297-b47a-9e8ef2f75f77)]
    runtimeclass ConfigurationResult
    {
        HRESULT ErrorCode{ get; };
    }


    [contract(Windows.Internal.Management.InternalContract, 1)]
    [interface_name("Windows.Internal.Management.Provision.IConfigurationSession", adf400b4-85a6-4d9b-8dba-f97bf3031ecb)]
    runtimeclass ConfigurationSession
    {
        String AccountId{ get; };
        Windows.System.User User{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Internal.Management.Provision.ConfigurationResult>  SetPolicyAsync(String area, String name, ConfigurationData value);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Management.InternalContract, 1)]
    [static_name("Windows.Internal.Management.Provision.IConfigurationSessionStatics", fd6b5b07-fe5e-4111-ad3c-100726287f6c)]
    [threading(both)]
    runtimeclass ConfigurationSessionManager
    {
        static Windows.Internal.Management.Provision.ConfigurationSession CreateSession(String accountId);
        static Windows.Internal.Management.Provision.ConfigurationSession CreateSessionForUser(Windows.System.User user, String accountId);
    }

}
