
















namespace Windows.Internal.Data.Activities
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ActivityQuerySortOrder
    {
        Descending,
        Ascending,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ActivityQueryAggregationType
    {
        None,
        First,
        Sum,
        Min,
        Max,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum AppIdKind
    {
        Unknown = -1,
        WindowsUniversalAumId,
        Win32AumId,
        ExePath,
        NonWindows,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ActivityApplicationInstallState
    {
        NotInstalled,
        Installing,
        Completed,
        Uninstall,
        Error,
        Unknown,
    };

    [flags]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ActivityActivationAttributes
    {
        None,
        Activatable,
        Installable,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum AppViewState
    {
        ViewUnknown,
        DisabledByPolicy,
        WaitingForDisableAutoActivitySignal,
        AutoActivityGenerationEnabled,
        AutoActivityGenerationDisabled,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ViewActiveActivityChangedReason
    {
        NewViewAssociated,
        ViewClosed,
        ActivityChangedForView,
        ViewNoLongerTracked,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ViewActiveActivityChangedFlag
    {
        None,
        SystemGeneratedActivityDisallowed,
        PreGeneratedNotForTimeline,
    };

    [flags]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum ActivityQueryStringMatchKind
    {
        None,
        Equal,
        NotEqual,
        Contains,
        Prefix,
        Suffix,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [constructor_name("Windows.Internal.Data.Activities.IGetCurrentActivityForViewOperationResultsFactory", f3e77e93-47d9-41aa-9f7f-a4f948e0f48e)]
    [interface_name("Windows.Internal.Data.Activities.IGetCurrentActivityForViewOperationResults", 570e20d1-ca8a-454c-92d3-3d2a5d160fcc)]
    [threading(both)]
    runtimeclass GetCurrentActivityForViewOperationResults
    {
        [method_name( "Create" )] GetCurrentActivityForViewOperationResults(UInt64 appViewId, Windows.Internal.ComposableShell.Tabs.ShellTabId shellTabId, AppViewState viewState, Windows.ApplicationModel.UserActivities.UserActivity activity);
        UInt64 get_ViewId();
        Windows.Internal.Data.Activities.AppViewState get_ViewState();
        Windows.ApplicationModel.UserActivities.UserActivity get_UserActivity();
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [uuid(a7c32752-555e-4542-a869-32a850bbe7de)]
    interface IViewActiveActivityManager
    {
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Data.Activities.ViewActiveActivityManager, Windows.Internal.Data.Activities.ViewActiveActivityChangedArgs>  ActivityDataUpdated;
        void TriggerNotification(UInt64 viewId, Windows.Internal.ComposableShell.Tabs.ShellTabId shellTabId, Windows.ApplicationModel.UserActivities.UserActivity activity, ViewActiveActivityChangedReason viewActiveActivityChangedReason, ViewActiveActivityChangedFlag viewActiveActivityChangedFlag);
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass ViewActiveActivityManager
        : [default]Windows.Internal.Data.Activities.IViewActiveActivityManager
    {
        ViewActiveActivityManager();
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Internal.Data.Activities.IViewActiveActivityChangedArgsFactory", edde4132-e0e3-4b52-a9dd-efb9181106b0)]
    [interface_name("Windows.Internal.Data.Activities.IViewActiveActivityChangedArgs", 3e11ff7b-939c-4437-8143-5830dd1436b0)]
    [threading(both)]
    runtimeclass ViewActiveActivityChangedArgs
    {
        [method_name( "Create" )] ViewActiveActivityChangedArgs(UInt64 appViewId, Windows.Internal.ComposableShell.Tabs.ShellTabId shellTabId, Windows.ApplicationModel.UserActivities.UserActivity activity, ViewActiveActivityChangedReason viewActiveActivityChangedReason, ViewActiveActivityChangedFlag viewActiveActivityChangedFlag);
        UInt64 get_ViewId();
        Windows.Internal.ComposableShell.Tabs.ShellTabId get_VirtualTabId();
        Windows.ApplicationModel.UserActivities.UserActivity get_UserActivity();
        Windows.Internal.Data.Activities.ViewActiveActivityChangedReason get_ViewActiveActivityChangedReason();
        Windows.Internal.Data.Activities.ViewActiveActivityChangedFlag get_ViewActiveActivityChangedFlag();
    }



    [uuid(cc499118-533c-5765-8feb-8c0fd2629402)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    interface ITaskDataCacheBroker
    {
        Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.GetCurrentActivityForViewOperationResults>  GetCurrentActivityForViewAsync(UInt64 viewId, Windows.Internal.ComposableShell.Tabs.ShellTabId shellTabId);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.Data.Activities.GetCurrentActivityForViewOperationResults> >  GetCurrentActivityForAllViewsAsync();
        Windows.Internal.Data.Activities.IViewActiveActivityManager GetViewActiveActivityManager();
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityQueryOptions", cc6c48c2-e5d8-4039-b3f1-58b910f2940f)]
    runtimeclass ActivityQueryOptions
    {
        ActivityQueryOptions();
        Windows.Foundation.DateTime StartTime{ get; };
        Windows.Foundation.DateTime StartTime{ set; };
        Windows.Foundation.DateTime EndTime{ get; };
        Windows.Foundation.DateTime EndTime{ set; };
        String DeviceId{ get; };
        String DeviceId{ set; };
        String SearchKeyword{ get; };
        String SearchKeyword{ set; };
        String GroupByProperty{ get; };
        String GroupByProperty{ set; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder GroupSortOrder{ get; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder GroupSortOrder{ set; };
        String SortByProperty{ get; };
        String SortByProperty{ set; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder SortOrder{ get; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder SortOrder{ set; };
        Boolean CollapseOnActivityId{ get; };
        Boolean CollapseOnActivityId{ set; };
        String ActivitySortByProperty{ get; };
        String ActivitySortByProperty{ set; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder ActivitySortOrder{ get; };
        Windows.Internal.Data.Activities.ActivityQuerySortOrder ActivitySortOrder{ set; };
        Windows.Internal.Data.Activities.ActivityQueryAggregationType ActivitySortAggregationType{ get; };
        Windows.Internal.Data.Activities.ActivityQueryAggregationType ActivitySortAggregationType{ set; };
        Boolean IncludeIndividualSetAnchorItems{ get; };
        Boolean IncludeIndividualSetAnchorItems{ set; };
        Boolean IncludeNullContentItems{ get; };
        Boolean IncludeNullContentItems{ set; };
        Windows.Foundation.Collections.IVector <Windows.Foundation.Collections.IKeyValuePair <Windows.Internal.Data.Activities.AppIdKind, String> >  FilterByAppIdList{ get; };
        Windows.Foundation.Collections.IVectorView <String>  AccountIdsToFilter{ get; };
        void SetAccountIdsToFilter(Windows.Foundation.Collections.IVectorView <String>  accountIds);
        Windows.Foundation.Collections.IVectorView <String>  AccountIdsToFilterOut{ get; };
        void SetAccountIdsToFilterOut(Windows.Foundation.Collections.IVectorView <String>  accountIds);
        String TownFilter{ get; };
        String TownFilter{ set; };
        String ContentUriFilter{ get; };
        String ContentUriFilter{ set; };
        Windows.Internal.Data.Activities.ActivityQueryStringMatchKind ContentUriFilterKind{ get; };
        Windows.Internal.Data.Activities.ActivityQueryStringMatchKind ContentUriFilterKind{ set; };
        Boolean QueryActivityScope{ get; };
        Boolean QueryActivityScope{ set; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityGroupCollection", 059d1a07-694f-6ce6-d484-59afd4fed51c)]
    runtimeclass ActivityGroupCollection
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.Data.Activities.ActivityGroup> >  GetActivityGroupsAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        Int64 ActivityGroupCount{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityCollection", 8bd02fde-28ad-4119-88de-886885bd40f7)]
    runtimeclass ActivityCollection
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.Data.Activities.ActivityHistoryItem> >  GetActivitiesAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.Data.Activities.ActivityItem> >  GetActivityItemsAsync(UInt32 startIndex, UInt32 maxNumberOfItems);
        Int64 ActivityCount{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityQueryManager", 714f0d85-0db4-47d3-b59c-47fffdb07c8d)]
    runtimeclass ActivityQueryManager
    {
        ActivityQueryManager();
        Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.ActivityGroupCollection>  QueryActivityGroupsAsync(ActivityQueryOptions options);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.ActivityCollection>  QueryActivitiesAsync(ActivityQueryOptions options);
        void LogActivityIndexerState();
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Data.Activities.ActivityQueryManager, Windows.Internal.Data.Activities.ActivityDataUpdatedEventArgs>  ActivityDataUpdated;
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [default_interface]
    [interface_name("Windows.Internal.Data.Activities.IActivityDataUpdatedEventArgs", 5e8dd60a-3a5a-3f57-03f5-ef186be8665b)]
    runtimeclass ActivityDataUpdatedEventArgs
    {
    }




    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityGroup", d82d3c6e-419b-498c-abcb-ea70a7d2c971)]
    runtimeclass ActivityGroup
    {
        Windows.Foundation.IPropertyValue GetGroupValue(String groupName);
        Windows.Internal.Data.Activities.ActivityCollection ActivityCollection{ get; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityHistoryItem", 564497b6-33f0-41f2-9ef3-946b14efcfd4)]
    runtimeclass ActivityHistoryItem
    {
        String AccountId{ get; };
        Guid ActivityId{ get; };
        String AppDisplayName{ get; };
        Windows.Internal.Data.Activities.AppIdKind AppIdKind{ get; };
        String AppImageUri{ get; };
        String AttributionName{ get; };
        UInt32 BackgroundColor{ get; };
        String ContentUri{ get; };
        String Description{ get; };
        String ActivityDisplayText{ get; };
        String SetId{ get; };
        String SetCategory{ get; };
        UInt64 ActiveDuration{ get; };
        String AppActivityId{ get; };
        String AppId{ get; };
        String DeviceAttribution{ get; };
        Guid ActivityHistoryId{ get; };
        Windows.Foundation.DateTime EndTime{ get; };
        Windows.Foundation.DateTime StartTime{ get; };
        UInt64 ActivityContentHash{ get; };
        String AdaptiveCardJson{ get; };
        Boolean HasAdaptiveContent{ get; };
        Boolean IsHistoryAttributedToSetAnchor{ get; };
        Boolean IsLocal{ get; };
        String Town{ get; };
        Windows.ApplicationModel.UserActivities.UserActivity UserActivity{ get; };
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.IActivityItem", 72e548a6-e28d-5e72-8ddd-bb31eaa404d2)]
    runtimeclass ActivityItem
    {
        String AccountId{ get; };
        Guid ActivityId{ get; };
        String ActivityDisplayText{ get; };
        String Description{ get; };
        UInt32 BackgroundColor{ get; };
        Boolean HasAdaptiveContent{ get; };
        UInt64 ActivityContentHash{ get; };
        String AdaptiveCardJson{ get; };
        String ContentUri{ get; };
        String AttributionName{ get; };
        String AppId{ get; };
        Windows.Internal.Data.Activities.AppIdKind AppIdKind{ get; };
        String AppActivityId{ get; };
        String AppDisplayName{ get; };
        String AppImageUri{ get; };
        Windows.Foundation.DateTime LastEngagementTime{ get; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityActivationState", 70bdda8c-9c02-44c0-8030-e5df510b7fc6)]
    runtimeclass ActivityActivationState
    {
        Guid ActivityId{ get; };
        String AccountId{ get; };
        Windows.Internal.Data.Activities.ActivityActivationAttributes ActivationAttributes{ get; };
        Windows.Internal.Data.Activities.ActivityApplicationInstallState TargetApplicationInstallState{ get; };
        Double TargetApplicationInstallProgress{ get; };
        event Windows.Foundation.EventHandler <Windows.Internal.Data.Activities.ActivityActivationState>  ActivityStateChanged;
        Windows.Foundation.IAsyncAction InstallTargetApplicationAsync();
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.IActivityLauncherOptions", 6d371173-1fbb-419f-a510-49b58af296a1)]
    [threading(both)]
    runtimeclass ActivityLauncherOptions
    {
        ActivityLauncherOptions();
        Windows.Internal.ComposableShell.Tabs.ShellTabGroupId TargetTabGroup{ get; };
        Windows.Internal.ComposableShell.Tabs.ShellTabGroupId TargetTabGroup{ set; };
        Windows.Internal.ComposableShell.Tabs.ShellTabId TabToReplace{ get; };
        Windows.Internal.ComposableShell.Tabs.ShellTabId TabToReplace{ set; };
        Windows.System.LauncherOptions LauncherOptions{ get; };
        Windows.System.LauncherOptions LauncherOptions{ set; };
        Boolean PreferNewWindow{ get; };
        Boolean PreferNewWindow{ set; };
        Windows.System.LauncherOptions GetAggregatedLauncherOptions();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [static_name("Windows.Internal.Data.Activities.IActivityLauncherStatics", 39db7352-8998-4afc-844b-abf7fc500c57)]
    [threading(both)]
    runtimeclass ActivityLauncher
    {
        [method_name("LaunchActivityAsync")] static Windows.Foundation.IAsyncOperation <Boolean>  LaunchActivityAsync(String accountId, Guid activityId);
        [method_name("LaunchActivityAsyncWithOptions")] static Windows.Foundation.IAsyncOperation <Boolean>  LaunchActivityAsync(String accountId, Guid activityId, ActivityLauncherOptions options);
        static Windows.Foundation.IAsyncOperation <Boolean>  LaunchUserActivityAsync(Windows.ApplicationModel.UserActivities.UserActivity activity, ActivityLauncherOptions options);
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.ActivityActivationState>  GetActivityActivationStateAsync(String accountId, Guid activityId);
        [method_name("GetActivityActivationStatesAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IMapView <Guid, Windows.Internal.Data.Activities.ActivityActivationState> >  GetActivityActivationStatesAsync(String accountId, Windows.Foundation.Collections.IVectorView <Guid>  activityIds);
        [method_name("GetActivityActivationStatesWithActivitiesAsync")] static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IMapView <Guid, Windows.Internal.Data.Activities.ActivityActivationState> >  GetActivityActivationStatesAsync(Windows.Foundation.Collections.IIterable <Windows.ApplicationModel.UserActivities.UserActivity>  activities);
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [uuid(1810e1e9-5cb7-4a5b-a17d-da79c37dec17)]
    interface IActivityIndexer
    {
        void Start();
        void Stop();
        void LogState();
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass ActivityIndexer
        : [default]Windows.Internal.Data.Activities.IActivityIndexer
    {
        ActivityIndexer();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IActivityApplicationLogoData", df8fe81b-2cee-4c99-b279-7916acebb2d2)]
    runtimeclass ActivityApplicationLogoData
    {
        Windows.Storage.Streams.IRandomAccessStream LogoStream{ get; };
        Windows.UI.Color BackgroundColor{ get; };
        Boolean Unplated{ get; };
        Boolean IncludesPlatePadding{ get; };
        Boolean IsDefaultAppLogo{ get; };
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Data.Activities.IActivityImageManagerStatics", 58ec0eef-4ff0-48a5-9bfc-435df052c258)]
    [threading(both)]
    runtimeclass ActivityImageManager
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.ActivityApplicationLogoData>  GetActivityApplicationLogoDataAsync(String applicationId, Windows.Foundation.Size imageSize, String accountId, Guid activityId);
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.ActivityApplicationLogoData>  GetActivityApplicationLogoDataFromAppIdsAsync(String applicationId, WindowsInternal.Shell.UnifiedTile.TileImageResourceOptions options, Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Internal.UserActivities.UserActivityAppId>  userActivityAppIds);
        static Windows.Foundation.IAsyncOperation <Windows.Storage.Streams.IRandomAccessStream>  GetActivityLocalBackgroundImageAsync(String contentUri, Windows.Foundation.Size imageSize);
        static String GetAppName(String applicationId);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [static_name("Windows.Internal.Data.Activities.IDefaultWebAccountStatusStatics", 1ae8a46c-6409-4b84-bb8f-d745e96de4db)]
    [threading(both)]
    runtimeclass DefaultWebAccountStatus
    {
        static Boolean IsDefaultWebAccountAttached{ get; };
        static Boolean IsDefaultWebAccountAttached{ set; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [static_name("Windows.Internal.Data.Activities.IActivityPrivacyManagerStatics", 2bdddb44-f058-42cc-b10c-a82814167001)]
    [threading(both)]
    runtimeclass ActivityPrivacyManager
    {
        static Boolean ActivityHistoryCloudSyncAllowedByUser{ get; };
        static Boolean ActivityHistoryCloudSyncAllowedByUser{ set; };
        static Boolean ActivityHistoryCloudSyncAllowedByPolicy{ get; };
        static Boolean ActivityHistoryCollectionAllowedByUser{ get; };
        static Boolean ActivityHistoryCollectionAllowedByUser{ set; };
        static Boolean ActivityHistoryCollectionAllowedByPolicy{ get; };
        static Boolean IsEnterpriseSKU{ get; };
        static Windows.Foundation.IAsyncOperation <Windows.Security.Credentials.WebAccount>  GetDefaultWebAccountAsync();
        static Windows.Foundation.IAsyncOperation <Boolean>  ClearActivityHistoryAsync(Windows.Security.Credentials.IWebAccount account);
        static Windows.Foundation.IAsyncOperation <Boolean>  ClearActivityHistoriesForTimeRangeAsync(Windows.Foundation.Collections.IVectorView <String>  accountIds, Windows.Foundation.DateTime startTime, Windows.Foundation.DateTime endTime);
        static Windows.Foundation.IAsyncOperation <Boolean>  DeleteActivityAsync(String accountId, Guid activityId, String appActivityId);
        static Windows.Foundation.IAsyncAction SetWebAccountFilterAsync(Windows.Security.Credentials.IWebAccount account, Boolean filterVal);
        static Boolean IsWebAccountFilteredOut(Windows.Security.Credentials.IWebAccount account);
        static Windows.Foundation.Collections.IVectorView <String>  GetFilteredWebAccounts();
        static Boolean LocationHistoryCloudSyncAllowedByUser{ get; };
        static Boolean LocationHistoryCloudSyncAllowedByUser{ set; };
        static Boolean LocationHistoryCloudSyncAllowedByPolicy{ get; };
        static Windows.Foundation.IAsyncOperation <Boolean>  ClearLocationHistoryAsync();
        static Boolean LocationHistoryOnTimelineEnabled{ get; };
        static Boolean LocationHistoryOnTimelineEnabled{ set; };
        static Boolean ActivitySuggestionsEnabled{ set; };
        static Boolean ActivitySuggestionsEnabled{ get; };
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass TaskFlowDataEngineBroker
        : [default]Windows.Internal.Data.Activities.ITaskDataCacheBroker
    {
        TaskFlowDataEngineBroker();
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [uuid(1a212157-be49-4892-afc4-1a168e546329)]
    interface ISetActivityMonitor
    {
        void SessionCreatedForSet(String setId, Windows.ApplicationModel.UserActivities.UserActivity userActivity);
        void SessionCreatedForSetWithWindowId(String setId, Windows.Internal.ApplicationModel.WindowManagement.WindowId windowId, Windows.ApplicationModel.UserActivities.UserActivity userActivity);
        void SessionDisposedForSet(String setId);
    };



    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Data.Activities.IUserActivitySessionSnapshotStatics", ab5a477a-4926-5583-a329-3dff3b5af0da)]
    [interface_name("Windows.Internal.Data.Activities.IUserActivitySessionSnapshot", a6686bb4-22c7-5c02-b806-c88fe20a2887)]
    [threading(both)]
    runtimeclass UserActivitySessionSnapshot
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Data.Activities.UserActivitySessionSnapshot>  GetActivitySessionSnapshotForCurrentUserAsync();
        Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.UserActivities.UserActivity>  RunningActivities{ get; };
        Windows.Foundation.TimeSpan SessionLength{ get; };
        String LocalDeviceId{ get; };
    }

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum SuggestionReason
    {
        None,
        MostUsed,
        TimeOfDay,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [flags]
    enum SuggestionType
    {
        None,
        Invalid,
        Activity,
        Application = 4,
        Web = 8,
        File = 16,
    };

    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    enum SuggestionMediaType
    {
        Documents,
        Photos,
        Music,
        Videos,
    };


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [uuid(da6516b3-6103-5036-adb5-7ebe6b0bdf96)]
    interface ISuggestion
    {
        Windows.Internal.Data.Activities.SuggestionReason Reason{ get; };
        Windows.Internal.Data.Activities.SuggestionType Type{ get; };
        Windows.Foundation.IAsyncAction LaunchAsync();
        Windows.Foundation.IAsyncAction DismissAsync();
    };


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.IActivitySuggestion", 840f5cd1-6246-564c-92f4-10c9549db436)]
    runtimeclass ActivitySuggestion
        : Windows.Internal.Data.Activities.ISuggestion
    {
        Windows.Internal.Data.Activities.ActivityHistoryItem ActivityHistoryItem{ get; };
        Windows.Internal.Data.Activities.ActivityItem ActivityItem{ get; };
        Windows.ApplicationModel.UserActivities.UserActivity UserActivity{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IApplicationSuggestion", 07a6fe63-0b98-5735-b99c-dd617da7f1ce)]
    runtimeclass ApplicationSuggestion
        : Windows.Internal.Data.Activities.ISuggestion
    {
        WindowsInternal.Shell.UnifiedTile.IUnifiedTileIdentifier ApplicationIdentifier{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [interface_name("Windows.Internal.Data.Activities.IFileSuggestion", 20bb1e0a-85b9-5c5e-994c-8da728d1fdfe)]
    runtimeclass FileSuggestion
        : Windows.Internal.Data.Activities.ISuggestion
    {
        String Uri{ get; };
        Windows.Internal.Data.Activities.SuggestionMediaType MediaType{ get; };
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.IWebSuggestion", 79192a14-5538-5e2e-8cda-ff02379d97a3)]
    runtimeclass WebSuggestion
        : Windows.Internal.Data.Activities.ISuggestion
    {
        String FavIconUrl{ get; };
        String Title{ get; };
        String Url{ get; };
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.ISuggestionFilter", 036c17fb-6962-51a6-8523-26a9c79e76e0)]
    [threading(both)]
    runtimeclass SuggestionFilter
    {
        SuggestionFilter();
        Windows.Internal.Data.Activities.SuggestionType AllowedTypes{ get; };
        Windows.Internal.Data.Activities.SuggestionType AllowedTypes{ set; };
        Windows.Foundation.Collections.IIterable <WindowsInternal.Shell.UnifiedTile.IUnifiedTileIdentifier>  AllowedApplications{ get; };
        Windows.Foundation.Collections.IIterable <WindowsInternal.Shell.UnifiedTile.IUnifiedTileIdentifier>  AllowedApplications{ set; };
        Windows.Foundation.Collections.IIterable <Windows.Internal.Data.Activities.SuggestionMediaType>  AllowedMediaTypes{ get; };
        Windows.Foundation.Collections.IIterable <Windows.Internal.Data.Activities.SuggestionMediaType>  AllowedMediaTypes{ set; };
        Windows.Foundation.Collections.IIterable <String>  AllowedSubdomains{ get; };
        Windows.Foundation.Collections.IIterable <String>  AllowedSubdomains{ set; };
        Windows.Foundation.Collections.IIterable <String>  DisallowedActivities{ get; };
        Windows.Foundation.Collections.IIterable <String>  DisallowedActivities{ set; };
    }


    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Data.Activities.ISuggestionOptions", 1871044c-b88d-566f-9faf-1e47258ea214)]
    [threading(both)]
    runtimeclass SuggestionOptions
    {
        SuggestionOptions();
        Boolean AllowServiceForSuggestionLogic{ get; };
        Boolean AllowServiceForSuggestionLogic{ set; };
        UInt32 MaxSuggestions{ get; };
        UInt32 MaxSuggestions{ set; };
        String SearchKeywords{ get; };
        String SearchKeywords{ set; };
        Windows.Foundation.TimeSpan SessionLength{ get; };
        Windows.Foundation.TimeSpan SessionLength{ set; };
        Windows.Foundation.Collections.IIterable <Guid>  RelatedActivities{ get; };
        Windows.Foundation.Collections.IIterable <Guid>  RelatedActivities{ set; };
        Windows.Internal.Data.Activities.SuggestionFilter Filter{ get; };
        Windows.Internal.Data.Activities.SuggestionFilter Filter{ set; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Data.Activities.InternalContract, 1)]
    [constructor_name("Windows.Internal.Data.Activities.ISuggestionManagerFactory", 844be70e-ea8a-5bbd-ba27-7c1a1b69f610)]
    [interface_name("Windows.Internal.Data.Activities.ISuggestionManager", 93b2b8cb-ab1f-56cd-8b36-447b41084d44)]
    [threading(both)]
    runtimeclass SuggestionManager
    {
        [method_name( "CreateInstance" )] SuggestionManager(Guid clientId);
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Internal.Data.Activities.ISuggestion> >  GetSuggestionsAsync(SuggestionOptions suggestionOptions);
    }

}
