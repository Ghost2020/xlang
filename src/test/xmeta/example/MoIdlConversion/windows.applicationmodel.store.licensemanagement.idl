







namespace Windows.ApplicationModel.Store.LicenseManagement
{
    [contract(Windows.Foundation.UniversalApiContract, 4)]
    enum LicenseRefreshOption
    {
        RunningLicenses,
        AllLicenses,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [interface_name("Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionInfo", 3ccbb08f-db31-48d5-8384-fa17c81474e2)]
    runtimeclass LicenseSatisfactionInfo
    {
        Boolean SatisfiedByDevice{ get; };
        Boolean SatisfiedByOpenLicense{ get; };
        Boolean SatisfiedByTrial{ get; };
        Boolean SatisfiedByPass{ get; };
        Boolean SatisfiedByInstallMedia{ get; };
        Boolean SatisfiedBySignedInUser{ get; };
        Boolean IsSatisfied{ get; };
    }



    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Store.LicenseManagement.ILicenseSatisfactionResult", 3c674f73-3c87-4ee1-8201-f428359bd3af)]
    runtimeclass LicenseSatisfactionResult
    {
        Windows.Foundation.Collections.IMapView <String, Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionInfo>  LicenseSatisfactionInfos{ get; };
        HRESULT ExtendedError{ get; };
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 3)]
    [static_name("Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics", b5ac3ae0-da47-4f20-9a23-09182c9476ff)]
    [threading(both)]
    runtimeclass LicenseManager
    {

        [contract(Windows.Foundation.UniversalApiContract, 4)]
        [static_name("Windows.ApplicationModel.Store.LicenseManagement.ILicenseManagerStatics2", ab2ec47b-1f79-4480-b87e-2c499e601ba3)]
        {
            static Windows.Foundation.IAsyncAction RefreshLicensesAsync(LicenseRefreshOption refreshOption);
        }
        static Windows.Foundation.IAsyncAction AddLicenseAsync(Windows.Storage.Streams.IBuffer license);
        static Windows.Foundation.IAsyncOperation <Windows.ApplicationModel.Store.LicenseManagement.LicenseSatisfactionResult>  GetSatisfactionInfosAsync(Windows.Foundation.Collections.IIterable <String>  contentIds, Windows.Foundation.Collections.IIterable <String>  keyIds);
    }

}
