





namespace Windows.System.Internal.XboxLive.Auth
{
    [contractversion(1)]
    [internal]
    apicontract AuthContract{};

    [contract(Windows.System.Internal.XboxLive.Auth.AuthContract, 1)]
    enum AuthTokenStatus
    {
        Unknown = -1,
        Success,
        OfflineSuccess,
        NoAccountSet,
        LoadMsaAccountFailed,
        XboxVeto,
        MsaInterrupt,
        OfflineNoConsent,
        ViewNotSet,
    };

    [contract(Windows.System.Internal.XboxLive.Auth.AuthContract, 1)]
    enum GetTokenFlags
    {
        None,
        ForceRefresh,
        AllUsers,
    };



    [contract(Windows.System.Internal.XboxLive.Auth.AuthContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.System.Internal.XboxLive.Auth.IXboxLiveAuthTokenResult", b674f22e-15ff-4733-9f5b-4e9e174ec854)]
    runtimeclass XboxLiveAuthTokenResult
    {
        Windows.System.Internal.XboxLive.Auth.AuthTokenStatus Status{ get; };
        HRESULT ErrorCode{ get; };
        String Token{ get; };
        String Signature{ get; };
        String Sandbox{ get; };
        String Environment{ get; };
        String MsaAccountId{ get; };
        String Xuid{ get; };
        String Gamertag{ get; };
        String AgeGroup{ get; };
        String Privileges{ get; };
        String MsaTarget{ get; };
        String MsaPolicy{ get; };
        String MsaAppId{ get; };
        String Redirect{ get; };
        String Message{ get; };
        String HelpId{ get; };
        String EnforcementBans{ get; };
        String Restrictions{ get; };
        String TitleRestrictions{ get; };
    }

    [marshaling_behavior(agile)]
    [contract(Windows.System.Internal.XboxLive.Auth.AuthContract, 1)]
    [interface_name("Windows.System.Internal.XboxLive.Auth.IAuthManager", 67ef8718-8ca5-4655-8951-ab60b03e5aad)]
    [threading(both)]
    runtimeclass AuthManager
    {
        AuthManager();
        void ClearVetoCache();
        void ClearThrottlingState();
        Windows.System.Internal.XboxLive.Auth.XboxLiveAuthTokenResult GetTokenAndSignatureWithTokenResult(UInt64 userContextToken, String accountId, String appId, String target, String policy, String httpMethod, String url, String requestHeaders, UInt8[] requestBody, GetTokenFlags flags);
        Windows.System.Internal.XboxLive.Auth.XboxLiveAuthTokenResult GetAccessTokenAndPKSignatureByXuid(String xuid, String titleId, String httpMethod, String url, String headers, UInt8[] requestBody);
        void RefreshXblAccess();
        void SetAppViewInitialized(UInt64 userContextToken, String appId, String msaAccountId);
        void InvalidateToken(String token);
    }

}
