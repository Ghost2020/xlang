









namespace Windows.Devices.Gpio
{
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum GpioSharingMode
    {
        Exclusive,
        SharedReadOnly,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum GpioOpenStatus
    {
        PinOpened,
        PinUnavailable,
        SharingViolation,
        MuxingConflict,
        UnknownError,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum GpioPinDriveMode
    {
        Input,
        Output,
        InputPullUp,
        InputPullDown,
        OutputOpenDrain,
        OutputOpenDrainPullUp,
        OutputOpenSource,
        OutputOpenSourcePullDown,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum GpioPinValue
    {
        Low,
        High,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    enum GpioPinEdge
    {
        FallingEdge,
        RisingEdge,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 3)]
    enum GpioChangePolarity
    {
        Falling,
        Rising,
        Both,
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 3)]
    struct GpioChangeRecord
    {
        Windows.Foundation.TimeSpan RelativeTime;
        GpioPinEdge Edge;
    };

    [contract(Windows.Devices.DevicesLowLevelContract, 3)]
    struct GpioChangeCount
    {
        UInt64 Count;
        Windows.Foundation.TimeSpan RelativeTime;
    };


    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Devices.Gpio.IGpioPinValueChangedEventArgs", 3137aae1-703d-4059-bd24-b5b25dffb84e)]
    runtimeclass GpioPinValueChangedEventArgs
    {
        Windows.Devices.Gpio.GpioPinEdge Edge{ get; };
    }


    [dualapipartition(0xa000000)]
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Devices.Gpio.IGpioPin", 11d9b087-afae-4790-9ee9-e0eac942d201)]
    runtimeclass GpioPin
        : Windows.Foundation.IClosable
    {
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Gpio.GpioPin, Windows.Devices.Gpio.GpioPinValueChangedEventArgs>  ValueChanged;
        Windows.Foundation.TimeSpan DebounceTimeout{ get; };
        Windows.Foundation.TimeSpan DebounceTimeout{ set; };
        Int32 PinNumber{ get; };
        Windows.Devices.Gpio.GpioSharingMode SharingMode{ get; };
        Boolean IsDriveModeSupported(GpioPinDriveMode driveMode);
        Windows.Devices.Gpio.GpioPinDriveMode GetDriveMode();
        void SetDriveMode(GpioPinDriveMode value);
        void Write(GpioPinValue value);
        Windows.Devices.Gpio.GpioPinValue Read();
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 1)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Devices.Gpio.IGpioControllerStatics", 2ed6f42e-7af7-4116-9533-c43d99a1fb64)]
    [interface_name("Windows.Devices.Gpio.IGpioController", 284012e3-7461-469c-a8bc-61d69d08a53c)]
    runtimeclass GpioController
    {

        [contract(Windows.Devices.DevicesLowLevelContract, 2)]
        [static_name("Windows.Devices.Gpio.IGpioControllerStatics2", 912b7d20-6ca4-4106-a373-fffd346b0e5b)]
        {
            static Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.Devices.Gpio.GpioController> >  GetControllersAsync(Windows.Devices.Gpio.Provider.IGpioProvider provider);
            static Windows.Foundation.IAsyncOperation <Windows.Devices.Gpio.GpioController>  GetDefaultAsync();
        }
        static Windows.Devices.Gpio.GpioController GetDefault();
        Int32 PinCount{ get; };
        [method_name("OpenPin")] Windows.Devices.Gpio.GpioPin OpenPin(Int32 pinNumber);
        [method_name("OpenPinWithSharingMode")] Windows.Devices.Gpio.GpioPin OpenPin(Int32 pinNumber, GpioSharingMode sharingMode);
        [return_name("succeeded")] Boolean TryOpenPin(Int32 pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus openStatus);
    }




    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 3)]
    [dualapipartition(0xa000003)]
    [constructor_name("Windows.Devices.Gpio.IGpioChangeReaderFactory", a9598ef3-390e-441a-9d1c-e8de0b2df0df)]
    [interface_name("Windows.Devices.Gpio.IGpioChangeReader", 0abc885f-e031-48e8-8590-70de78363c6d)]
    runtimeclass GpioChangeReader
        : Windows.Foundation.IClosable
    {
        [method_name( "Create" )] GpioChangeReader(GpioPin pin);
        [method_name( "CreateWithCapacity" )] GpioChangeReader(GpioPin pin, Int32 minCapacity);
        Int32 Capacity{ get; };
        Int32 Length{ get; };
        Boolean IsEmpty{ get; };
        Boolean IsOverflowed{ get; };
        Windows.Devices.Gpio.GpioChangePolarity Polarity{ set; };
        Windows.Devices.Gpio.GpioChangePolarity Polarity{ get; };
        Boolean IsStarted{ get; };
        void Start();
        void Stop();
        void Clear();
        Windows.Devices.Gpio.GpioChangeRecord GetNextItem();
        Windows.Devices.Gpio.GpioChangeRecord PeekNextItem();
        Windows.Foundation.Collections.IVector <Windows.Devices.Gpio.GpioChangeRecord>  GetAllItems();
        Windows.Foundation.IAsyncAction WaitForItemsAsync(Int32 count);
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Devices.DevicesLowLevelContract, 3)]
    [dualapipartition(0xa000003)]
    [constructor_name("Windows.Devices.Gpio.IGpioChangeCounterFactory", 147d94b6-0a9e-410c-b4fa-f89f4052084d)]
    [interface_name("Windows.Devices.Gpio.IGpioChangeCounter", cb5ec0de-6801-43ff-803d-4576628a8b26)]
    runtimeclass GpioChangeCounter
        : Windows.Foundation.IClosable
    {
        [method_name( "Create" )] GpioChangeCounter(GpioPin pin);
        Windows.Devices.Gpio.GpioChangePolarity Polarity{ set; };
        Windows.Devices.Gpio.GpioChangePolarity Polarity{ get; };
        Boolean IsStarted{ get; };
        void Start();
        void Stop();
        Windows.Devices.Gpio.GpioChangeCount Read();
        Windows.Devices.Gpio.GpioChangeCount Reset();
    }

}
