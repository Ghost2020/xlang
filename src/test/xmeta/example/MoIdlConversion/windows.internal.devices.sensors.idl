








namespace Windows.Internal.Devices.Sensors
{
    [contractversion(1)]
    [internal]
    apicontract ApiContract{};


    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [static_name("Windows.Internal.Devices.Sensors.IHingeAngleSensorStatics", 34ab82ff-acbd-4224-acda-6836e08a73f2)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingeAngleSensor", 3156be36-ec12-4513-886d-369e23282ec6)]
    [threading(both)]
    runtimeclass HingeAngleSensor
    {
        static String GetDeviceSelector();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingeAngleSensor>  GetDefaultAsync();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingeAngleSensor>  GetRelatedToAdjacentPanelsAsync(String firstPanelId, String secondPanelId);
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingeAngleSensor>  FromIdAsync(String deviceId);
        Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingeAngleReading>  GetCurrentReadingAsync();
        String DeviceId{ get; };
        Single MinReportThresholdInDegrees{ get; };
        Single ReportThresholdInDegrees{ get; };
        Single ReportThresholdInDegrees{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.HingeAngleSensor, Windows.Internal.Devices.Sensors.HingeAngleSensorReadingChangedEventArgs>  ReadingChanged;
    }


    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [dualapipartition(0xa000004)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingeAngleReading", 34a0b657-8519-4464-8731-f9f0446ec58e)]
    runtimeclass HingeAngleReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Single AngleInDegrees{ get; };
        Windows.Foundation.Collections.IMapView <String, Object>  Properties{ get; };
    }

    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingeAngleSensorReadingChangedEventArgs", 89aa7fc2-9285-4856-af4a-e6d7b73b381e)]
    runtimeclass HingeAngleSensorReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.HingeAngleReading Reading{ get; };
    }




    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [static_name("Windows.Internal.Devices.Sensors.IHingedDualPanelDeviceStatics", e4f62058-782d-482a-b95e-76677aaedfc0)]
    [threading(both)]
    runtimeclass HingedDualPanelDevice
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingeAngleSensor>  GetDefaultHingeAngleSensorAsync();
    }


    [dualapipartition(0xa000002)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Devices.Sensors.ISensorReserved_AlphaStatics", e0584bb4-a319-4373-a0a0-3e77f9a3727a)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_Alpha", 43ad8b1a-e4c6-45dc-a413-8926e0228120)]
    [threading(both)]
    runtimeclass SensorReserved_Alpha
    {
        static Windows.Internal.Devices.Sensors.SensorReserved_Alpha GetDefault();
        static String GetDeviceSelector();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.SensorReserved_Alpha>  FromIdAsync(String deviceId);
        Single GetCurrentReading();
        UInt32 MinimumReportInterval{ get; };
        UInt32 ReportInterval{ set; };
        UInt32 ReportInterval{ get; };
        String DeviceId{ get; };
        Single NotificationSensitivity{ get; };
        Single NotificationSensitivity{ set; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.SensorReserved_Alpha, Windows.Internal.Devices.Sensors.SensorReserved_AlphaChangeReadingChangedEventArgs>  ReadingChanged;
    }


    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [dualapipartition(0xa000002)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_AlphaChangeReadingChangedEventArgs", 9829d7e4-277f-4aba-acaa-8a4b3fd3d148)]
    runtimeclass SensorReserved_AlphaChangeReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.SensorReserved_AlphaChangeReading Reading{ get; };
    }



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000002)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_AlphaChangeReading", 476f11da-60d6-4c5b-8df7-7450a5c37a79)]
    runtimeclass SensorReserved_AlphaChangeReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Single SensorReserved_Alpha{ get; };
    }

    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    enum HingedDualPanelDevicePosture
    {
        Closed = 1,
        Peek,
        Read,
        Palette,
        Flat,
        Tent,
        Brochure,
        Ramp,
        Flip,
    };


    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [dualapipartition(0xa000004)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Internal.Devices.Sensors.IHingedDualPanelDevicePostureSensorStatics", 53b423b8-7a5c-407c-828e-f650743754d5)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingedDualPanelDevicePostureSensor", 08b2ada7-ac3e-40de-a74b-fe7f2460cd03)]
    [threading(both)]
    runtimeclass HingedDualPanelDevicePostureSensor
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureSensor>  FromIdAsync(String deviceId);
        static String GetDeviceSelector();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureSensor>  GetDefaultAsync();
        Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureChangeReading>  GetCurrentReadingAsync();
        String DeviceId{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureSensor, Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureChangeReadingChangedEventArgs>  PostureChanged;
    }


    [dualapipartition(0xa000004)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingedDualPanelDevicePostureChangeReading", 491e2959-7a2a-4ff5-809f-4a4db0173d55)]
    runtimeclass HingedDualPanelDevicePostureChangeReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Windows.Internal.Devices.Sensors.HingedDualPanelDevicePosture Posture{ get; };
        Windows.Devices.Sensors.SimpleOrientation OrientationLeft{ get; };
        Windows.Devices.Sensors.SimpleOrientation OrientationRight{ get; };
    }

    [dualapipartition(0xa000004)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Devices.Sensors.IHingedDualPanelDevicePostureChangeReadingChangedEventArgs", 9585b912-c008-409f-a0dd-920ab9e7ab1a)]
    runtimeclass HingedDualPanelDevicePostureChangeReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.HingedDualPanelDevicePostureChangeReading Reading{ get; };
    }




    [dualapipartition(0xa000002)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [static_name("Windows.Internal.Devices.Sensors.ISensorReserved_DeviceContextStatics", 90baafe0-55b3-470f-848d-75d4d8612b1b)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_DeviceContext", 186ce2ac-63b0-40c5-93c8-e6c8c2593a91)]
    [threading(both)]
    runtimeclass SensorReserved_DeviceContext
    {
        static Windows.Internal.Devices.Sensors.SensorReserved_DeviceContext GetDefault(Guid SensorReserved_DeviceContextSet);
        Guid GetCurrentReading();
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.SensorReserved_DeviceContext, Windows.Internal.Devices.Sensors.SensorReserved_DeviceContextChangeReadingChangedEventArgs>  ReadingChanged;
        String DeviceId{ get; };
    }


    [dualapipartition(0xa000002)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_DeviceContextChangeReadingChangedEventArgs", 1db1547a-5ee4-4e4d-84b8-2e6e7256f376)]
    runtimeclass SensorReserved_DeviceContextChangeReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.SensorReserved_DeviceContextChangeReading Reading{ get; };
    }



    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [dualapipartition(0xa000002)]
    [interface_name("Windows.Internal.Devices.Sensors.ISensorReserved_DeviceContextChangeReading", 7c52c331-b15a-4ff9-9686-1aacefa104c6)]
    runtimeclass SensorReserved_DeviceContextChangeReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Guid Reading{ get; };
    }

    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    enum GestureState
    {
        NotDetected,
        Detected,
    };


    [dualapipartition(0xa000004)]
    [marshaling_behavior(agile)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [static_name("Windows.Internal.Devices.Sensors.IFlipSensorStatics", 935e473d-6926-4331-8f66-df550db5f161)]
    [interface_name("Windows.Internal.Devices.Sensors.IFlipSensor", bb373eda-d150-42de-90a1-111b89003a75)]
    [threading(both)]
    runtimeclass FlipSensor
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.FlipSensor>  GetDefaultAsync();
        static String GetDeviceSelector();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.FlipSensor>  FromIdAsync(String deviceId);
        String DeviceId{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.FlipSensor, Windows.Internal.Devices.Sensors.FlipSensorReadingChangedEventArgs>  ReadingChanged;
    }


    [dualapipartition(0xa000004)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Devices.Sensors.IFlipSensorReadingChangedEventArgs", 0a2219a8-b7d4-4493-b3d3-d272ae4874d6)]
    runtimeclass FlipSensorReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.FlipSensorReading Reading{ get; };
    }



    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [interface_name("Windows.Internal.Devices.Sensors.IFlipSensorReading", 9d83804b-efad-4dc1-942f-6a963659b223)]
    runtimeclass FlipSensorReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Windows.Internal.Devices.Sensors.GestureState GestureState{ get; };
    }

    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    enum FoldType
    {
        NoFoldDetected,
        Closing,
        Opening,
    };


    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [static_name("Windows.Internal.Devices.Sensors.IFoldSensorStatics", 81693005-d366-4d78-8d53-69b0b2009846)]
    [interface_name("Windows.Internal.Devices.Sensors.IFoldSensor", 6c42e042-c32e-402a-80f1-649727a5479d)]
    [threading(both)]
    runtimeclass FoldSensor
    {
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.FoldSensor>  GetDefaultAsync();
        static String GetDeviceSelector();
        static Windows.Foundation.IAsyncOperation <Windows.Internal.Devices.Sensors.FoldSensor>  FromIdAsync(String deviceId);
        String DeviceId{ get; };
        event Windows.Foundation.TypedEventHandler <Windows.Internal.Devices.Sensors.FoldSensor, Windows.Internal.Devices.Sensors.FoldSensorReadingChangedEventArgs>  ReadingChanged;
    }


    [dualapipartition(0xa000004)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.Internal.Devices.Sensors.IFoldSensorReadingChangedEventArgs", 6d9dcd2e-1015-43ea-8627-4153e94d2c6f)]
    runtimeclass FoldSensorReadingChangedEventArgs
    {
        Windows.Internal.Devices.Sensors.FoldSensorReading Reading{ get; };
    }



    [marshaling_behavior(agile)]
    [dualapipartition(0xa000004)]
    [contract(Windows.Internal.Devices.Sensors.ApiContract, 1)]
    [interface_name("Windows.Internal.Devices.Sensors.IFoldSensorReading", 413cec72-961e-4b3d-a8c0-6d78bd6362c6)]
    runtimeclass FoldSensorReading
    {
        Windows.Foundation.DateTime Timestamp{ get; };
        Windows.Internal.Devices.Sensors.GestureState GestureState{ get; };
        Windows.Foundation.Collections.IVectorView <String>  ContributingPanel{ get; };
        Single InitialAngle{ get; };
        Single FinalAngle{ get; };
        Windows.Internal.Devices.Sensors.FoldType FoldType{ get; };
    }

}
