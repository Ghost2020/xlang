








namespace Windows.ApplicationModel.Internal.DataTransfer
{
    [contractversion(1)]
    [internal]
    apicontract InternalContract{};

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardHistoryItemSource
    {
        Local,
        Cloud,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardHistoryItemInternal", 7f6e73ad-94e2-56e5-bbf7-622906be8c69)]
    runtimeclass ClipboardHistoryItemInternal
    {
        Guid Id{ get; };
        Guid Id{ set; };
        Windows.Foundation.DateTime Timestamp{ get; };
        Windows.Foundation.DateTime Timestamp{ set; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemSource Source{ get; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemSource Source{ set; };
        Windows.ApplicationModel.DataTransfer.DataPackage DataPackage{ get; };
        Windows.ApplicationModel.DataTransfer.DataPackage DataPackage{ set; };
        String CompareKey{ get; };
        String CompareKey{ set; };
        UInt64 MemorySizeInBytes{ get; };
        UInt64 MemorySizeInBytes{ set; };
        UInt64 DiskSizeInBytes{ get; };
        UInt64 DiskSizeInBytes{ set; };
        Boolean IsPinned{ get; };
        Boolean IsPinned{ set; };
        Boolean IsPinUnpinStatusChanging{ get; };
        Boolean IsPinUnpinStatusChanging{ set; };
        Boolean IsPublishedToCloud{ get; };
        Boolean CanPublishToCloud{ get; };
        Boolean IsDataEdpProtected{ get; };
        Windows.Foundation.DateTime LastPublishTimestamp{ get; };
        Windows.Foundation.DateTime LastSuccessfulPublishTimestamp{ get; };
        String CloudItemId{ get; };
        String CloudItemId{ set; };
        void SetLastPublishResult(ClipboardItemSaveResult value, Windows.Foundation.DateTime dateTime, String cloudItemId);
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardItemSaveResult LastPublishResult{ get; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardItemSaveResult PublishCheckResult{ get; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardItemSaveResult PublishCheckResult{ set; };
    }

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardDataType
    {
        History,
        Cloud,
        Both,
    };

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardPasteOption
    {
        Default,
        PlainText,
    };

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardResultInfo
    {
        Success,
        AccessDenied,
        Failed,
    };


    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IGetClipboardHistoryItemsResult", 7d95cb84-b4c6-56b0-a8d1-9ab475dbb065)]
    runtimeclass GetClipboardHistoryItemsResult
    {
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardResultInfo Info{ get; };
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal> >  Operation{ get; };
    }


    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardHistoryServer", 8a3763be-7c15-5714-bb46-7d9f766b15a1)]
    [threading(both)]
    runtimeclass ClipboardHistoryServer
    {
        ClipboardHistoryServer();
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal> >  GetClipboardHistoryItemsAsync();
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal AddHistoryItem(Windows.ApplicationModel.DataTransfer.DataPackageView item, Boolean isCurrentClipboard, Guid clipboardItemId, String cloudItemId);
        Windows.Foundation.IAsyncAction SelectHistoryItemAsync(Guid itemId, ClipboardPasteOption pasteOption);
        Windows.Foundation.IAsyncAction DeleteHistoryItemAsync(Guid itemId, Boolean clearClipboardIfNeeded, Boolean clearCloudIfNeeded);
        Windows.Foundation.IAsyncAction PinHistoryItemAsync(Guid itemId);
        Windows.Foundation.IAsyncAction UnpinHistoryItemAsync(Guid itemId);
        Windows.Foundation.IAsyncAction UploadHistoryItemAsync(Guid itemId);
        UInt32 GetHistoryItemCount(Boolean includePinned);
        Windows.Foundation.IAsyncAction ClearClipboardHistoryAsync(ClipboardDataType dataType, Boolean includePinned);
        void NotifyCloudClipboardChanged();
        Windows.ApplicationModel.Internal.DataTransfer.GetClipboardHistoryItemsResult GetClipboardHistoryItemsResultAsync();
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardResultInfo SelectHistoryItemResult(Guid itemId);
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardResultInfo ClearClipboardHistoryResult(ClipboardDataType dataType, Boolean includePinned);
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardResultInfo ClearClipboardHistoryForUser(UInt64 userContextToken, ClipboardDataType dataType, Boolean includePinned);
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardResultInfo DeleteHistoryItemResult(Guid itemId, Boolean clearClipboardIfNeeded, Boolean clearCloudIfNeeded);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardHistoryBuffer", e448ef3c-bf2b-5b74-828a-eea6c2407313)]
    runtimeclass ClipboardHistoryBuffer
    {
        Windows.Foundation.IAsyncOperation <Windows.Foundation.Collections.IVectorView <Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal> >  GetClipboardHistoryItemsAsync();
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal AddHistoryItem(Windows.ApplicationModel.DataTransfer.DataPackageView item, Boolean isCurrentClipboard, Guid clipboardItemId, String cloudItemId);
        void SelectHistoryItem(Guid itemId);
        Windows.Foundation.IAsyncAction SelectHistoryItemAsync(Guid itemId, ClipboardPasteOption pasteOption);
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardHistoryItemInternal DeleteHistoryItem(Guid itemId, Boolean clearClipboardIfNeeded);
        Windows.Foundation.IAsyncAction PinHistoryItemAsync(Guid itemId);
        Windows.Foundation.IAsyncAction UnpinHistoryItemAsync(Guid itemId);
        Windows.Foundation.IAsyncAction UploadHistoryItemAsync(Guid itemId);
        void ClearClipboardHistory(Boolean includePinned);
        void ClearClipboardHistoryForUser(UInt64 userContextToken, Boolean includePinned);
        UInt32 GetHistoryItemCount(Boolean includePinned);
        void NotifyCloudClipboardChanged();
        Boolean ItemExists(Guid itemId);
        event Windows.Foundation.EventHandler <Object>  PinnedItemsRestored;
    }



    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [static_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSettingsStatics", c26e0801-0c6f-5e38-bca0-c795785d313e)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSettings", f8b6dde7-fc19-5de2-9b0f-6c9cc59e8472)]
    [threading(both)]
    runtimeclass ClipboardSettings
    {
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardSettings GetInstance();
        Boolean HistorySettingEnabled{ get; };
        Boolean HistorySettingEnabled{ set; };
        Boolean CloudSettingEnabled{ get; };
        Boolean CloudSettingEnabled{ set; };
        Boolean CloudAutomaticUploadEnabled{ get; };
        Boolean CloudAutomaticUploadEnabled{ set; };
        UInt32 CloudContentValueWindowInSec{ get; };
        UInt32 CloudContentValueWindowInSec{ set; };
        UInt32 CloudContentRemoteOverrideInSec{ get; };
        UInt32 CloudContentRemoteOverrideInSec{ set; };
        Boolean HistoryPolicyEnabled{ get; };
        Boolean CloudPolicyEnabled{ get; };
        Boolean HistoryEnabled{ get; };
        Boolean CloudEnabled{ get; };
        event Windows.Foundation.EventHandler <Object>  HistorySettingChanged;
        event Windows.Foundation.EventHandler <Object>  CloudSettingChanged;
        Boolean ClipboardHistoryForceDataDiskSerialization{ get; };
        Boolean ClipboardHistoryForceDataDiskSerialization{ set; };
        UInt64 ClipboardHistoryMaxItemSizeInBytes{ get; };
        UInt64 ClipboardHistoryMaxItemSizeInBytes{ set; };
        UInt64 ClipboardHistoryMaxSizeInBytes{ get; };
        UInt64 ClipboardHistoryMaxSizeInBytes{ set; };
        UInt32 ClipboardHistoryMaxItemsCount{ get; };
        UInt32 ClipboardHistoryMaxItemsCount{ set; };
        Boolean RDPOverrideEnabled{ get; };
        Boolean RDPOverrideEnabled{ set; };
        Boolean IsRDPConnectedSession{ get; };
        Boolean IsRDPConnectedSession{ set; };
        Boolean PastedFromClipboardUI{ get; };
        Boolean PastedFromClipboardUI{ set; };
        Boolean ShellHotKeyUsed{ get; };
        Boolean ShellHotKeyUsed{ set; };
        Boolean ClipboardTipRequired{ get; };
        Boolean ClipboardTipRequired{ set; };
        UInt32 ClipboardHistoryMaxPinnedItemsCount{ get; };
        UInt32 ClipboardHistoryMaxPinnedItemsCount{ set; };
        Windows.Foundation.DateTime HistoryOldItemsLastCleanupTimestamp{ get; };
        Windows.Foundation.DateTime HistoryOldItemsLastCleanupTimestamp{ set; };
        Boolean DoubleCopyGestureEnabled{ get; };
        Boolean DoubleCopyGestureEnabled{ set; };
        Boolean CanUploadHistoryItems();
        Boolean CanEnableCloudClipboard();
        Boolean IsUserCloudClipboardCapable();
    }


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [static_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSettingsProviderStatics", 127dc253-0460-589a-9e7d-8df0c5aa642b)]
    [threading(both)]
    runtimeclass ClipboardSettingsProvider
    {
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardSettings GetSettings();
    }

    [uuid(e81172dc-3ef0-5244-a115-e2800edac3b9)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    interface IClipboardViewLauncher
    {
        void ShowClipboardView();
        void PreloadClipboardView();
    };

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardViewInvokeType
    {
        ShellHotKey,
        InputPanel,
        DoubleCopy,
    };

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardViewManagerPreloadReason
    {
        LocalClipboardChange,
        CloudClipboardChange,
    };



    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [static_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardViewManagerStatics", 8d43ca58-75b7-582d-ae6f-a0208c6c50f2)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardViewManager", a5275eb7-46cd-5506-be12-c08fbae67e0e)]
    [threading(both)]
    runtimeclass ClipboardViewManager
    {
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardViewManager GetInstance();
        void Show(ClipboardViewInvokeType type);
    }


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardBrokerProvider", 3189d1c8-c44e-50df-86d7-78a6763544f9)]
    runtimeclass ClipboardBrokerProvider
    {
        Object GetBroker();
    }



    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [marshaling_behavior(agile)]
    [static_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardOperationAppInfoStatics", acdb84b6-4fe4-5b5e-8f9f-2a1d74383805)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardOperationAppInfo", 18680532-506a-55bd-9b7b-bc65fbf53db8)]
    [threading(both)]
    runtimeclass ClipboardOperationAppInfo
    {
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardOperationAppInfo TryCreateForClipboardChange();
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardOperationAppInfo TryCreateForPaste();
        String AppId{ get; };
        String AppId{ set; };
        UInt32 ProcessId{ get; };
        UInt32 ProcessId{ set; };
        UInt64 WindowId{ get; };
        UInt64 WindowId{ set; };
        String AppName{ get; };
        String AppName{ set; };
    }

    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    enum ClipboardPasteSignalReason
    {
        None,
        KeyCombination,
        KeyCombinationHardwareKeyboard,
        History,
    };


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSignalProducedEventArgs", 6d010073-a448-511e-a00d-2d45186d1381)]
    runtimeclass ClipboardSignalProducedEventArgs
    {
        String ClipboardDataId{ get; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardOperationAppInfo AppInfo{ get; };
        Windows.Foundation.DateTime Timestamp{ get; };
        Windows.ApplicationModel.Internal.DataTransfer.ClipboardPasteSignalReason PasteSignalReason{ get; };
    }

    [uuid(c1a75e36-f5c8-5b2d-ad8d-91b240a0d370)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    interface IClipboardSignalProducerInput
    {
        void ConsumeClipboardChange(ClipboardOperationAppInfo sourceAppInfo, Windows.Foundation.DateTime timestamp, String clipboardDataId);
        void ConsumePaste(ClipboardOperationAppInfo pasteAppInfo, Windows.Foundation.DateTime timestamp, String clipboardDataId, ClipboardPasteSignalReason pasteSignalReason);
        void Clear();
    };


    [marshaling_behavior(agile)]
    [contract(Windows.ApplicationModel.Internal.DataTransfer.InternalContract, 1)]
    [static_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSignalProducerStatics", 18b9a549-4b2d-5c65-80cf-e67b60e76adf)]
    [interface_name("Windows.ApplicationModel.Internal.DataTransfer.IClipboardSignalProducer", da0df1fa-48ca-5298-b7a3-65a4b5d78a15)]
    [threading(both)]
    runtimeclass ClipboardSignalProducer
        : Windows.ApplicationModel.Internal.DataTransfer.IClipboardSignalProducerInput
    {
        static Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducer GetInstance();
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducer, Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducedEventArgs>  ClipboardCopySignalProduced;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducer, Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducedEventArgs>  ClipboardPasteSignalProduced;
        event Windows.Foundation.TypedEventHandler <Windows.ApplicationModel.Internal.DataTransfer.ClipboardSignalProducer, Object>  ClipboardSignalSourceCleared;
    }


}
