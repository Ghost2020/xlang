






namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum ActivationInfoFlags
    {
        None,
        SupportsMultipleInstances,
        SupportsMultipleUsers,
        IsConsoleSubsystem = 4,
        PackageHasCentennial = 8,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum AppExecutionAliasFlags
    {
        None,
        AllowOverride,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum AppExecutionAliasStatus
    {
        Unknown,
        Enabled,
        Disabled,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum AppInstallerFlags
    {
        None,
        CheckInBackground,
        CheckOnLaunch,
        PromptToCheckOnLaunch = 4,
        UpdateBlocksActivation = 8,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum AppListEntry
    {
        Default,
        None,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ApplicationContentUriRuleFlags
    {
        None,
        ServiceWorker,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ApplicationExtensionFlags
    {
        None,
        LocalizedDictionaryNeedsResolution,
        LocalizedDictionaryIsReady,
        IsCentennialFullTrust = 4,
        IsCentennialPartialTrust = 16,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum ApplicationFlags
    {
        None,
        SplashScreenIsOptional,
        IsServerApplication,
        IsCentennialFullTrust = 4,
        SupportsMultipleInstances = 8,
        IsCentennialPartialTrust = 16,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum ApplicationType
    {
        Unknown,
        Modern,
        Silverlight80,
        Silverlight81 = 4,
        Splash = 8,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ApplicationViewWidth
    {
        Default,
        Width320,
        Width500,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum BundlePackageFlags
    {
        None,
        ResourcesDefault,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum BundlePackageType
    {
        Application,
        Resource,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CacheApplicationFlags
    {
        None,
        IsCentennialFullTrust = 4,
        SupportsMultipleInstances = 8,
        IsCentennialPartialTrust = 16,
        IsConsoleSubsystem = 65536,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CachePackageFlags
    {
        None,
        IsDevelopmentMode,
        HasServerApplication,
        HasCentennial = 4,
        IsMachineRegistered = 8,
        IsPackagePayloadEncrypted = 16,
        IsMetadataLocationUnderSystemMetadata = 32,
        HasRunFullTrustCapability = 64,
        IsInRelatedSet = 128,
        DoNotAllowExecution = 256,
        IsNonQualifiedResourcePackage = 512,
        MostRecentlyStagedInFamily = 1024,
        IsMsixvc = 2048,
        IsSingletonRegistered = 4096,
        NeedsSingletonRegistration = 8192,
        FileSystemWriteVirtualizationDisabled = 16384,
        RegistryWriteVirtualizationDisabled = 32768,
        LoaderSearchPathOverride = 65536,
        IsMutablePackageDirectoryProcessed = 131072,
        IsModificationPackage = 262144,
        IsSupportedUsersMultiple = 16777216,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ChangelogAction
    {
        Unknown,
        Added,
        Changed,
        Deleted,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum ConnectedSetFlags
    {
        None,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ConnectedSetStatus
    {
        Unknown,
        Ready,
        DeletePendingNonBlocking,
        DeletePendingBlocking,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ContentGroupStatus
    {
        NotQueued,
        Queued,
        Processing,
        Complete,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ContentGroupType
    {
        Unknown,
        Required,
        Automatic,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CustomInstallFlags
    {
        None,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CustomInstallProcessFlags
    {
        None,
        UninstallOnUpdate,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CustomInstallProcessStatus
    {
        Unknown,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CustomInstallVerb
    {
        Unknown,
        Install,
        Update,
        Uninstall,
        Repair,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum CustomInstallWorkFlags
    {
        None,
        Repair,
        Uninstall,
        MustRunUninstall = 4,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum CustomInstallWorkStatus
    {
        Unknown,
        Succeeded,
        Failed,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DataChangeDisposition
    {
        Unknown,
        Add,
        Update,
        Delete,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DefaultTileDefaultSize
    {
        None,
        Square150x150Logo,
        Wide310x150Logo,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DefaultTileShowNameOnTiles
    {
        None,
        Square150x150Logo,
        Wide310x150Logo,
        Square310x310Logo = 4,
        AllLogos = 7,
        NoLogos = 0,
        LogoOnly,
        WideLogoOnly,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DefaultTileUpdateRecurrence
    {
        None,
        HalfHour,
        Hour,
        SixHours,
        TwelveHours,
        Daily,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DependencyFlags
    {
        None,
        Optional,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DependencyGraphType
    {
        Unknown,
        FrameworkDependency,
        ResourceDependency,
        OptionalPackageDependency,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum DependencyType
    {
        Unknown,
        PackageDependency = 2,
        MainPackageDependency = 32,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DeploymentOperation
    {
        Invalid,
        Add,
        Remove,
        Update,
        Stage,
        DeStage,
        Register,
        GetSortedRegisterPackage,
        FixStagedPackages,
        DeletePackageFiles,
        RegisterByPackageFullName,
        StageUserData,
        PreRegisterPackage,
        MovePackage,
        AddVolume,
        DeleteVolume,
        SetVolumeOffline,
        SetVolumeOnline,
        GetDefaultVolume,
        SetDefaultVolume,
        RegisterByPackageFamilyName,
        RegisterByPackageFamilyNameForApplicableUsers,
        GeneratePreviewTiles,
        ResetApplicationData,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum DeploymentOptions
    {
        None,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum LockScreenNotification
    {
        Unknown,
        Badge,
        BadgeAndTileText,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum NamedDependencyType
    {
        Unknown,
        OSPackageDependency,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum PackageExtensionFlags
    {
        None,
        LocalizedDictionaryNeedsResolution,
        LocalizedDictionaryIsReady,
        IsCentennialFullTrust = 4,
        IsCentennialPartialTrust = 16,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum PackageFlags
    {
        None,
        IsDevelopmentMode,
        HasServerApplication,
        HasCentennial = 4,
        IsMachineRegistered = 8,
        IsPackagePayloadEncrypted = 16,
        IsMetadataLocationUnderSystemMetadata = 32,
        HasRunFullTrustCapability = 64,
        IsInRelatedSet = 128,
        DoNotAllowExecution = 256,
        IsNonQualifiedResourcePackage = 512,
        MostRecentlyStagedInFamily = 1024,
        IsMsixvc = 2048,
        IsSingletonRegistered = 4096,
        NeedsSingletonRegistration = 8192,
        FileSystemWriteVirtualizationDisabled = 16384,
        RegistryWriteVirtualizationDisabled = 32768,
        LoaderSearchPathOverride = 65536,
        IsMutablePackageDirectoryProcessed = 131072,
        IsModificationPackage = 262144,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum PackageOrigin
    {
        Unknown,
        Unsigned,
        Inbox,
        Store,
        DeveloperUnsigned,
        DeveloperSigned,
        LineOfBusiness,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum PackageSourceUriKind
    {
        Unknown,
        Staging,
        Register,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum PackageStatus
    {
        OK,
        LicenseIssue,
        ModifiedPackage,
        Tampered = 4,
        Disabled = 8,
        Offline = 16,
        DeploymentInProgress = 32,
        DependencyPackageIssue = 64,
        DataOffline = 128,
        ModifiedState = 256,
        ModifiedData = 512,
        RegistrationRequiredNonblocking = 1024,
        RegistrationRequiredBlocking = 2048,
        BackupInProgress = 4096,
        MdilBindingInProgress = 8192,
        ResumeRequireValidation = 16384,
        InPlaceUpdatePending = 32768,
        IsPartiallyStaged = 65536,
        IsAppInstallerUpdatable = 131072,
        FoldingPending = 262144,
        MaskModified = 770,
        MaskBad = 775,
        MaskOffline = 144,
        MaskNotAvailable = 152,
        MaskServicing = 12320,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum PackageType
    {
        Unknown,
        Main,
        Framework,
        Resource = 4,
        Bundle = 8,
        Xap = 16,
        Optional = 32,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum ProtocolReturnResults
    {
        None,
        Always,
        Optional,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum ProvisionedPackageFlags
    {
        None,
        DoNotKeepAfterPcReset,
        RegisterOnlyForDefaultAccount,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum RotationPreference
    {
        None,
        Portrait,
        Landscape,
        PortraitFlipped = 4,
        LandscapeFlipped = 8,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum SRJournalAction
    {
        Unknown,
        Add,
        Update,
        Delete,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [flags]
    enum SRJournalFlags
    {
        None,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum SRJournalObjectType
    {
        Unknown,
        Package,
        PackageUser,
        Application,
        User,
        PackageFamily,
        PackageExtension,
        ApplicationExtension,
        AppUriHandlerGroup,
        AppUriHandler,
        DynamicAppUriHandlerGroup,
        DynamicAppUriHandler,
        PackageMachineStatus,
        PackageUserStatus,
        ApplicationUser,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum SequenceId
    {
        Unknown,
        ChangeId,
        SRJournalId,
        CacheApplicationUserID,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum SignatureOrigin
    {
        NotValidated,
        Unknown,
        Store,
        Windows,
        Enterprise,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum Subsystem
    {
        Windows,
        Console,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum SupportedUsers
    {
        Unknown,
        Single,
        Multiple,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum TileFlags
    {
        None,
        VisibleInAppList,
        VisibleInSettings,
        SupportsKidZone = 4,
        SupportsLockScreen = 8,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum TileTemplate
    {
        Unknown,
        Metrocount,
        Agilestore,
        Games,
        Calendar,
        Flip,
        MusicVideo = 7,
        People = 10,
        Contact,
        Group,
        DeepLink,
        Cycle,
        Default,
        Badge,
        Block,
        Text01,
        Text02,
        Text03,
        Text04,
        Text05,
        Text06,
        Text07,
        Text08,
        Text09,
        Text10,
        Text11,
        Image,
        ImageCollection,
        ImageAndtext01,
        ImageAndtext02,
        BlockAndtext01,
        BlockAndtext02,
        PeekImageAndText01,
        PeekImageAndText02,
        PeekImageAndText03,
        PeekImageAndText04,
        PeekImage01,
        PeekImage02,
        PeekImage03,
        PeekImage04,
        PeekImage05,
        PeekImage06,
        PeekImageCollection01,
        PeekImageCollection02,
        PeekImageCollection03,
        PeekImageCollection04,
        PeekImageCollection05,
        PeekImageCollection06,
        SmallImageAndText01,
        SmallImageAndText02,
        SmallImageAndText03,
        SmallImageAndText04,
        SmallImageAndText05,
        MetroCountQueue,
        Search,
        TileFlyout01,
        Folder,
        Adaptive,
    };

    [flags]
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum TileType
    {
        Unknown,
        Primary,
        Secondary,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum TileUserState
    {
        Unknown,
        Active,
        Preview,
    };

    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    enum WindowsRuntimeAccess
    {
        None,
        All,
        AllowForWebOnly,
        Default = 0,
    };

}
