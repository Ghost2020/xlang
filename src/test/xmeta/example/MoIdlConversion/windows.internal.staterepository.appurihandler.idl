












namespace Windows.Internal.StateRepository
{
    [contract(Windows.Internal.StateRepository.StateRepositoryContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Internal.StateRepository.IAppUriHandlerStatics", 804eb537-d7e6-4945-bba0-e6137d421ae4)]
    [interface_name("Windows.Internal.StateRepository.IAppUriHandler", 21f54ca7-3fe6-447a-a4dc-a9afc49c4999)]
    [threading(both)]
    runtimeclass AppUriHandler
    {
        AppUriHandler();
        static Boolean Exists(Int64 appUriHandlerID);
        static Boolean ExistsByExtension(ApplicationExtension Extension);
        static Boolean ExistsByHostName(String HostName);
        static Boolean ExistsByHostNameAndExtension(String HostName, ApplicationExtension Extension);
        static Boolean ExistsByProgID(String ProgID);
        static Boolean ExistsByProgIDAndExtension(String ProgID, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppUriHandler Get(Int64 appUriHandlerID);
        static Windows.Internal.StateRepository.AppUriHandler TryGet(Int64 appUriHandlerID);
        static Windows.Internal.StateRepository.AppUriHandler GetByHostNameAndExtension(String HostName, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppUriHandler TryGetByHostNameAndExtension(String HostName, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppUriHandler GetByProgIDAndExtension(String ProgID, ApplicationExtension Extension);
        static Windows.Internal.StateRepository.AppUriHandler TryGetByProgIDAndExtension(String ProgID, ApplicationExtension Extension);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  Find();
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  FindByExtension(ApplicationExtension Extension);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  FindByHostName(String HostName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  FindByProgID(String ProgID);
        static Boolean ExistsByUser(User user);
        static Boolean ExistsByUserAndHostName(User user, String hostName);
        static Boolean ExistsByUserOrDefaultAccountAndHostName(User user, String hostName);
        static Boolean ExistsByUserOrDefaultAccountAndHostNameAndPackageFamilyName(User user, String hostName, String packageFamilyName);
        static Boolean ExistsByUserAndProgId(User user, String progId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  FindByUser(User user);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandler>  FindByUserAndHostName(User user, String hostName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindLauncherInfoByUserOrDefaultAccountAndHostName(User user, String hostName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindLauncherInfoByUserOrDefaultAccountAndHostNameAndPackageFamilyName(User user, String hostName, String packageFamilyName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindLauncherInfoByUserOrDefaultAccountAndProgId(User user, String progId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindByUserOrDefaultAccount(User user);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcarded(User user, String hostName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPackageFamilyName(User user, String hostName, String packageFamilyName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindAllLauncherInfoByUserOrDefaultAccountAndProgId(User user, String progId);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcarded(User user, String hostName);
        static Windows.Foundation.Collections.IVectorView <Windows.Internal.StateRepository.AppUriHandlerLauncherInfo>  FindAllLauncherInfoByUserOrDefaultAccountAndHostNameEvenIfWildcardedAndPackageFamilyName(User user, String hostName, String packageFamilyName);
        Int64 _AppUriHandlerID{ get; };
        Int64 _AppUriHandlerID{ set; };
        UInt64 _Revision{ get; };
        UInt64 _Revision{ set; };
        String HostName{ get; };
        String HostName{ set; };
        Int64 Extension{ get; };
        Int64 Extension{ set; };
        Windows.Internal.StateRepository.ApplicationExtension GetExtension();
        void SetExtension(ApplicationExtension value);
        Boolean IsProgIDNull{ get; };
        void SetProgIDToNull();
        String ProgID{ get; };
        String ProgID{ set; };
        Int64 AppUriHandlerGroup{ get; };
        Int64 AppUriHandlerGroup{ set; };
        Windows.Internal.StateRepository.AppUriHandlerGroup GetAppUriHandlerGroup();
        void SetAppUriHandlerGroup(AppUriHandlerGroup value);
        Boolean Is_DictionaryNull{ get; };
        void Set_DictionaryToNull();
        void Get_Dictionary(out UInt8[] value);
        void Set_Dictionary(UInt8[] value);
        Windows.Foundation.Collections.IPropertySet Get_DictionaryAsPropertySet();
    }


}
