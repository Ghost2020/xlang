








namespace Windows.Devices.Midi
{
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    enum MidiMessageType
    {
        None,
        NoteOff = 128,
        NoteOn = 144,
        PolyphonicKeyPressure = 160,
        ControlChange = 176,
        ProgramChange = 192,
        ChannelPressure = 208,
        PitchBendChange = 224,
        SystemExclusive = 240,
        MidiTimeCode,
        SongPositionPointer,
        SongSelect,
        TuneRequest = 246,
        EndSystemExclusive,
        TimingClock,
        Start = 250,
        Continue,
        Stop,
        ActiveSensing = 254,
        SystemReset,
    };

    [uuid(79767945-1094-4283-9be0-289fc0ee8334)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    interface IMidiMessage
    {
        Windows.Foundation.TimeSpan Timestamp{ get; };
        Windows.Storage.Streams.IBuffer RawData{ get; };
        Windows.Devices.Midi.MidiMessageType Type{ get; };
    };












    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiNoteOffMessageFactory", a6b240e0-a749-425f-8af4-a4d979cc15b5)]
    [interface_name("Windows.Devices.Midi.IMidiNoteOffMessage", 16fd8af4-198e-4d8f-a654-d305a293548f)]
    [threading(both)]
    runtimeclass MidiNoteOffMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiNoteOffMessage" )] MidiNoteOffMessage(UInt8 channel, UInt8 note, UInt8 velocity);
        UInt8 Channel{ get; };
        UInt8 Note{ get; };
        UInt8 Velocity{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiNoteOnMessageFactory", 9b4280a0-59c1-420e-b517-15a10aa9606b)]
    [interface_name("Windows.Devices.Midi.IMidiNoteOnMessage", e0224af5-6181-46dd-afa2-410004c057aa)]
    [threading(both)]
    runtimeclass MidiNoteOnMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiNoteOnMessage" )] MidiNoteOnMessage(UInt8 channel, UInt8 note, UInt8 velocity);
        UInt8 Channel{ get; };
        UInt8 Note{ get; };
        UInt8 Velocity{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessageFactory", e98f483e-c4b3-4dd2-917c-e349815a1b3b)]
    [interface_name("Windows.Devices.Midi.IMidiPolyphonicKeyPressureMessage", 1f7337fe-ace8-48a0-868e-7cdbf20f04d6)]
    [threading(both)]
    runtimeclass MidiPolyphonicKeyPressureMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiPolyphonicKeyPressureMessage" )] MidiPolyphonicKeyPressureMessage(UInt8 channel, UInt8 note, UInt8 pressure);
        UInt8 Channel{ get; };
        UInt8 Note{ get; };
        UInt8 Pressure{ get; };
    }


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiControlChangeMessageFactory", 2ab14321-956c-46ad-9752-f87f55052fe3)]
    [interface_name("Windows.Devices.Midi.IMidiControlChangeMessage", b7e15f83-780d-405f-b781-3e1598c97f40)]
    [threading(both)]
    runtimeclass MidiControlChangeMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiControlChangeMessage" )] MidiControlChangeMessage(UInt8 channel, UInt8 controller, UInt8 controlValue);
        UInt8 Channel{ get; };
        UInt8 Controller{ get; };
        UInt8 ControlValue{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [constructor_name("Windows.Devices.Midi.IMidiProgramChangeMessageFactory", d6b04387-524b-4104-9c99-6572bfd2e261)]
    [interface_name("Windows.Devices.Midi.IMidiProgramChangeMessage", 9cbb3c78-7a3e-4327-aa98-20b8e4485af8)]
    [threading(both)]
    runtimeclass MidiProgramChangeMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiProgramChangeMessage" )] MidiProgramChangeMessage(UInt8 channel, UInt8 program);
        UInt8 Channel{ get; };
        UInt8 Program{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Devices.Midi.IMidiChannelPressureMessageFactory", 6218ed2f-2284-412a-94cf-10fb04842c6c)]
    [interface_name("Windows.Devices.Midi.IMidiChannelPressureMessage", be1fa860-62b4-4d52-a37e-92e54d35b909)]
    [threading(both)]
    runtimeclass MidiChannelPressureMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiChannelPressureMessage" )] MidiChannelPressureMessage(UInt8 channel, UInt8 pressure);
        UInt8 Channel{ get; };
        UInt8 Pressure{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiPitchBendChangeMessageFactory", f5eedf55-cfc8-4926-b30e-a3622393306c)]
    [interface_name("Windows.Devices.Midi.IMidiPitchBendChangeMessage", 29df4cb1-2e9f-4faf-8c2b-9cb82a9079ca)]
    [threading(both)]
    runtimeclass MidiPitchBendChangeMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiPitchBendChangeMessage" )] MidiPitchBendChangeMessage(UInt8 channel, UInt16 bend);
        UInt8 Channel{ get; };
        UInt16 Bend{ get; };
    }


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiSystemExclusiveMessageFactory", 083de222-3b74-4320-9b42-0ca8545f8a24)]
    [threading(both)]
    runtimeclass MidiSystemExclusiveMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiSystemExclusiveMessage" )] MidiSystemExclusiveMessage(Windows.Storage.Streams.IBuffer rawData);
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiTimeCodeMessageFactory", eb3099c5-771c-40de-b961-175a7489a85e)]
    [interface_name("Windows.Devices.Midi.IMidiTimeCodeMessage", 0bf7087d-fa63-4a1c-8deb-c0e87796a6d7)]
    [threading(both)]
    runtimeclass MidiTimeCodeMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiTimeCodeMessage" )] MidiTimeCodeMessage(UInt8 frameType, UInt8 values);
        UInt8 FrameType{ get; };
        UInt8 Values{ get; };
    }


    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [constructor_name("Windows.Devices.Midi.IMidiSongPositionPointerMessageFactory", 9c00e996-f10b-4fea-b395-f5d6cf80f64e)]
    [interface_name("Windows.Devices.Midi.IMidiSongPositionPointerMessage", 4ca50c56-ec5e-4ae4-a115-88dc57cc2b79)]
    [threading(both)]
    runtimeclass MidiSongPositionPointerMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiSongPositionPointerMessage" )] MidiSongPositionPointerMessage(UInt16 beats);
        UInt16 Beats{ get; };
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [constructor_name("Windows.Devices.Midi.IMidiSongSelectMessageFactory", 848878e4-8748-4129-a66c-a05493f75daa)]
    [interface_name("Windows.Devices.Midi.IMidiSongSelectMessage", 49f0f27f-6d83-4741-a5bf-4629f6be974f)]
    [threading(both)]
    runtimeclass MidiSongSelectMessage
        : Windows.Devices.Midi.IMidiMessage
    {
        [method_name( "CreateMidiSongSelectMessage" )] MidiSongSelectMessage(UInt8 song);
        UInt8 Song{ get; };
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [threading(both)]
    runtimeclass MidiTuneRequestMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiTuneRequestMessage();
    }

    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass MidiTimingClockMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiTimingClockMessage();
    }

    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [threading(both)]
    runtimeclass MidiStartMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiStartMessage();
    }

    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass MidiContinueMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiContinueMessage();
    }

    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [threading(both)]
    runtimeclass MidiStopMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiStopMessage();
    }

    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [threading(both)]
    runtimeclass MidiActiveSensingMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiActiveSensingMessage();
    }

    [marshaling_behavior(agile)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [threading(both)]
    runtimeclass MidiSystemResetMessage
        : [default]Windows.Devices.Midi.IMidiMessage
    {
        MidiSystemResetMessage();
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [interface_name("Windows.Devices.Midi.IMidiMessageReceivedEventArgs", 76566e56-f328-4b51-907d-b3a8ce96bf80)]
    runtimeclass MidiMessageReceivedEventArgs
    {
        Windows.Devices.Midi.IMidiMessage Message{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [static_name("Windows.Devices.Midi.IMidiInPortStatics", 44c439dc-67ff-4a6e-8bac-fdb6610cf296)]
    [interface_name("Windows.Devices.Midi.IMidiInPort", d5c1d9db-971a-4eaf-a23d-ea19fe607ff9)]
    [threading(both)]
    runtimeclass MidiInPort
        : Windows.Foundation.IClosable
    {
        static Windows.Foundation.IAsyncOperation <Windows.Devices.Midi.MidiInPort>  FromIdAsync(String deviceId);
        static String GetDeviceSelector();
        event Windows.Foundation.TypedEventHandler <Windows.Devices.Midi.MidiInPort, Windows.Devices.Midi.MidiMessageReceivedEventArgs>  MessageReceived;
        String DeviceId{ get; };
    }


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [uuid(931d6d9f-57a2-4a3a-adb8-4640886f6693)]
    interface IMidiOutPort requires Windows.Foundation.IClosable
    {
        void SendMessage(IMidiMessage midiMessage);
        void SendBuffer(Windows.Storage.Streams.IBuffer midiData);
        String DeviceId{ get; };
    };


    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [dualapipartition(0xa000000)]
    [marshaling_behavior(agile)]
    [static_name("Windows.Devices.Midi.IMidiOutPortStatics", 065cc3e9-0f88-448b-9b64-a95826c65b8f)]
    [threading(both)]
    runtimeclass MidiOutPort
        : [default]Windows.Devices.Midi.IMidiOutPort
        , Windows.Foundation.IClosable
    {
        static Windows.Foundation.IAsyncOperation <Windows.Devices.Midi.IMidiOutPort>  FromIdAsync(String deviceId);
        static String GetDeviceSelector();
    }


    [marshaling_behavior(agile)]
    [dualapipartition(0xa000000)]
    [contract(Windows.Foundation.UniversalApiContract, 1)]
    [static_name("Windows.Devices.Midi.IMidiSynthesizerStatics", 4224eaa8-6629-4d6b-aa8f-d4521a5a31ce)]
    [interface_name("Windows.Devices.Midi.IMidiSynthesizer", f0da155e-db90-405f-b8ae-21d2e17f2e45)]
    [threading(both)]
    runtimeclass MidiSynthesizer
        : Windows.Devices.Midi.IMidiOutPort
        , Windows.Foundation.IClosable
    {
        [method_name("CreateAsync")] static Windows.Foundation.IAsyncOperation <Windows.Devices.Midi.MidiSynthesizer>  CreateAsync();
        [method_name("CreateFromAudioDeviceAsync")] static Windows.Foundation.IAsyncOperation <Windows.Devices.Midi.MidiSynthesizer>  CreateAsync(Windows.Devices.Enumeration.DeviceInformation audioDevice);
        static Boolean IsSynthesizer(Windows.Devices.Enumeration.DeviceInformation midiDevice);
        Windows.Devices.Enumeration.DeviceInformation AudioDevice{ get; };
        Double Volume{ get; };
        Double Volume{ set; };
    }


}
